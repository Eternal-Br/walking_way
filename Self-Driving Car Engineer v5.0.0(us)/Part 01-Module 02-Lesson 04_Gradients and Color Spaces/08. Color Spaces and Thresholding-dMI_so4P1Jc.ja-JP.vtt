WEBVTT
Kind: captions
Language: ja-JP

00:00:00.470 --> 00:00:04.389
これまでに見た道路の画像は

00:00:04.389 --> 00:00:07.199
すべて赤 緑 青の値 つまりRGBで構成されていることがわかります

00:00:07.200 --> 00:00:10.359
これまでは これらのRGB値にマスキングと色のしきい値の組み合わせを使って

00:00:10.359 --> 00:00:14.914
明るい白の車線のピクセルを選択してきました

00:00:14.914 --> 00:00:19.739
この車線検出は

00:00:19.739 --> 00:00:23.159
グレースケール強度測定に依存する勾配検出と一緒に機能することができます

00:00:23.160 --> 00:00:27.509
ただし さまざまな照明条件を含む画像や車線が黄色のような異なる色である場合は

00:00:27.510 --> 00:00:31.198
RGBしきい値処理はそれほどうまくいきません

00:00:31.198 --> 00:00:33.170
私が意図していることをお見せしましょう

00:00:33.170 --> 00:00:34.770
この道路の画像を見てください

00:00:34.770 --> 00:00:37.880
チャネルと呼ばれる

00:00:37.880 --> 00:00:40.160
別々のRGBコンポーネントに分解することができます

00:00:40.159 --> 00:00:44.079
これがグレースケール強度で表された3つのチャネルです

00:00:44.079 --> 00:00:47.939
より明るいピクセルが

00:00:47.939 --> 00:00:49.609
それぞれ赤 緑 または青の高い値を示します

00:00:49.609 --> 00:00:52.149
車線を見ると 赤と緑のチャネルが

00:00:52.149 --> 00:00:55.949
白と黄色の車線の両方で高いことがわかります

00:00:55.950 --> 00:00:57.415
しかし 青のチャネルを見ると

00:00:57.414 --> 00:00:59.750
黄色の車線には青の成分はほとんどありません

00:01:00.789 --> 00:01:05.250
そのため RとGチャネルは

00:01:05.250 --> 00:01:07.060
白と黄色の両方の車線ピクセルを分離するのに最も役立ちます

00:01:07.060 --> 00:01:10.189
しかし 赤と緑の値は

00:01:10.189 --> 00:01:13.259
画像の背景の明るさのレベルが異なると変化することもわかります

00:01:13.260 --> 00:01:14.820
これらの色は影の下では低くなり

00:01:14.819 --> 00:01:18.729
極端な明るさの下では一貫して車線を認識しません

00:01:18.730 --> 00:01:21.740
これらの車線を検出するためのより良い方法がないか見ていきましょう

00:01:21.739 --> 00:01:24.829
赤 緑 青の値だけで構成する以外にも

00:01:24.829 --> 00:01:28.379
画像内の色を表現する方法はたくさんあります

00:01:28.379 --> 00:01:32.729
これらの異なる色表現は多くの場合 色空間と呼ばれます

00:01:32.730 --> 00:01:36.040
RGBは赤 緑 青から成る色空間です

00:01:36.040 --> 00:01:38.859
これは3D空間であり この場合は立方体と考えることができます

00:01:38.859 --> 00:01:44.569
ここでは任意の色をR G およびBの値の3D 標で表すことができます

00:01:44.569 --> 00:01:49.639
HSV色空間(色相 彩度 値)

00:01:49.640 --> 00:01:53.599
およびHLS空間(色相 明度 彩度)もあります

00:01:53.599 --> 00:01:57.569
これらは 画像解析で最も一般的に使用されている色空間です

00:01:57.569 --> 00:02:01.759
どちらの場合も 円柱色空間の周囲の度数について

00:02:01.760 --> 00:02:05.070
Hの範囲は0～179です

00:02:05.069 --> 00:02:09.219
また RGBからHLS空間への数学的変換についての詳細は

00:02:09.219 --> 00:02:11.250
下記の注にあります

00:02:11.250 --> 00:02:15.189
HLS色空間の例を見ていきましょう

00:02:15.189 --> 00:02:20.090
これは 画像内の各ピクセルの明度またはL成分を分離します

00:02:20.090 --> 00:02:23.409
そしてこれは さまざまな照明条件下で

00:02:23.409 --> 00:02:24.930
最も変化する要素です

00:02:24.930 --> 00:02:28.590
しかし HチャネルとSチャネルは シャドウや過度の明るさの下でも

00:02:28.590 --> 00:02:30.080
ほぼ一貫しています

00:02:30.080 --> 00:02:32.070
また これらのチャネルのみを使って

00:02:32.069 --> 00:02:35.719
Lチャンネルの情報を破棄すると

00:02:35.719 --> 00:02:39.639
RGB色空間よりも確実に 異なる色の車線の色を検出できます

00:02:40.719 --> 00:02:45.599
これは 同じRGB道路画像をHLS色空間に変換したものです

00:02:45.599 --> 00:02:48.969
これを別々のH L Sチャネルに分解すると

00:02:48.969 --> 00:02:53.889
この色空間とRGB色空間の違いがわかります

00:02:53.889 --> 00:02:57.449
ここでは Sチャネルが車線をはっきりと検出し

00:02:57.449 --> 00:03:00.544
Hチャンネルの暗い部分も検出しているように見えます

00:03:00.544 --> 00:03:03.905
このチャネルを使って

00:03:03.905 --> 00:03:07.414
異なる色の車線ピクセルを確実に検出するスマートカラーしきい値を作成できます

00:03:07.414 --> 00:03:10.125
次にコード内のカラーしきい値の例を見てみましょう

