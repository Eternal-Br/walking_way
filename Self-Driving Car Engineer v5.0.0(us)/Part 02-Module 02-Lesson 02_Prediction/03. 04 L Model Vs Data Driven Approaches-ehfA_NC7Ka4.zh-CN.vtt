WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.430
设想一个 T 型路口

00:00:02.430 --> 00:00:06.630
蓝色无人驾驶汽车在停车标志处停下

00:00:06.629 --> 00:00:11.469
蓝车想左转 但是它看到这辆绿车从左边过来了

00:00:11.470 --> 00:00:13.935
如果绿车要右转

00:00:13.935 --> 00:00:16.054
那么蓝车可以安全左转

00:00:16.054 --> 00:00:18.989
但是如果绿车直行

00:00:18.989 --> 00:00:21.084
那么蓝车应该等待

00:00:21.085 --> 00:00:24.955
下面我们讲一下如何使用基于模型法处理这种情况

00:00:24.954 --> 00:00:27.899
首先 这里涉及到两个过程模型

00:00:27.899 --> 00:00:31.344
直行过程模型和右转过程模型

00:00:31.344 --> 00:00:35.129
我们将使用一些简单轨迹生成器来绘出

00:00:35.130 --> 00:00:38.040
当驾驶员直行或者右转时

00:00:38.039 --> 00:00:41.460
我们的预期轨迹

00:00:41.460 --> 00:00:47.265
接下来 我们将把注意力放在目标车辆的实际行为上

00:00:47.265 --> 00:00:51.954
并使用一个当前还是个黑盒子的多模估量算法

00:00:51.954 --> 00:00:57.244
我们将对比观察的轨迹与每个模块中我们预期生成的轨迹

00:00:57.244 --> 00:00:59.864
接下来 基于上述对比

00:00:59.865 --> 00:01:04.375
我们将为每一条可能轨迹赋予一个几率

00:01:04.375 --> 00:01:08.670
纯粹的基于模型法有时候很方便

00:01:08.670 --> 00:01:13.320
前提是我们有一批可能的行为

00:01:13.319 --> 00:01:18.059
并且为每种行为建立了运动数学模型

00:01:18.060 --> 00:01:24.040
模型建立时 已经将目标车辆的物理限制、道路交规以及其他限制考虑在内

00:01:24.040 --> 00:01:26.290
数据驱动法又如何呢

00:01:26.290 --> 00:01:29.340
通过使用纯粹的数据驱动法

00:01:29.340 --> 00:01:35.454
我们就有了一个真正的黑盒算法 该算法会通过大量训练数据来训练

00:01:35.454 --> 00:01:37.709
一旦训练完毕

00:01:37.709 --> 00:01:42.604
我们会把观察到的行为输入其中 让算法来生成接下来如何行动的预测

00:01:42.605 --> 00:01:46.245
所以我们可以看出 每种方法各有所长

00:01:46.245 --> 00:01:49.320
基于模型方法吸收了我们有关物理限制的知识

00:01:49.319 --> 00:01:54.839
这些知识来自于道路交通情况等等

00:01:54.840 --> 00:01:59.460
同时 数据驱动法也很不错 因为它们使我们使用数据

00:01:59.459 --> 00:02:05.459
来抽取潜在模式 这是基于模型法所缺少的

00:02:05.459 --> 00:02:07.379
例如

00:02:07.379 --> 00:02:11.389
每天不同时段在一个交叉路口的汽车的不同行为

00:02:11.389 --> 00:02:14.939
这就引发了一个可以说很重要的问题

00:02:14.939 --> 00:02:17.000
那就是 哪种方法是最好的？

