WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.629
在纯粹的数据驱动法做预测过程中

00:00:03.629 --> 00:00:07.299
有多种方式使用机器学习算法

00:00:07.299 --> 00:00:10.434
因为大家已经上过机器学习课

00:00:10.435 --> 00:00:13.915
所以这里我不再详细讲述

00:00:13.914 --> 00:00:15.629
但是 在本视频中

00:00:15.630 --> 00:00:19.530
我将向大家展示一个例子 这个例子表现出

00:00:19.530 --> 00:00:23.910
这些算法擅长的方面 - 轨迹聚合

00:00:23.910 --> 00:00:27.968
通常 使用纯数据驱动法的过程

00:00:27.968 --> 00:00:29.835
会划分为两个阶段

00:00:29.835 --> 00:00:34.530
第一个阶段是离线训练阶段 在此阶段中 算法从数据中学习模式

00:00:34.530 --> 00:00:40.075
第二个阶段是在线预测阶段 在此阶段中 算法使用模型来生成预测

00:00:40.075 --> 00:00:42.865
我们首先来讨论离线阶段

00:00:42.865 --> 00:00:45.810
第一步是获取大量数据

00:00:45.810 --> 00:00:49.385
这可以通过在交叉路口放置一个固定摄像头来实现

00:00:49.384 --> 00:00:53.519
然后 我们还得清理数据 因为有些车辆也许会被遮挡住

00:00:53.520 --> 00:00:58.940
还有些车辆在处理过程中也有错误数据产生

00:00:58.939 --> 00:01:01.424
所以我们需要丢弃无效数据

00:01:01.424 --> 00:01:03.924
当数据被收集并且清理干净后

00:01:03.924 --> 00:01:08.799
我们就会得到很多轨迹 看起来是这样的

00:01:08.799 --> 00:01:11.759
接下来 我们需要定义一些数学上的轨迹相似性测量

00:01:11.760 --> 00:01:17.070
有很多种方式来定义

00:01:17.069 --> 00:01:21.119
但是我们想要一种更加直观的方式

00:01:21.120 --> 00:01:25.880
来告诉我们 红色轨迹和粉色的更相似 和蓝色不太相似

00:01:25.879 --> 00:01:28.875
尽管在一段时间里 红色和蓝色靠得很近且有重叠

00:01:28.875 --> 00:01:32.909
但是 红色和粉色仍然具有更大相似性

00:01:32.909 --> 00:01:35.024
如果你想要学习更多相关知识

00:01:35.025 --> 00:01:40.305
我会给大家一篇论文的链接 该论文详细论述了相似性测量

00:01:40.305 --> 00:01:45.735
但是 一旦我们有了相似度测量 我们就能够使用一个机器学习算法

00:01:45.734 --> 00:01:51.510
例如 凝聚聚类或者谱聚类 来聚合这些轨迹

00:01:51.510 --> 00:01:54.090
在一个四方向交叉路口

00:01:54.090 --> 00:01:57.630
我们将期望看到12个聚合 因为在4个停车指示中的每一处

00:01:57.629 --> 00:02:02.339
车辆可以做3种动作之一

00:02:02.340 --> 00:02:04.500
右转、直行、左转

00:02:04.500 --> 00:02:09.000
所以 如果我们观察4个停车指示之一

00:02:09.000 --> 00:02:13.245
我们期望看到一个轨迹聚合

00:02:13.245 --> 00:02:16.069
包含左转、直行、右转的轨迹

00:02:16.069 --> 00:02:21.424
注意 在一些情况下 你也许会得到更多的聚合

00:02:21.425 --> 00:02:25.814
例如 如果这条车道由交通信号灯控制 而不是停车标志来控制

00:02:25.814 --> 00:02:30.659
聚合算法可能会创建之前两倍的轨迹聚合数

00:02:30.659 --> 00:02:33.329
其中三条不停车通过路口

00:02:33.330 --> 00:02:37.680
另外三条会先在信号灯前方停车 然后再通过

00:02:37.680 --> 00:02:40.770
一旦轨迹被分组到聚合中

00:02:40.770 --> 00:02:45.585
对每一个聚合定义那些原型轨迹将很有用

00:02:45.585 --> 00:02:47.322
对于左转的聚合

00:02:47.322 --> 00:02:50.295
也许这三条轨迹将是一个不错的模型

00:02:50.294 --> 00:02:52.829
它们提供了在此路口

00:02:52.830 --> 00:02:56.445
左转车辆的典型运动路径

00:02:56.444 --> 00:03:01.555
目前 我们已经有了一个此路口车辆典型行为的训练模型

00:03:01.555 --> 00:03:06.080
接下来的步骤 就是在道路上使用此模型 并生成实际预测

