WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.250
The big question now is,

00:00:02.250 --> 00:00:07.155
can we write a program that finds the shortest path from start to goal?

00:00:07.155 --> 00:00:09.870
To do so, let's give the grid cell names.

00:00:09.870 --> 00:00:17.160
We have six columns named from 0-5 and five rows from 0-4 and

00:00:17.160 --> 00:00:20.640
the basic idea I'll pursue is that I keep

00:00:20.640 --> 00:00:24.480
the list of nodes that I wish to investigate further,

00:00:24.480 --> 00:00:28.080
or as we call them search expand.

00:00:28.080 --> 00:00:29.955
Let's call this list open.

00:00:29.955 --> 00:00:33.450
So beginning we have one of one state on this list is 0,0,

00:00:33.450 --> 00:00:36.585
my initial state and just to make sure I never pick this state again,

00:00:36.585 --> 00:00:38.030
I don't want any cycles in my path,

00:00:38.030 --> 00:00:42.795
let me just check mark the state with little red check.

00:00:42.795 --> 00:00:46.700
I now can test whether the state is my final goal state.

00:00:46.700 --> 00:00:48.950
Obviously, it's not. I'm not done with planning yet.

00:00:48.950 --> 00:00:51.455
So what I'll do next, I'll expand this state.

00:00:51.455 --> 00:00:54.980
So I'll take it off my open list and look at

00:00:54.980 --> 00:01:00.370
all the successors of which there are two over here, 1,0 and 0,1.

00:01:00.370 --> 00:01:03.375
Those two are now expanded so I check them.

00:01:03.375 --> 00:01:08.390
One last thing I maintain for each of these states on the open list,

00:01:08.390 --> 00:01:10.955
how many expands that it took to get there.

00:01:10.955 --> 00:01:12.610
So there's a zero over here,

00:01:12.610 --> 00:01:15.720
there is a one for these two states in red.

00:01:15.720 --> 00:01:17.775
That's called my g value.

00:01:17.775 --> 00:01:19.385
When I'm done with planning,

00:01:19.385 --> 00:01:21.530
this will be the length of the optimal path.

00:01:21.530 --> 00:01:24.260
Let's now go further and expand one of the two.

00:01:24.260 --> 00:01:27.575
We always expand the one with the smallest g value.

00:01:27.575 --> 00:01:28.715
But these are equivalent.

00:01:28.715 --> 00:01:29.870
They both have a g value of one,

00:01:29.870 --> 00:01:31.070
so it doesn't make a difference.

00:01:31.070 --> 00:01:34.475
So let me expand the first one, is this one over here.

00:01:34.475 --> 00:01:36.650
This one has three neighbors, 0,

00:01:36.650 --> 00:01:39.920
0, 1,1, and 2,0.

00:01:39.920 --> 00:01:43.355
But because 0,0 is already closed with a checkmark,

00:01:43.355 --> 00:01:45.020
we don't consider it anymore,

00:01:45.020 --> 00:01:51.765
which gives me 2,0 and 1,1 both now with a g value of two and we check those over here.

00:01:51.765 --> 00:01:55.880
I now pick the node on the open list with the smallest g value,

00:01:55.880 --> 00:01:57.770
which happens to be this one over here.

00:01:57.770 --> 00:02:01.545
There's really no choice, it's the node over here.

00:02:01.545 --> 00:02:05.660
This has two neighbors, 0,0 and 1,1 but both I've already checked.

00:02:05.660 --> 00:02:08.190
So therefore, there is no expansion that takes place.

00:02:08.190 --> 00:02:10.820
I only expand if I find an unchecked node.

00:02:10.820 --> 00:02:13.190
So when you open these, try these two nodes over here and I

00:02:13.190 --> 00:02:15.815
recurse and what's going to happen is,

00:02:15.815 --> 00:02:18.875
my nodes will expand gradually into the free space

00:02:18.875 --> 00:02:22.505
until I eventually hit the goal node and without proof,

00:02:22.505 --> 00:02:25.970
the g value when I hit the goal node will be

00:02:25.970 --> 00:02:30.760
exactly the number of steps it takes to go from the start state to the goal node.

00:02:30.760 --> 00:02:33.980
The secret here for that to be the case lies in the fact

00:02:33.980 --> 00:02:37.375
that I always expand the node with the smallest g value.

00:02:37.375 --> 00:02:38.560
But we won't worry about this.

00:02:38.560 --> 00:02:40.970
What I want you to do is to implement a piece

00:02:40.970 --> 00:02:44.400
of code that implements what I just described.

