WEBVTT
Kind: captions
Language: ru

00:00:00.000 --> 00:00:05.000
Оказывается, текущее имплементирование действительно минимально

00:00:05.000 --> 00:00:08.000
по сравнению с тем, что вы уже сделали.

00:00:08.000 --> 00:00:10.000
С этой модификацией вы реализовали A-star,

00:00:10.000 --> 00:00:14.000
который является одним из самых мощных алгоритмов поиска, которые они используют на сегодняшний день

00:00:14.000 --> 00:00:18.000
для вождения самодвижущихся машин через неструктурированные среды.

00:00:18.000 --> 00:00:22.000
Самое первое, что мы делаем это мы расширяем элементы в списке

00:00:22.000 --> 00:00:25.000
не только содержат g как и раньше, но и f.

00:00:25.000 --> 00:00:27.000
Я также включил h здесь.

00:00:27.000 --> 00:00:31.000
Это не обязательно, но я сделал это в любом случае.

00:00:31.000 --> 00:00:34.000
Так что теперь у нас есть пять трубок, где g определяется как прежде.

00:00:34.000 --> 00:00:39.000
H это эвристическое значение ячейки x y и f является суммой двух.

00:00:39.000 --> 00:00:43.000
Причина, почему я положил f слева является мне нужно это для моего рода фокуса

00:00:43.000 --> 00:00:47.000
так что я могу сортировать по f, когда я буду сортировать список.

00:00:47.000 --> 00:00:51.000
Так что обратите внимание, что стало на два элемента больше,

00:00:51.000 --> 00:00:57.000
и, перемещая f с левой стороны, я реализовал, что я элемент удалю

00:00:57.000 --> 00:01:01.000
будет один с наименьшим значением f, не с наименьшим значением g.

00:01:01.000 --> 00:01:06.000
Как я иду далее вниз и разворачиваю узел, как это произошло в эти линии здесь,

00:01:06.000 --> 00:01:11.000
Теперь необходимо изменить индекс в следующую структуру немного.

00:01:11.000 --> 00:01:16.000
X — теперь элемент номер три, который является технически четвертый элемент в списке

00:01:16.000 --> 00:01:18.000
Когда мы начинаем, индексацию с нуля.

00:01:18.000 --> 00:01:19.000
Y — номер четвертого элемента.

00:01:19.000 --> 00:01:21.000
G является элементом номер один.

00:01:21.000 --> 00:01:27.000
F и h, мне не нужно доставать здесь, потому что я вычислить их с нуля за минуту.

00:01:27.000 --> 00:01:34.000
Я иду дальше вниз, где я узел из списка

00:01:34.000 --> 00:01:39.000
и вычислил все возможные действия, какие последовательные состояние

00:01:39.000 --> 00:01:42.000
и проверить когда эти легальные положения расширять.

00:01:42.000 --> 00:01:48.000
Я сейчас, как и прежде, увеличиваю g с помощью крест функции, но здесь две новые строки кода.

00:01:48.000 --> 00:01:52.000
Сначала я вычислить функцию эвристического для нового развернутого узла.

00:01:52.000 --> 00:01:53.000
Это очень прямо вперед.

00:01:53.000 --> 00:01:54.000
Я называю это h2.

00:01:54.000 --> 00:02:00.000
Тогда следующая строка кода я вычислил новую сумму значений g и h.

00:02:00.000 --> 00:02:06.000
Я использую эти пять вещей: новое значение f, новое значение g, новые h значение,

00:02:06.000 --> 00:02:10.000
и x и y раскрытых узлов для добавления к списку.

00:02:10.000 --> 00:02:14.000
Поэтому новый вот самое главное значение f, но и h значение.

00:02:14.000 --> 00:02:18.000
Это все, что есть чтоб имплементировать A-star.

00:02:18.000 --> 00:02:21.000
Поэтому все, что я сделал это я просто изменил логику, согласно которой

00:02:21.000 --> 00:02:26.000
Удалить узлы из стека, чтобы выбрать тот, который имеет минимальное значение f

00:02:26.000 --> 00:02:30.000
в отличие от g минимальное и у меня есть A-star.

00:02:30.000 --> 00:02:32.000
Поэтому позвольте мне запустить его.

00:02:32.000 --> 00:02:34.000
Это лабиринт, мы смотрели на перед.

00:02:34.000 --> 00:02:38.000
Позвольте мне переместить открытое место вверх здесь и поставить стену обратно здесь.

00:02:38.000 --> 00:02:41.000
В этом случае получается не так эффективен A-star

00:02:41.000 --> 00:02:44.000
и область здесь,она не имеет предпочтения идти другой дорогой.

00:02:44.000 --> 00:02:46.000
Он, наконец, найдет узел.

00:02:46.000 --> 00:02:50.000
Это, однако, меняется, когда я положил большое препятствие горизонтально здесь,

00:02:50.000 --> 00:02:54.000
в этот момент, это действительно интересно посмотреть A-star не может решить

00:02:54.000 --> 00:02:56.000
горизонтальный путь является лучшим или вертикальный путь.

00:02:56.000 --> 00:03:01.000
Так он попеременно достает узлы из тех.

00:03:01.000 --> 00:03:05.000
В этом моменте здесь применяется тот же трюк, как раньше.

00:03:05.000 --> 00:03:07.000
Он не расширяет ничего в центре больше

00:03:07.000 --> 00:03:10.000
и идет прямо к цели и достигает цели здесь.

00:03:10.000 --> 00:03:12.000
Этого не произойдет без A-star.

00:03:12.000 --> 00:03:15.000
В самом деле, способ переделки вернуться к старой поиск

00:03:15.000 --> 00:03:17.000
– дать ему пустые эвристические функции.

00:03:17.000 --> 00:03:24.000
Так вот определение эвристические функции инициализирует h, всегда нуль везде

00:03:24.000 --> 00:03:27.000
вместо эвристической функции здесь, который я не буду использовать для второго

00:03:27.000 --> 00:03:30.000
и просто называют его эвристический старый, и это текущая эвристическая функция.

00:03:30.000 --> 00:03:35.000
Если я запускаю его с эвристической функцией со всеми нулями, я верну мой оригинальный алгоритм поиска.

00:03:35.000 --> 00:03:39.000
Вы можете увидеть, этот поисковой алгоритм исследует в интерьер немного,

00:03:39.000 --> 00:03:42.000
и результат расширяет узлов больше чем A-star.

00:03:42.000 --> 00:03:46.000
Это может выглядеть очень незначительным, но если вы получаете в очень больших средах

00:03:46.000 --> 00:03:50.000
Это может сделать огромную разницу, особенно если есть огромный тупик где-то

00:03:50.000 --> 00:03:51.000
что не может достичь цели.

00:03:51.000 --> 09:59:59.000
Затем A-star выполняет много, гораздо более эффективно, чем простой поиск.

