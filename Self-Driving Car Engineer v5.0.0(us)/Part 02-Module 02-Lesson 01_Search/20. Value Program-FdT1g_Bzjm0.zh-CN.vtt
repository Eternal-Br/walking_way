WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.000
这里是我的实现 它是一种相对比较直接的实现

00:00:04.000 --> 00:00:07.000
这里有一个价值函数 它的大小和我们要处理的世界相等

00:00:07.000 --> 00:00:10.000
初始化值都为99

00:00:10.000 --> 00:00:15.000
这是一个足够大的值 不会等于任何实际值

00:00:15.000 --> 00:00:19.000
现在我对这个价值函数做几次更新 不过我并不知道具体的更新情况

00:00:19.000 --> 00:00:22.000
但是只要改变一些东西 我就更新它

00:00:22.000 --> 00:00:26.000
所以 我引入一个变量 “change” 初始值为 True

00:00:26.000 --> 00:00:30.000
这时候因为值为真 所以我做更新操作 然后我把 change 的值设置为 False

00:00:30.000 --> 00:00:34.000
后面 只有我真正改变了东西后 我才设置 change 为 True

00:00:34.000 --> 00:00:38.000
现在我以固定顺序遍历单元格

00:00:38.000 --> 00:00:42.000
这种操作效率不太高 不过最后任务还是完成了

00:00:42.000 --> 00:00:46.000
首先 我检测当前处理的单元格是不是目标

00:00:46.000 --> 00:00:49.000
下面是我用来检测变化的典型逻辑

00:00:49.000 --> 00:00:53.000
如果当前值被设置为0 我不做任何操作

00:00:53.000 --> 00:00:59.000
如果值大于0 比如为99 那么我把它设置为0 这样我就做了改变

00:00:59.000 --> 00:01:02.000
这种情况下 我会设置 change 的值为 True

00:01:02.000 --> 00:01:07.000
如果该单元格不是我的目标单元格 那么 下面是我完整的更新函数

00:01:07.000 --> 00:01:10.000
这里遍历所有动作

00:01:10.000 --> 00:01:14.000
通过加大 x y 对应的 delta 值

00:01:14.000 --> 00:01:17.000
我为一个动作的执行规划一个可能的下一个状态值

00:01:17.000 --> 00:01:20.000
这样我得到 x2 和 y2

00:01:20.000 --> 00:01:24.000
我接着测试 x2 和 y2 是否是合法的状态

00:01:24.000 --> 00:01:26.000
也就是检测它们是否在网格内

00:01:26.000 --> 00:01:31.000
我检测是否这两个值大于0并且小于网格的尺寸

00:01:31.000 --> 00:01:34.000
另外 因为我们要执行的动作必须作用在可通行单元格上

00:01:34.000 --> 00:01:38.000
因此 我检测坐标单元格是否具有值0

00:01:38.000 --> 00:01:41.000
如果结果为真 我可以传回这个值

00:01:41.000 --> 00:01:46.000
我得到的新值 是这个将要处理的单元格和每一步成本的和

00:01:46.000 --> 00:01:48.000
这里这个值等于1

00:01:48.000 --> 00:01:53.000
现在 如果这个值优于我已经得到的值 也就是说新值较小

00:01:53.000 --> 00:02:01.000
那么 我把这个新值赋予最初的单元格 x y 当然 行进成本已经包含在内

00:02:01.000 --> 00:02:04.000
这样 我就做了更改

00:02:04.000 --> 00:02:08.000
因此 我把 change 设置为 True 然后重复此过程

00:02:08.000 --> 00:02:11.000
到代码结束 只剩下这两行代码

00:02:11.000 --> 00:02:14.000
这里 我用命令来打印出价值函数

00:02:14.000 --> 00:02:17.000
这里我提醒大家一下 上述过程效率并不太高

00:02:17.000 --> 00:02:20.000
原因是 那个值从结束端传到开始端

00:02:20.000 --> 00:02:23.000
是比较慢的

00:02:23.000 --> 00:02:26.000
但是抛开这些 价值函数还是会被正确计算出来

00:02:26.000 --> 00:02:28.000
当然 我们也可以采用几种方法来提升效率

00:02:28.000 --> 00:02:33.000
如果我把通向目标的路径都堵上 大家会看到 结果非常有意思

00:02:33.000 --> 00:02:37.000
绝大部分状态变量的价值函数值将会保持99不变

00:02:37.000 --> 99:59:59.999
这表明 这一片区域没有一条路通向目标

