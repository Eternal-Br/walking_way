WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:04.000
これが DARPA Urban Challenge からの実際の実装です

00:00:04.000 --> 00:00:07.000
スタンフォードトライアルカーは 迷路をぬける方法を見つけます

00:00:07.000 --> 00:00:09.000
見てお分かりのように この迷路は車の動きに従って変化しています

00:00:09.000 --> 00:00:14.000
これは 車が障害を把握するセンサーを使用していることが反映され

00:00:14.000 --> 00:00:16.000
また障害が含まれていることもあります

00:00:16.000 --> 00:00:19.000
車は障害が近くにきて初めて把握できます

00:00:19.000 --> 00:00:22.000
ここで特に注目してもらうことは 車が

00:00:22.000 --> 00:00:24.000
ゴールへの非常に複雑な戦略を計画できることです

00:00:24.000 --> 00:00:27.000
ゆくゆくは ゴールへのオープンパスへのベストな予想がわかります

00:00:27.000 --> 00:00:32.000
オレンジの木は A-star 検索ツリーです

00:00:32.000 --> 00:00:35.000
グリッドツリーとは少し異なります

00:00:35.000 --> 00:00:38.000
私たちの車はグリッドベースのロボットとは異なる動きをします

00:00:38.000 --> 00:00:43.000
それは異なる角度で曲がれ またこれらの小さなステップのそれぞれは 異なる前に進む動きと組み合わせ

00:00:43.000 --> 00:00:46.000
異なる曲がり角度です

00:00:46.000 --> 00:00:49.000
これを横においておくと A-star を使用してゴールまでいくパスを見つける

00:00:49.000 --> 00:00:52.000
これらの素晴らしいツリーを取得できます

00:00:52.000 --> 00:00:55.000
この実装はとても高速で この迷路のどこの場所でも

00:00:55.000 --> 00:01:00.000
 10 秒以内にこれらのパスを計画できます

00:01:00.000 --> 00:01:05.000
それは 私が知っている DARPA Grand Challenge や DARPA Urban Challenge の

00:01:05.000 --> 00:01:07.000
どの運転チームより速かったです

00:01:07.000 --> 00:01:11.000
ロボットが前のプランをキャンセルするたびに プランニングは繰り返されます

00:01:11.000 --> 00:01:14.000
場所と時間での追加調整がわかると思います

00:01:14.000 --> 00:01:18.000
このビデオを見ていく中で ゴールへのパスを見つけることができる シンプルなユークリッド距離のヒューリスティックで

00:01:18.000 --> 00:01:26.000
 A-starがどのようにプランニングを行っているのかがわかります

00:01:26.000 --> 00:01:29.000
これを自分で実装すると 大きな違い

00:01:29.000 --> 00:01:32.000
またはグリッド実装は異なるモーションモデルです

00:01:32.000 --> 00:01:35.000
曲がることができるロボットを実装しなければなりません

00:01:35.000 --> 00:01:38.000
また 曲がったり直進したりできる数式を記述する必要があります

00:01:38.000 --> 00:01:42.000
このロボットは やり直しすることもできます バックすることは全く異なるアクションです

00:01:42.000 --> 00:01:46.000
それ以外は 基本的に今実装した A-star のアルゴリズムと同じです

00:01:46.000 --> 00:01:49.000
自動運転車を構築する場合は ゴールへのパスを見つけるために 非常に複雑でしっかりとした検索アルゴリズム

00:01:49.000 --> 00:01:54.000
を作成するということが理解できました

00:01:54.000 --> 00:02:02.000
これが DARPA が道路すべてにわたるバリアを使って 我々の車を閉じ込めたシーンです

00:02:02.000 --> 00:02:08.000
車がこれをナビゲートする唯一の方法は 何回も細かく U ターンすることでした

00:02:08.000 --> 00:02:13.000
それは A-star プランニングを使用してそれ自身でこれをすべてプランしなければなりませんでした

00:02:13.000 --> 00:02:18.000
車がバリアを抜けると 行くパスがないことに気づきます

00:02:18.000 --> 00:02:23.000
そして その A-star プランナーを起動して迂回することを考え付きます

00:02:23.000 --> 00:02:27.000
それは あまりきれいではありませんが 非常に効果的です

00:02:27.000 --> 00:02:32.000
車は自分自身でこの競争を制し A-starを使ってぐるっと回って

00:02:32.000 --> 00:02:35.000
それを行う最適なプランを見つけ移動しました

00:02:35.000 --> 00:02:39.000
そうでないと この障害の後ろで永遠に動けなくなるところです

00:02:39.000 --> 00:02:44.000
この最後のビデオでは 2 台の車の間にあるスペースにバックして

00:02:44.000 --> 00:02:49.000
駐車しなければならない状況について説明します また 障害がどのように見えるか

00:02:49.000 --> 00:02:55.000
これらの 2 台の車がどのように見えるのか 自動車 Jr が実際の駐車場でどのように動くかも説明します

00:02:55.000 --> 00:02:57.000
もう一度言いますが これは A-star を使用しています

00:02:57.000 --> 00:03:00.000
それ自身で前に進んだりバックしたりして

00:03:00.000 --> 00:03:02.000
この駐車スペースに最適に駐車する方法を見つけます

00:03:02.000 --> 00:03:06.000
これらの A-star のそれぞれのプランニング時間は 10 秒以内です

00:03:06.000 --> 00:03:09.000
車は有能にこれを行いました

00:03:09.000 --> 00:03:12.000
障害があったところや駐車スペースがあったところ

00:03:12.000 --> 00:03:13.000
のヒントがなくても やり遂げました

00:03:13.000 --> 00:03:19.000
それが ロボットパスプランニングの A-star です 自分で実装したものはその核となることです

00:03:19.000 --> 00:03:24.000
もう一度言いますが それを実際のロボットモーションアルゴリズムにするには

00:03:24.000 --> 00:03:27.000
モーションモデルを変更しなければなりません

00:03:27.000 --> 00:03:30.000
私が教える次のクラスで受講してください

00:03:30.000 --> 99:59:59.999
継続モデルのことを説明するときに これを継続パスに変える方法をお見せします

