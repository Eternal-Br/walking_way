WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:04.000
これがDARPAアーバン・チャレンジにおける
実際の実装例です

00:00:04.000 --> 00:00:07.000
スタンフォード大学の試作車が
迷路を抜ける道を探しています

00:00:07.000 --> 00:00:09.000
自動車が移動するにつれて迷路が変化しています

00:00:09.000 --> 00:00:16.000
これは障害物の検出にセンサを使用し
障害物が繰り返し出現する事実を反映しています

00:00:16.000 --> 00:00:19.000
自動車は障害物が
近くにあるときにのみ検出できます

00:00:19.000 --> 00:00:24.000
注目すべきは自動車がゴールまでの
非常に複雑で巧妙な行動を計画できることです

00:00:24.000 --> 00:00:27.000
最適な推測が行われているのが分かります

00:00:27.000 --> 00:00:32.000
オレンジ色の木がA＊の探索木です

00:00:32.000 --> 00:00:35.000
正確にはグリッドの木ではありません

00:00:35.000 --> 00:00:38.000
グリッドベースのロボットとは異なる動作をします

00:00:38.000 --> 00:00:42.000
あらゆる角度に向きを変えることができ
小さな各ステップは

00:00:42.000 --> 00:00:46.000
異なる回転角と前進運動が組み合わさっています

00:00:46.000 --> 00:00:49.000
またA＊を使用して
ゴールまでの経路を見つける

00:00:49.000 --> 00:00:52.000
すばらしい木が得られます

00:00:52.000 --> 00:00:55.000
この実装例は非常に処理速度が速いので

00:00:55.000 --> 00:01:00.000
迷路内のどの場所でも
10ミリ秒以内に経路を計画できます

00:01:00.000 --> 00:01:05.000
これはDARPAグランド・チャレンジまたは
アーバン・チャレンジにおいて

00:01:05.000 --> 00:01:07.000
他のどのチームよりも速いものでした

00:01:07.000 --> 00:01:11.000
計画はロボットが直前の計画を
取り消すたびに繰り返されます

00:01:11.000 --> 00:01:14.000
時と場所に応じて追加調整が
行われていることが分かります

00:01:14.000 --> 00:01:18.000
単純なユークリッド距離
ヒューリスティック関数を持つ

00:01:18.000 --> 00:01:23.000
A＊計画がどのように
ゴールまでの経路を見つけるか

00:01:23.000 --> 00:01:26.000
この映像から理解できると思います

00:01:26.000 --> 00:01:32.000
皆さんが実装される場合 私たちのグリッド実装と
大きく異なるのは動作モデルです

00:01:32.000 --> 00:01:35.000
皆さんは向きを変えられるロボットを実装し

00:01:35.000 --> 00:01:38.000
そのための計算を記述しなければなりません

00:01:38.000 --> 00:01:42.000
このロボットは後退可能で
これは明らかに異なる動作です

00:01:42.000 --> 00:01:46.000
それ以外は皆さんが実装したのと
基本的に同じA＊アルゴリズムです

00:01:46.000 --> 00:01:49.000
自動運転車を作る場合にはゴールまでの

00:01:49.000 --> 00:01:54.000
極めて複雑で優れた探索アルゴリズムが
必要なのです

00:01:54.000 --> 00:01:58.000
これはDARPAで
トラップとして道路の横幅いっぱいに

00:01:58.000 --> 00:02:02.000
障害物が設置されている状況を表しています

00:02:02.000 --> 00:02:08.000
車をナビゲートする唯一の方法は
マルチポールUターン方式を取ることです

00:02:08.000 --> 00:02:13.000
この動作にはA＊計画を
使用しなければなりませんでした

00:02:13.000 --> 00:02:18.000
車は障害物に近づくと
進むべき経路がないことを認識し

00:02:18.000 --> 00:02:23.000
A＊プランナを起動して
方向転換の操作を導き出します

00:02:23.000 --> 00:02:27.000
あまり優雅ではありませんが極めて有効な動作です

00:02:27.000 --> 00:02:32.000
この競技において私たちの車は
A＊を使用して自身で方向転換をし

00:02:32.000 --> 00:02:35.000
最適な計画を見つけ先に進むことができました

00:02:35.000 --> 00:02:39.000
そうでなければ車は障害物の手前で
永久に足止めされていたでしょう

00:02:40.000 --> 00:02:42.000
最後の動画は駐車時の映像です

00:02:42.000 --> 00:02:49.000
他の2台の車に挟まれた駐車スペースに
バックで入らなければなりません

00:02:49.000 --> 00:02:55.000
障害物や他の車がどのように見えてジュニアが
いかにして駐車場に入るかが分かります

00:02:55.000 --> 00:02:57.000
この場合もA＊が使用されています

00:02:57.000 --> 00:03:00.000
この駐車スペースへの最適な経路を見つけて
バックで入り

00:03:00.000 --> 00:03:02.000
戻ってくる動作もすべて自身で行っています

00:03:02.000 --> 00:03:06.000
これらのA＊実行ごとの
計画時間は10ミリ秒以下です

00:03:06.000 --> 00:03:10.000
さらに障害物や駐車スペースの位置の
手掛かりがない場合でも

00:03:10.000 --> 00:03:13.000
完全にこの動作を行うことができました

00:03:13.000 --> 00:03:19.000
これがロボット経路計画のためのA＊です
皆さんが実装したのはその中核を成します

00:03:19.000 --> 00:03:24.000
それを実際のロボットの
動作アルゴリズムに利用する場合は

00:03:24.000 --> 00:03:27.000
動作モデルを変更しなければなりません

00:03:27.000 --> 00:03:30.000
その点については次回の講義で確認してください

00:03:30.000 --> 00:03:34.000
連続モデルについて説明し
これを連続経路に転換する方法を紹介します

