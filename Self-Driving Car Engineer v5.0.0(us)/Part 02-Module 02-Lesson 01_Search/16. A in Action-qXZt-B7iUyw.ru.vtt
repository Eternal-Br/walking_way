WEBVTT
Kind: captions
Language: ru

00:00:00.000 --> 00:00:04.000
Здесь фактическое осуществление от DARPA Urban Challenge.

00:00:04.000 --> 00:00:07.000
Стэнфордский пробный автомобиль пытается найти путь через лабиринт.

00:00:07.000 --> 00:00:09.000
Как вы можете видеть лабиринт меняется так же как автомобиль движется.

00:00:09.000 --> 00:00:14.000
Это отражает тот факт, что автомобиль использует датчики, чтобы увидеть препятствия,

00:00:14.000 --> 00:00:16.000
и иногда включаются в препятствия.

00:00:16.000 --> 00:00:19.000
Автомобиль может только увидеть их, когда они находятся поблизости.

00:00:19.000 --> 00:00:22.000
Что действительно примечательно здесь, что автомобиль способен

00:00:22.000 --> 00:00:24.000
планировать действительно сложные маневры к цели.

00:00:24.000 --> 00:00:27.000
В любой момент времени мы можем увидеть свое наилучшее предположение к открытым путям цели.

00:00:27.000 --> 00:00:32.000
Апельсиновых деревья являются деревом поиска A-star.

00:00:32.000 --> 00:00:35.000
Они не именно сетки деревьев.

00:00:35.000 --> 00:00:38.000
Наш автомобиль движется по-разному от робота на основе сетки.

00:00:38.000 --> 00:00:43.000
Он может повернуть под разными углами, и каждый из этих маленьких шагов является угол разных поворотов

00:00:43.000 --> 00:00:46.000
в сочетании с другим передним движением.

00:00:46.000 --> 00:00:49.000
Покинув эту сторону вы получаете эти удивительные деревья

00:00:49.000 --> 00:00:52.000
которые находят пути к цели, с помощью A-star.

00:00:52.000 --> 00:00:55.000
Эта имплиментация настолько быстрая, что он может планировать эти пути

00:00:55.000 --> 00:01:00.000
в менее чем 10 мс для любого местоположения в этом лабиринте.

00:01:00.000 --> 00:01:05.000
Он был быстрее, чем любая другая команда вождения, что я знаю на DARPA Grand Challenge

00:01:05.000 --> 00:01:07.000
или DARPA Urban Challenge.

00:01:07.000 --> 00:01:11.000
Планирование повторяется каждый раз, когда робот отменяет предыдущий план.

00:01:11.000 --> 00:01:14.000
Вы можете увидеть дополнительные корректировки в месте, время от времени.

00:01:14.000 --> 00:01:18.000
Если вы пройдете через это видео вы можете увидеть как A-star планированирует

00:01:18.000 --> 00:01:26.000
с простым евклидовым расстоянием эвристическая функция имеет возможность найти путь к цели.

00:01:26.000 --> 00:01:29.000
Когда это самостоятельно реализовывать большая разница

00:01:29.000 --> 00:01:32.000
или реализация сетка, является различным движением модели.

00:01:32.000 --> 00:01:35.000
Вам необходимо реализовать робота, который может повернуть

00:01:35.000 --> 00:01:38.000
и вы должны написать на математике из того, что она способна повернуть и идти вперед.

00:01:38.000 --> 00:01:42.000
Этот робот также может быть переработан, так что идя назад происходят различных действий.

00:01:42.000 --> 00:01:46.000
Помимо этого это по сути тот же алгоритм A-star, которую вы только что реализовали.

00:01:46.000 --> 00:01:49.000
Так что если вы хотите построить самодвижущийся автомобиль теперь вы понимаете

00:01:49.000 --> 00:01:54.000
чтобы сделать сложный, хороший алгоритм поиска чтоб найти путь к цели.

00:01:54.000 --> 00:02:02.000
Так что это сцена, где DARPA улавливает наш автомобиль с помощью барьера, который пошел все через улицу.

00:02:02.000 --> 00:02:08.000
Поэтому единственным способом для автомобиля для навигации это было взять много поляризованных u-turn,

00:02:08.000 --> 00:02:13.000
и ему пришлось планировать это саму по себе с помощью A-star планирования.

00:02:13.000 --> 00:02:18.000
Автомобиль идет до барьера, понимает что нет пути идти,

00:02:18.000 --> 00:02:23.000
и вызывает его A-star планировщик и приходит с маневром поворота вокруг,

00:02:23.000 --> 00:02:27.000
Это не особенно элегантно, но это супер эффективно.

00:02:27.000 --> 00:02:32.000
Автомобиль был в состоянии в этой конкуренции сам по себе повернуть вокруг с помощью A-star,

00:02:32.000 --> 00:02:35.000
найти оптимальный план, чтобы сделать это и двигаться дальше.

00:02:35.000 --> 00:02:39.000
В противном случае он бы застрял навсегда после этого препятствия.

00:02:39.000 --> 00:02:44.000
В этом заключительном видео я покажу вам парковочную ситуацию, когда автомобиль должен вернуться в

00:02:44.000 --> 00:02:49.000
парковочное место между двумя другими автомобилями и вы можете увидеть, как видны препятствия,

00:02:49.000 --> 00:02:55.000
как эти автомобили являются видимыми, и как наш автомобиль, Jr, переходит фактической охраняемая автостоянка.

00:02:55.000 --> 00:02:57.000
Опять же это использование A-star.

00:02:57.000 --> 00:03:00.000
Он находит свой путь оптимально в это место для парковки, спиной

00:03:00.000 --> 00:03:02.000
и спиной снова все сам по себе.

00:03:02.000 --> 00:03:06.000
Планирования времени для каждого из этих A-star трасс составляет менее 10 мс,

00:03:06.000 --> 00:03:09.000
и автомобиль смог грамотно сделать это.

00:03:09.000 --> 00:03:12.000
Даже во время наступления он не имел малейшего представления где были препятствия

00:03:12.000 --> 00:03:13.000
и где было пятно стоянки автомобилей.

00:03:13.000 --> 00:03:19.000
A-star для робота путь планирования, и то, что вы реализовали сами является основой его.

00:03:19.000 --> 00:03:24.000
Опять же если вы хотите, чтобы превратить его в реальный алгоритм для движущего робота

00:03:24.000 --> 00:03:27.000
Вы должны изменить модель движения.

00:03:27.000 --> 00:03:30.000
Вы должны увидеть следующий класс, которые я преподаю, когда я иду в

00:03:30.000 --> 09:59:59.000
непрерывной модели и я собираюсь показать вам, как превратить это в непрерывный путь.

