WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.000
现在 我要教大家一种规划的替代方法

00:00:04.000 --> 00:00:09.000
这种替代方法有一些优点 也有一些缺点

00:00:09.000 --> 00:00:11.000
这种方法被称为 动态规划

00:00:11.000 --> 00:00:14.000
和 A-star 类似 这种方法也是帮助我们来寻找最短路径的

00:00:14.000 --> 00:00:20.000
我们为它提供一张环境地图 就像对 A-star 做的那样 再提供一个或多个目标位置

00:00:20.000 --> 00:00:22.000
这里我们假定只有一个目标位置

00:00:22.000 --> 00:00:26.000
然后该方法将输出到达目标的最佳路径 起点可以位于任何地方

00:00:26.000 --> 00:00:30.000
这种规划技术不限于单个起点 它可应用于任意起点位置

00:00:30.000 --> 00:00:35.000
那么 为什么我们要关注这种方法？

00:00:35.000 --> 00:00:37.000
我来给大家举个例子

00:00:37.000 --> 00:00:43.000
假设你是一辆谷歌无人驾驶车 在这张图上行驶

00:00:43.000 --> 00:00:47.000
你现在在这条小街上 收到右转指令

00:00:47.000 --> 00:00:50.000
但是 你的目的地在这里

00:00:50.000 --> 00:00:57.000
和以前一样 这里有两条不同的车道 一条左转道 一条直行道

00:00:57.000 --> 00:01:00.000
假如你转到直行道上 那么 要达到目的地

00:01:00.000 --> 00:01:04.000
唯一的方法是绕过这个街区 然后沿这个方向前行

00:01:04.000 --> 00:01:06.000
这个例子大家以前已经见过了

00:01:06.000 --> 00:01:09.000
现在 我想指出一种与之前不同的情况

00:01:09.000 --> 00:01:15.000
那就是 你在这里试图做变道操作很可能会失败 为什么？

00:01:15.000 --> 00:01:21.000
因为 在这条车道上可能有一辆很长的大卡车

00:01:21.000 --> 00:01:26.000
当你进入右边车道 你必须停下来等卡车过去

00:01:26.000 --> 00:01:31.000
这样的话 你后面的很多车辆就会鸣笛催促你了

00:01:31.000 --> 00:01:34.000
你当然不希望这样

00:01:34.000 --> 00:01:37.000
这种情况意味着你处于一种随机环境中

00:01:37.000 --> 00:01:40.000
动作的结果并非完全确定的

00:01:40.000 --> 00:01:43.000
在我们之前的规划中 我们忽略了这种情况 不过在现实中这种情况确实存在

00:01:43.000 --> 00:01:50.000
现实中  你很可能发现自己不得不行驶到这里 然后怀疑这到底是怎么回事儿

00:01:50.000 --> 00:01:54.000
嗯 这种情况之所以发生 因为环境是随机的

00:01:54.000 --> 00:01:57.000
这辆大卡车阻止你进入左转车道

00:01:57.000 --> 00:02:02.000
这意味着你需要多个规划 一个规划通向最有可能的位置

00:02:02.000 --> 00:02:05.000
另外的规划指向别的位置

00:02:05.000 --> 00:02:10.000
而动态规划给出的 便是针对每个位置的计划

00:02:10.000 --> 00:02:19.000
我们重画一张网格环境图 目标在这里 这里有一些障碍物 

00:02:19.000 --> 00:02:26.000
然后动态规划会给出每个单元格对应的优化动作

00:02:26.000 --> 00:02:29.000
大家可以看到 每个单元格用一个标记来标注

00:02:29.000 --> 00:02:32.000
这种标记通常被称为策略

00:02:32.000 --> 00:02:39.000
策略是一个函数 该函数把单元格映射到动作上

00:02:39.000 --> 00:02:44.000
在这里 动作包括向左 向下 向右 然后向上

00:02:44.000 --> 00:02:51.000
现在 我们要使用动态规划计算出策略来

00:02:51.000 --> 00:02:55.000
也就是说 给定一个这样的网格 以及一个目标状态

00:02:55.000 --> 00:03:00.000
大家编写代码 为每一个网格输出

00:03:00.000 --> 00:03:05.000
到达目标的最佳方案

00:03:05.000 --> 00:03:07.000
这里需要的算法不同于 A-star

00:03:07.000 --> 00:03:10.000
这是一个计算量密集的算法

00:03:10.000 --> 99:59:59.999
正如我刚才讲的 这种算法叫做机器人路径规划的动态规划法

