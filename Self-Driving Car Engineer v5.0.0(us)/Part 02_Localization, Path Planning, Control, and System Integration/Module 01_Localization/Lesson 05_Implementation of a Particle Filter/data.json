{
  "data": {
    "lesson": {
      "id": 627669,
      "key": "e3981fd5-8266-43be-a497-a862af9187d4",
      "title": "Implementation of a Particle Filter",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Now that you know the theory, learn how to code a particle filter!",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/e3981fd5-8266-43be-a497-a862af9187d4/627669/1538943919543/Implementation+of+a+Particle+Filter+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/e3981fd5-8266-43be-a497-a862af9187d4/627669/1538943915838/Implementation+of+a+Particle+Filter+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 663304,
          "key": "845ea770-28c3-4e7c-9e58-e35a29dc3adb",
          "title": "Particle Filters in C++",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "845ea770-28c3-4e7c-9e58-e35a29dc3adb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 663307,
              "key": "49757b08-80bd-4e93-a69c-acfc5a45b335",
              "title": "05 Localization A04 Particle Filters In C++",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "zL6dEu1jrH8",
                "china_cdn_id": "zL6dEu1jrH8.mp4"
              }
            }
          ]
        },
        {
          "id": 279194,
          "key": "7fa9a4e6-5bbe-4d0f-a03c-bd29db8d164a",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7fa9a4e6-5bbe-4d0f-a03c-bd29db8d164a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 286282,
              "key": "a502ff34-b91c-4e23-8239-06df6326605a",
              "title": "Lesson Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_VjhAIChVcI",
                "china_cdn_id": "_VjhAIChVcI.mp4"
              }
            }
          ]
        },
        {
          "id": 279195,
          "key": "aeeb6438-ace6-42dc-b26c-629d8d3df9c3",
          "title": "Pseudocode",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "aeeb6438-ace6-42dc-b26c-629d8d3df9c3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 286283,
              "key": "8a7e9867-6bb0-422f-a262-6c797d705473",
              "title": "Pseudocode",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "JNm1fnWj5To",
                "china_cdn_id": "JNm1fnWj5To.mp4"
              }
            },
            {
              "id": 356861,
              "key": "bd1d9af8-0eac-46c7-aec1-3b07df8db760",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Process and Implementation\n\nAs an accompaniment to the videos we will follow the particle filter algorithm process and\nimplementation details.",
              "instructor_notes": ""
            },
            {
              "id": 356871,
              "key": "89018187-b2b4-4f75-b296-8803aba4d7da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Particle Filter Algorithm Steps and Inputs\n\nThe flowchart below represents the steps of the particle filter algorithm as well as its inputs.",
              "instructor_notes": ""
            },
            {
              "id": 356867,
              "key": "c27ab42e-73d7-45ab-bbbb-6bfa9148783e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5989f54e_02-l-pseudocode.00-00-47-13.still006/02-l-pseudocode.00-00-47-13.still006.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c27ab42e-73d7-45ab-bbbb-6bfa9148783e",
              "caption": "Particle Filter Algorithm Flowchart",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 356876,
              "key": "169f3c79-72c7-4de1-aa66-2c8169e0cd98",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Psuedo Code\nThis is an outline of steps you will need to take with your code in order to implement\na particle filter for localizing an autonomous vehicle.  The pseudo code steps correspond to the steps in the algorithm flow chart, initialization, prediction, particle weight updates, and resampling.  Python implementation of these steps was covered in the previous lesson.",
              "instructor_notes": ""
            },
            {
              "id": 356878,
              "key": "6a7d9b3e-640a-4dba-947e-65e828450009",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5989f6fb_02-l-pseudocode.00-00-14-28.still001/02-l-pseudocode.00-00-14-28.still001.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6a7d9b3e-640a-4dba-947e-65e828450009",
              "caption": "Initialization",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 356892,
              "key": "2acef4e3-77fa-45f8-bb56-ba8b3bf1b239",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "At the initialization step we estimate our position from GPS input.  The subsequent steps in the process will refine this estimate to localize our vehicle.",
              "instructor_notes": ""
            },
            {
              "id": 356879,
              "key": "7aea204b-0c2b-44fa-b6b9-f8eabd1c7f80",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5989f70c_02-l-pseudocode.00-00-16-01.still002/02-l-pseudocode.00-00-16-01.still002.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7aea204b-0c2b-44fa-b6b9-f8eabd1c7f80",
              "caption": "Prediction",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 356888,
              "key": "bb45f408-c060-4dc5-a6f3-d3015c7b1edb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "During the prediction step we add the control input (yaw rate & velocity) for all particles",
              "instructor_notes": ""
            },
            {
              "id": 356880,
              "key": "53bc8d60-4737-42d7-ab76-cea37425805d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5989f719_02-l-pseudocode.00-00-30-05.still003/02-l-pseudocode.00-00-30-05.still003.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/53bc8d60-4737-42d7-ab76-cea37425805d",
              "caption": "Update",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 356907,
              "key": "ea113c2a-a42c-4156-bb0d-3adadc7dd2b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "During the update step, we update our particle weights using map landmark positions and feature measurements.",
              "instructor_notes": ""
            },
            {
              "id": 356881,
              "key": "d0d0c632-3026-4a02-b999-447b2cea107e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5989f726_02-l-pseudocode.00-00-35-08.still004/02-l-pseudocode.00-00-35-08.still004.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d0d0c632-3026-4a02-b999-447b2cea107e",
              "caption": "Resampling",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 356952,
              "key": "47edd005-10a3-4dbc-bbb5-f05562cd595d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "During resampling we will resample M times (M is range of 0 to length_of_particleArray) drawing a particle i (i is the particle index) proportional to its weight .  Sebastian covered one implementation of this in his [discussion and implementation of a resampling wheel](https://classroom.udacity.com/nanodegrees/nd013/parts/40f38239-66b6-46ec-ae68-03afd8a601c8/modules/2c318113-724b-4f9f-860c-cb334e6e4ad7/lessons/4d7950f7-f519-4dc6-9142-052a1261f5bf/concepts/487480820923).\n",
              "instructor_notes": ""
            },
            {
              "id": 356882,
              "key": "4219d8b8-1cb9-4604-9314-7d94d243e747",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5989f736_02-l-pseudocode.00-00-40-01.still005/02-l-pseudocode.00-00-40-01.still005.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4219d8b8-1cb9-4604-9314-7d94d243e747",
              "caption": "Return New Particle Set",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 356911,
              "key": "6bd0ca0b-667e-4f2b-83f2-458baa6ceaf3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The new set of particles represents the Bayes filter posterior probability.  We now have a refined estimate of the vehicles position based on input evidence. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 279196,
          "key": "b97bd80c-70ec-4bcc-8fca-77db3c17c7b1",
          "title": "Initialization",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b97bd80c-70ec-4bcc-8fca-77db3c17c7b1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 287317,
              "key": "4cc87c1a-494e-4c75-b340-1c8ade61b6c9",
              "title": "Initialization",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "agPdu0c5_GM",
                "china_cdn_id": "agPdu0c5_GM.mp4"
              }
            },
            {
              "id": 356966,
              "key": "21cef225-7914-4ca6-b9ac-f559a5896a58",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598a0660_03-l-initialization.00-01-53-01.still001/03-l-initialization.00-01-53-01.still001.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/21cef225-7914-4ca6-b9ac-f559a5896a58",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 356977,
              "key": "8c71647a-8d62-45b7-9ee4-e4f1e4a2baa4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The most practical way to initialize our particles and generate real time output, is to make an initial estimate using GPS input.  As with all sensor based operations, this step is impacted by noise.\n\n## Project Implementation\n- Particles shall be implemented by sampling a Gaussian distribution, taking into account Gaussian sensor noise around the initial GPS position and heading estimates.\n- Use the [C++ standard library normal distribution](http://en.cppreference.com/w/cpp/numeric/random/normal_distribution) and [C++ standard library random engine](http://www.cplusplus.com/reference/random/default_random_engine) functions to sample positions around GPS measurements.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 279197,
          "key": "53081ef1-a14c-4ae9-a68f-3ddc258cfd95",
          "title": "Program Gaussian Sampling: Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "53081ef1-a14c-4ae9-a68f-3ddc258cfd95",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 287626,
              "key": "2443acca-ba69-4a28-9d62-4c570b8f823c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Coding Instructions\n\nI have provided you with a function that takes a GPS position and initial heading as input. I want you to print out to the terminal 3 samples from a normal distribution with mean equal to the GPS position and initial heading measurements and standard deviation of 2 m for the x and y position and 0.05 radians for the heading of the car.\n\nFill out the \"TODO\" sections in the code.",
              "instructor_notes": ""
            },
            {
              "id": 287627,
              "key": "97751a82-970d-49c2-bcb3-65f5f49a7f85",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "97751a82-970d-49c2-bcb3-65f5f49a7f85",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4647274039869440",
                "initial_code_files": [
                  {
                    "text": "/**\n * print_samples.cpp\n * \n * Print out to the terminal 3 samples from a normal distribution with\n * mean equal to the GPS position and IMU heading measurements and\n * standard deviation of 2 m for the x and y position and 0.05 radians\n * for the heading of the car. \n *\n * Author: Tiffany Huang\n */\n\n#include <iostream>\n#include <random> // Need this for sampling from distributions\n\nusing std::normal_distribution;\n\n/**\n * Prints samples of x, y and theta from a normal distribution\n * @param gps_x   GPS provided x position\n * @param gps_y   GPS provided y position\n * @param theta   GPS provided yaw\n */\nvoid printSamples(double gps_x, double gps_y, double theta);\n\n\nint main() {\n  \n  // Set GPS provided state of the car.\n  double gps_x = 4983;\n  double gps_y = 5029;\n  double theta = 1.201;\n  \n  // Sample from the GPS provided position.\n  printSamples(gps_x, gps_y, theta);\n  \n  return 0;\n}\n\n\nvoid printSamples(double gps_x, double gps_y, double theta) {\n  std::default_random_engine gen;\n  double std_x, std_y, std_theta;  // Standard deviations for x, y, and theta\n\n  // TODO: Set standard deviations for x, y, and theta\n\n\n  // This line creates a normal (Gaussian) distribution for x\n  normal_distribution<double> dist_x(gps_x, std_x);\n  \n  // TODO: Create normal distributions for y and theta\n\n\n  for (int i = 0; i < 3; ++i) {\n    double sample_x, sample_y, sample_theta;\n    \n    // TODO: Sample from these normal distributions like this: \n    //   sample_x = dist_x(gen);\n    //   where \"gen\" is the random engine initialized earlier.\n    \n     \n    // Print your samples to the terminal.\n    std::cout << \"Sample \" << i + 1 << \" \" << sample_x << \" \" << sample_y << \" \" \n              << sample_theta << std::endl;\n  }\n\n  return;\n}",
                    "name": "print_samples.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 287628,
          "key": "226a0ca8-f66a-42d5-ac96-e37019fd6f15",
          "title": "Program Gaussian Sampling: Code Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "226a0ca8-f66a-42d5-ac96-e37019fd6f15",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 287629,
              "key": "07bae520-cbb2-416a-b016-8701d5aa0bab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Gaussian Sampling: Code Solution\n\nHere is a solution to the code:",
              "instructor_notes": ""
            },
            {
              "id": 287630,
              "key": "a7a90510-cda3-45cb-ae38-28e7ecdbd2d5",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "a7a90510-cda3-45cb-ae38-28e7ecdbd2d5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5131524757389312",
                "initial_code_files": [
                  {
                    "text": "/**\n * print_samples_sol.cpp\n *\n * SOLUTION CODE\n * \n * Print out to the terminal 3 samples from a normal distribution with\n * mean equal to the GPS position and IMU heading measurements and\n * standard deviation of 2 m for the x and y position and 0.05 radians\n * for the heading of the car. \n *\n * Author: Tiffany Huang\n */\n\n#include <iostream>\n#include <random> // Need this for sampling from distributions\n\nusing std::normal_distribution;\n\n/**\n * Prints samples of x, y and theta from a normal distribution\n * @param gps_x   GPS provided x position\n * @param gps_y   GPS provided y position\n * @param theta   GPS provided yaw\n */\nvoid printSamples(double gps_x, double gps_y, double theta);\n\n\nint main() {\n  \n  // Set GPS provided state of the car.\n  double gps_x = 4983;\n  double gps_y = 5029;\n  double theta = 1.201;\n  \n  // Sample from the GPS provided position.\n  printSamples(gps_x, gps_y, theta);\n  \n  return 0;\n}\n\n\nvoid printSamples(double gps_x, double gps_y, double theta) {\n  std::default_random_engine gen;\n  double std_x, std_y, std_theta;  // Standard deviations for x, y, and theta\n\n  // TODO: Set standard deviations for x, y, and theta\n  std_x = 2;\n  std_y = 2;\n  std_theta = 0.05; \n\n  // This line creates a normal (Gaussian) distribution for x\n  normal_distribution<double> dist_x(gps_x, std_x);\n  \n  // TODO: Create normal distributions for y and theta\n  normal_distribution<double> dist_y(gps_y, std_y);\n  normal_distribution<double> dist_theta(theta, std_theta);\n\n  for (int i = 0; i < 3; ++i) {\n    double sample_x, sample_y, sample_theta;\n    \n    // TODO: Sample from these normal distributions like this: \n    //   sample_x = dist_x(gen);\n    //   where \"gen\" is the random engine initialized earlier.\n    sample_x = dist_x(gen);\n    sample_y = dist_y(gen);\n    sample_theta = dist_theta(gen);   \n     \n    // Print your samples to the terminal.\n    std::cout << \"Sample \" << i + 1 << \" \" << sample_x << \" \" << sample_y << \" \" \n              << sample_theta << std::endl;\n  }\n\n  return;\n}",
                    "name": "print_samples.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 279198,
          "key": "bcadbeed-ba85-4756-8302-7b5a1f16b134",
          "title": "Prediction Step",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bcadbeed-ba85-4756-8302-7b5a1f16b134",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 286284,
              "key": "9e0360a9-3b1f-4c13-a7f8-9e1218d47837",
              "title": "Prediction Step",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kNthLZTHDIM",
                "china_cdn_id": "kNthLZTHDIM.mp4"
              }
            },
            {
              "id": 356990,
              "key": "883b817e-467b-42ad-a025-bd72420563bf",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598a0d55_05-l-predictionstep.00-00-38-28.still001/05-l-predictionstep.00-00-38-28.still001.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/883b817e-467b-42ad-a025-bd72420563bf",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 356991,
              "key": "f4fa7d4d-cfc1-4a01-b424-15804b696022",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that we have initialized our particles it's time to predict the vehicle's position.  Here we will use what we learned in the motion models lesson to predict where the vehicle will be at the next time step, by updating based on yaw rate and velocity, while accounting for Gaussian sensor noise.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 279199,
          "key": "ca98c146-ee0d-4e53-9900-81cec2b771f7",
          "title": "Calculate Prediction Step: Quiz",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ca98c146-ee0d-4e53-9900-81cec2b771f7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 287631,
              "key": "3a3528bf-8683-422d-8a1d-c6ccadb37a4e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Calculate Prediction Step Quiz",
              "instructor_notes": ""
            },
            {
              "id": 287637,
              "key": "58fed290-92d4-4826-9191-35c7c4fa1375",
              "title": "Calculate Prediction Step",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "58fed290-92d4-4826-9191-35c7c4fa1375",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "\nGiven the car’s last position was at (102 m, 65 m) with a heading of (5pi)/8 radians, the car’s velocity was 110 m / s, and the car’s yaw rate was pi/8 rad / s over the last 0.1 seconds, what is the car’s new position and heading?",
                "answers": [
                  {
                    "id": "a1490326359119",
                    "text": "(x, y, theta) = (97.59, 75.08, (51pi)/80)",
                    "is_correct": true
                  },
                  {
                    "id": "a1490326380193",
                    "text": "(x, y, theta) = (101.93, 65.16, (51pi)/80)",
                    "is_correct": false
                  },
                  {
                    "id": "a1490326380888",
                    "text": "(x, y, theta) = (101.84, 65.07, (51pi)/80)",
                    "is_correct": false
                  },
                  {
                    "id": "a1490326381576",
                    "text": "(x, y, theta) = (97.79, 75.16, (49pi)/80)",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 288470,
              "key": "b9adf436-a13a-4a92-af73-605dd8a6a162",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Recall the equations for updating x, y and the yaw angle when the yaw rate is not equal to zero:\n\n<span class=\"mathquill\">x_f = x_0 + \\dfrac{v}{ \\dot{\\theta}}[sin(\\theta_0 + \\dot{\\theta}(dt)) - sin(\\theta_0)]</span>\n\n<span class=\"mathquill\">y_f = y_0 + \\dfrac{v}{ \\dot{\\theta}}[cos(\\theta_0) - cos(\\theta_0 + \\dot{\\theta}(dt))]</span>\n\n<span class=\"mathquill\">\\theta_f = \\theta_0 + \\dot{\\theta}(dt) </span>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 287638,
          "key": "56d08bf5-8668-42e7-a718-1ef40d444259",
          "title": "Calculate Prediction Step Quiz Explanation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "56d08bf5-8668-42e7-a718-1ef40d444259",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 287639,
              "key": "fa87f6cf-d7e9-4ea9-adc4-f0cb895eb04c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Prediction Step Quiz Explanation\n\n##### Equations\nThe equations for updating x, y and the yaw angle when the yaw rate is not equal to zero:\n\n<span class=\"mathquill\">x_f = x_0 + \\dfrac{v}{ \\dot{\\theta}}[sin(\\theta_0 + \\dot{\\theta}(dt)) - sin(\\theta_0)]</span>\n\n<span class=\"mathquill\">y_f = y_0 + \\dfrac{v}{ \\dot{\\theta}}[cos(\\theta_0) - cos(\\theta_0 + \\dot{\\theta}(dt))]</span>\n\n<span class=\"mathquill\">\\theta_f = \\theta_0 + \\dot{\\theta}(dt) </span>\n\n##### Results\n\nPlugging in all the numbers should give:\n\n<span class=\"mathquill\"> 102+\\frac{110}{\\frac{\\pi}{8}}[sin(\\frac{5\\pi}{8}+\\frac{\\pi}{8}(0.1))-sin(\\frac{5\\pi}{8})] = 97.59 </span>\n\n<span class=\"mathquill\"> 65+\\frac{110}{\\frac{\\pi}{8}}[cos(\\frac{5\\pi}{8})-cos(\\frac{5\\pi}{8}+\\frac{\\pi}{8}(0.1))] = 75.08 </span>\n\n<span class=\"mathquill\">\\frac{5\\pi}{8}+ \\frac{\\pi}{8}(0.1)=  \\frac{51\\pi}{80}</span>\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 279200,
          "key": "44dc964a-7cff-4b31-b0b2-94b90d68b96b",
          "title": "Data Association: Nearest Neighbor",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "44dc964a-7cff-4b31-b0b2-94b90d68b96b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 286285,
              "key": "5c870de0-f8d0-4d7c-a626-0c03b4d048aa",
              "title": "Data Association- Nearest Neighbor",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nG_pFGT-fuo",
                "china_cdn_id": "nG_pFGT-fuo.mp4"
              }
            },
            {
              "id": 288139,
              "key": "c34df569-d1b8-4b44-84b3-b9b4eb9f7856",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Nearest Neighbor Effectiveness Quiz",
              "instructor_notes": ""
            },
            {
              "id": 287640,
              "key": "ff43b7a5-a548-4d9c-a3b9-3dd10f86fd92",
              "title": "Nearest Neighbor Effectiveness",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ff43b7a5-a548-4d9c-a3b9-3dd10f86fd92",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following characteristics of the input data would help nearest neighbor data association become more effective? ",
                "answers": [
                  {
                    "id": "a1490329185854",
                    "text": "Higher density of landmarks or measurements",
                    "is_correct": false
                  },
                  {
                    "id": "a1490329206368",
                    "text": "High signal-to-noise ratio for sensors",
                    "is_correct": true
                  },
                  {
                    "id": "a1490329206919",
                    "text": "A very accurate motion model",
                    "is_correct": true
                  },
                  {
                    "id": "a1490329207416",
                    "text": "Widely varying uncertainty between dimensions of the sensor measurement (for example large uncertainty in x, small uncertainty in y)",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 279203,
          "key": "a3827be0-a700-4a18-981a-9f45a11ae251",
          "title": "Nearest Neighbor Advantages and Disadvantages",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a3827be0-a700-4a18-981a-9f45a11ae251",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 287492,
              "key": "b8f8f754-72d3-4af3-a804-7f2e64348de2",
              "title": "Nearest Neighbor Advantages And Disadvantages",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "snXId_LyzXs",
                "china_cdn_id": "snXId_LyzXs.mp4"
              }
            }
          ]
        },
        {
          "id": 279204,
          "key": "d8e35c8e-7346-41e3-a23a-066403e0d3db",
          "title": "Update Step",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d8e35c8e-7346-41e3-a23a-066403e0d3db",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 286289,
              "key": "7d62403d-2192-4aeb-800e-502d42ff9ed0",
              "title": "Update Step",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1Uq2QZKz3aI",
                "china_cdn_id": "1Uq2QZKz3aI.mp4"
              }
            },
            {
              "id": 369874,
              "key": "da7d4eba-e29a-4e6d-a409-c608fdd6d94e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Note that the x and y errors are depicted from the point of view of the map (x is horizontal, y is vertical) rather than the point of view of the car where x is in the direction of the car’s heading,( i.e. It points to where the car is facing), and y is orthogonal (90 degrees) to the left of the x-axis (pointing out of the left side of the car).\n",
              "instructor_notes": ""
            },
            {
              "id": 356995,
              "key": "a5c01059-757b-4967-a3c8-f8b10d4b349b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598a1664_07-l-data-association-nearest-neighbor.00-00-17-03.still003/07-l-data-association-nearest-neighbor.00-00-17-03.still003.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a5c01059-757b-4967-a3c8-f8b10d4b349b",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 356996,
              "key": "362f82ec-7958-4b07-8ac6-89a8557a531f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598a167a_09-l-update-step.00-00-17-03.still001/09-l-update-step.00-00-17-03.still001.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/362f82ec-7958-4b07-8ac6-89a8557a531f",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 356997,
              "key": "ff0df99a-c716-415f-8e63-cc179ae6cbc5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that we have incorporated velocity and yaw rate measurement inputs into our filter, we must update particle weights based on LIDAR and RADAR readings of landmarks.  We will practice calculating particle weights, later in this lesson,  with the Particle Weights Quiz.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 279205,
          "key": "cbefd618-0857-4d83-84c8-426662b5f9aa",
          "title": "Calculating Error",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cbefd618-0857-4d83-84c8-426662b5f9aa",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 286290,
              "key": "9cee46a4-5065-4cfe-8382-168b21063682",
              "title": "Calculating Error",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HiRrJYZr-0I",
                "china_cdn_id": "HiRrJYZr-0I.mp4"
              }
            },
            {
              "id": 354533,
              "key": "bc6cba5d-3138-4fd7-872e-c719726f17cf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Instructor Notes\nNote that for a vector <span class=\"mathquill\"> \\mathbf{v} = \\text{(x,y)}</span>,  <span class=\"mathquill\">\\vert \\mathbf{v} \\vert</span> is used here to denote the vector length or magnitude = <span class=\"mathquill\">\\sqrt{x^2 + y^2}</span>.  \n\nFor a difference between two vectors,  <span class=\"mathquill\">\\mathbf{v} = {(x_v,y_v)}</span>  and  <span class=\"mathquill\">\\mathbf{w} = {(x_w,y_w)}</span>, the magnitude <span class=\"mathquill\">\\vert \\mathbf{v - w} \\vert</span> is also the Euclidean distance between these two vectors = <span class=\"mathquill\">\\sqrt{(x_v - x_w)^2 + (y_v - y_w)^2}</span>\n\nIn this case  <span class=\"mathquill\">\\sqrt{\\vert p_i - g \\vert}</span>  is meant to note the root squared error of a particular particle, resulting in the general form described in the quiz:\n\n<span class=\"mathquill\">\\sqrt{(x_p - x_g)^2 + (y_p - y_g)^2}</span>\n\nwhere:\n- **Position RMSE** = <span class=\"mathquill\">\\sqrt{(x_p - x_g)^2 + (y_p - y_g)^2}</span>\n- **Theta RMSE** = <span class=\"mathquill\">\\sqrt{(\\theta_p - \\theta_g)^2}</span>\n\n\n\n\n\n\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 288140,
              "key": "019a70db-adcb-4e6e-890e-6d6aafb6a420",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Root Squared Error Quiz",
              "instructor_notes": ""
            },
            {
              "id": 301384,
              "key": "324e5295-9c20-4954-a806-906b74c657cc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Given that the car’s ground truth position was (x, y, theta) = (5.2 m, 19.3 m, pi/16) and the best particle’s position was (x, y, theta) = (5 m, 18.7 m, pi/8), what is the error?\n\nPosition RMSE = <span class=\"mathquill\">\\sqrt{(x-x_{meas})^2+(y-y_{meas})^2}</span>\n\nTheta RMSE = <span class=\"mathquill\">\\sqrt{(\\theta-\\theta_{meas})^2}</span>",
              "instructor_notes": ""
            },
            {
              "id": 287642,
              "key": "fb87de39-ad23-45eb-ae7b-1553716904ca",
              "title": "Root Squared Error Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fb87de39-ad23-45eb-ae7b-1553716904ca",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the calculated position and theta RMSE?",
                "answers": [
                  {
                    "id": "a1490331328671",
                    "text": "RMSE = .221",
                    "is_correct": false
                  },
                  {
                    "id": "a1490331366960",
                    "text": "RMSE(x, y) = 0.4, RMSE(theta) = pi/8",
                    "is_correct": false
                  },
                  {
                    "id": "a1490331367561",
                    "text": "RMSE(x, y) = .63, RMSE(theta) = pi/16",
                    "is_correct": true
                  },
                  {
                    "id": "a1490331368048",
                    "text": "RMSE = .439",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 357734,
          "key": "35867f60-56af-4d59-bf9b-ef69098a1125",
          "title": "Transformations and Associations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35867f60-56af-4d59-bf9b-ef69098a1125",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 357735,
              "key": "5942628b-785a-40a7-842f-96a58916b6d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Transformations and Associations\n\nIn the project you will need to correctly perform observation measurement transformations, along with identifying measurement landmark associations in order to correctly calculate each particle's weight. Remember, our ultimate goal is to find a weight parameter for each particle that represents how well that particle fits to being in the same location as the actual car.\n\n In the quizzes that follow we will be given a single particle with its position and heading along with the car's observation measurements.  We will first need to transform the car's measurements from its local car coordinate system to the map's coordinate system. Next, each measurement will need to be [associated with a landmark identifier](https://classroom.udacity.com/nanodegrees/nd013/parts/40f38239-66b6-46ec-ae68-03afd8a601c8/modules/2c318113-724b-4f9f-860c-cb334e6e4ad7/lessons/5c50790c-5370-4c80-aff6-334659d5c0d9/concepts/44dc964a-7cff-4b31-b0b2-94b90d68b96b), for this part we will take the closest landmark to each transformed observation. Finally, we will use this information to calculate the weight value of the particle.",
              "instructor_notes": ""
            },
            {
              "id": 357736,
              "key": "6af75ad4-abb8-46fa-8ec8-52882a964340",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598b467e_localization-map-concept-copy/localization-map-concept-copy.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6af75ad4-abb8-46fa-8ec8-52882a964340",
              "caption": "",
              "alt": null,
              "width": 1024,
              "height": 1024,
              "instructor_notes": null
            },
            {
              "id": 357967,
              "key": "d4b91d37-f067-4643-94e5-301eed022ef2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the graph above we have a car (**ground truth position**) that observes three nearby landmarks, each one labeled OBS1, OBS2, OBS3. Each observation measurement has x, and y values in the car's coordinate system. We have a particle \"P\" (**estimated position of the car**) above with position (4,5) on the map with heading -90 degrees. The first task is to transform each observation marker from the vehicle's coordinates to the map's coordinates, with respect to our particle.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 419833,
          "key": "b7e42c04-8d1b-4631-a3ba-e74d4122cd59",
          "title": "Converting Landmark Observations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b7e42c04-8d1b-4631-a3ba-e74d4122cd59",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 419834,
              "key": "fc98c0b7-71e6-4d0b-8421-6d893aaf07ac",
              "title": "ND013 M4 L6 Converting Landmark Observations",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "BrQfVd4JXpg",
                "china_cdn_id": "BrQfVd4JXpg.mp4"
              }
            },
            {
              "id": 419837,
              "key": "da4d785f-a5d0-4179-bcb7-449fa11b17ec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is another example that might help your intuition.  \n\nReferring to the figures below:\n\nSuppose the map coordinate system (grey lines) and the vehicle coordinate system (orange lines) are offset, as depicted below. If we know the location of the observation in vehicle coordinates (grey lines), we would need to rotate the entire system, observation included, -45 degrees to find it in map coordinates (grey lines),  Once this rotation is done, we can easily see the location of the observation in map coordinates.\n",
              "instructor_notes": ""
            },
            {
              "id": 419840,
              "key": "67b5f0f8-37be-4b7b-bce2-b3357a05b679",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Particle (blue dot) in Map Frame (grey)",
              "instructor_notes": ""
            },
            {
              "id": 419838,
              "key": "9f245f5f-b2e7-43c4-ad94-2953371e847b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59d7d8a1_45deg-1/45deg-1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9f245f5f-b2e7-43c4-ad94-2953371e847b",
              "caption": "",
              "alt": "",
              "width": 200,
              "height": 146,
              "instructor_notes": null
            },
            {
              "id": 419841,
              "key": "5f334344-1088-46b1-a04c-06d12c1f18a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Particle (blue dot) in Vehicle Frame (orange)",
              "instructor_notes": ""
            },
            {
              "id": 419839,
              "key": "47a2af64-b9ed-49b7-8bb7-b55fef8281c1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59d7d8d9_45deg-2/45deg-2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/47a2af64-b9ed-49b7-8bb7-b55fef8281c1",
              "caption": "",
              "alt": "",
              "width": 158,
              "height": 216,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 357006,
          "key": "97f45106-adf4-45f1-b919-9675b3c990e0",
          "title": "Quiz: Landmarks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "97f45106-adf4-45f1-b919-9675b3c990e0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 357115,
              "key": "ddf28c48-3359-4247-ac50-b53472494792",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598a9cf5_localization-map-concept-copy/localization-map-concept-copy.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ddf28c48-3359-4247-ac50-b53472494792",
              "caption": "Map with Car Observations and Particle",
              "alt": null,
              "width": 1024,
              "height": 1024,
              "instructor_notes": null
            },
            {
              "id": 357116,
              "key": "e75a9e70-e0ed-4351-8626-d5624558d86a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the graph above we have a car (**ground truth position**) that observes three nearby landmarks, each one labeled OBS1, OBS2, OBS3. Each observation measurement has x, and y values in the car's coordinate system. We have a particle \"P\" (**estimated position of the car**) above with position (4,5) on the map with heading -90 degrees. The first task is to transform each observation marker from the vehicle's coordinates to the map's coordinates, with respect to our particle.\n",
              "instructor_notes": ""
            },
            {
              "id": 357117,
              "key": "56ce332e-48a8-46cf-ace2-17462ee45db3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Transformations\n\nThere is a generalized trigonometric function that given any particle position and heading along with any observation measurement (x_obs,y_obs) will output the  transformed observation (x_map,y_map) for that particle.  In other words, we need to map particle coordinates to map coordinates, by passing particle and observation coordinates through a function.\n\n**Transformed Observation (x_map,y_map)** = func(x_particle, y_particle, heading_particle, x_obs, y_obs)\n\nYou will need to derive and use this function to efficiently calculate particle observation transformations in the project.\n\n- Some excellent resources discussing coordinate transformation and rotation matrices:\n    + [Coordinate Transformations](http://farside.ph.utexas.edu/teaching/336k/Newtonhtml/node153.html)\n    + [Coordinate Transformation Under Rotation](https://www.miniphysics.com/coordinate-transformation-under-rotation.html)",
              "instructor_notes": ""
            },
            {
              "id": 357118,
              "key": "4f3d050b-c976-483a-8010-8ffc81545b9c",
              "title": "Transformation for OBS1",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4f3d050b-c976-483a-8010-8ffc81545b9c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "OBS1 is the sensor observation reported from the sensor. As noted in the figure, OBS1 is (2,2). What is the position of OBS1 in map coordinates (x_map,y_map)? Enter your answer in parenthesis with the x value separated from the y value with a comma and no spaces.",
                "matchers": [
                  {
                    "expression": "(6,3)"
                  }
                ]
              }
            },
            {
              "id": 357119,
              "key": "577c1156-17b7-4f1f-9ae6-187517abfec2",
              "title": "Transformation for OBS2",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "577c1156-17b7-4f1f-9ae6-187517abfec2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "OBS2 is the sensor observation reported from the sensor. As noted in the figure, OBS2 is (3,-2). What is the position of OBS2 in map coordinates (x_map,y_map)? Enter your answer in parenthesis with the x value separated from the y value with a comma and no spaces.\n\nThe answer **does not** match L2 - if you think it does, you need to check your work!",
                "matchers": [
                  {
                    "expression": "(2,2)"
                  }
                ]
              }
            },
            {
              "id": 357120,
              "key": "0cde630b-e593-45ff-ad60-c7b04c0fc76d",
              "title": "Transformation for OBS3",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0cde630b-e593-45ff-ad60-c7b04c0fc76d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "OBS3 is the sensor observation reported from the sensor. As noted in the figure, OBS3 is (0,-4). What is the position of OBS3 in map coordinates (x_map,y_map)? Enter your answer in parenthesis with the x value separated from the y value with a comma and no spaces.",
                "matchers": [
                  {
                    "expression": "(0,5)"
                  }
                ]
              }
            },
            {
              "id": 357121,
              "key": "1a0398ed-75bb-4092-8bf0-948f145f603f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources, Hints, and Tips\n- Without implementation of localization methods the car does not know where it is within an acceptable level of precision. The car knows particle coordinates and observation coordinates.  The objective is to use the particle coordinates and heading to transform the car's frame of reference to the map's frame of reference, associate the observations, then use the associated observations in the map domain to update the particle weight.\n- Since we know the coordinates of the particle from the car's frame of reference we can use this information and a matrix rotation/translation to transform each observation from the car frame of reference to the map frame of reference.  The particle is at (4,5) in the map coordinate system with a heading of -90 degrees.  The figure indicates the heading by depicting the particle x-axis as pointing down (blue arrow).  This is critical to understanding the matrix transformation we are about to perform.  \n- By convention we define the car coordinate system with x pointing up and y rotated from x by pi/2 (+90 degrees).  This is another way of saying that y is perpendicular and to the left of x.  When x is pointing down, we have the mirror of this, with y perpendicular to the right. To visualize this make an L with your left index finger and thumb with palm facing away from you, this is our map frame of reference.  Point the thumb towards the ceiling, this is the car coordinate convention, now point your thumb down, this is the orientation of the particle at (4,5).\n- Now consider the map frame of reference (make an L with your left index finger and thumb as above), this is a typical presentation of Cartesian coordinates, with x pointing right and y perpendicular to the left, pointing up.  If we rotate our thumb down we have the particle orientation.  To get back to the map orientation  we must rotate counterclockwise by 90 degrees (thumb from pointing down back to pointing right).  Try this a few times with your left hand.  Notice that particle to map is a counterclockwise rotation (+90 degrees) nd map to particle is a clockwise rotation (-90 degrees).  \n- The most straight forward way of rotating and translating coordinates is through homogenous transformation matrix (see below) using the angle of rotation required to get to the particle’s frame from the map’s point of view, -90 degrees.  This way we can use theta directly.  The alternative, which we will not cover here is to is to use -theta and a transformation matrix from the particle frame to the map frame.\n- [This video](https://youtu.be/h11ljFJeaLo) is a great resource for developing a deeper understanding of how to solve this transformation problem - it covers the rotation transformation, and from there you just need to perform a translation.",
              "instructor_notes": ""
            },
            {
              "id": 372767,
              "key": "23e58f74-2b05-467d-b919-d42d49a6caea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Observations in the car coordinate system can be transformed into map coordinates (<span class=\"mathquill\">\\text{x}_m</span> and  <span class=\"mathquill\">\\text{y}_m</span>) by passing car observation coordinates  (<span class=\"mathquill\">\\text{x}_c</span> and <span class=\"mathquill\">\\text{y}_c</span>), map particle coordinates (<span class=\"mathquill\">\\text{x}_p</span> and <span class=\"mathquill\">\\text{y}_p</span>), and our rotation angle (-90 degrees) through a homogenous transformation matrix.  This homogenous transformation matrix, shown below, performs rotation and translation.\n\n## Homogenous Transformation\n\n<div class=\"mathquill\">\\left[ \\begin{array}{c} \\text{x}_m \\\\ \n\\text{y}_m\n\\\\ 1\n \\end{array} \\right] = \n\\begin{bmatrix} \\cos\\theta & -\\sin\\theta & \\text{x}_p \\\\ \n\\sin\\theta & \\cos\\theta & \\text{y}_p \\\\\n0 & 0 & 1\n \\end{bmatrix}  \n\\times \\left[ \\begin{array}{c} \\text{x}_c \\\\ \n\\text{y}_c \n\\\\ 1\n\\end{array} \\right]</div>\n\n[Matrix multiplication](https://www.mathsisfun.com/algebra/matrix-multiplying.html) results in:\n\n<span class=\"mathquill\">\\text{x}_m= \\text{x}_p + (\\cos\\theta \\times \\text{x}_c) - (\\sin\\theta \\times \\text{y}_c)</span>\n\n<span class=\"mathquill\">\\text{y}_m= \\text{y}_p + (\\sin\\theta \\times \\text{x}_c) + (\\cos\\theta \\times \\text{y}_c)</span>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 357007,
          "key": "57e4e914-ccc8-4a69-be9d-d14cc2c9889f",
          "title": "Landmarks Quiz Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "57e4e914-ccc8-4a69-be9d-d14cc2c9889f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 357999,
              "key": "a50d4fc5-9391-4fe6-898b-3291c01d5854",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598b59c6_localization-map-concept-copy/localization-map-concept-copy.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a50d4fc5-9391-4fe6-898b-3291c01d5854",
              "caption": "Map with Car Observations and Particle",
              "alt": null,
              "width": 1024,
              "height": 1024,
              "instructor_notes": null
            },
            {
              "id": 358002,
              "key": "fb333706-5f09-43a5-90a5-38fe9f9298b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Observations in the car coordinate system can be transformed into map coordinates (<span class=\"mathquill\">\\text{x}_m</span> and  <span class=\"mathquill\">\\text{y}_m</span>) by passing car observation coordinates  (<span class=\"mathquill\">\\text{x}_c</span> and <span class=\"mathquill\">\\text{y}_c</span>), map particle coordinates (<span class=\"mathquill\">\\text{x}_p</span> and <span class=\"mathquill\">\\text{y}_p</span>), and our rotation angle (-90 degrees) through a homogenous transformation matrix.  This homogenous transformation matrix, shown below, performs rotation and translation.\n\n## Homogenous Transformation\n\n<div class=\"mathquill\">\\left[ \\begin{array}{c} \\text{x}_m \\\\ \n\\text{y}_m\n\\\\ 1\n \\end{array} \\right] = \n\\begin{bmatrix} \\cos\\theta & -\\sin\\theta & \\text{x}_p \\\\ \n\\sin\\theta & \\cos\\theta & \\text{y}_p \\\\\n0 & 0 & 1\n \\end{bmatrix}  \n\\times \\left[ \\begin{array}{c} \\text{x}_c \\\\ \n\\text{y}_c \n\\\\ 1\n\\end{array} \\right]</div>\n\n[Matrix multiplication](https://www.mathsisfun.com/algebra/matrix-multiplying.html) results in:\n\n<span class=\"mathquill\">\\text{x}_m= \\text{x}_p + (\\cos\\theta \\times \\text{x}_c) - (\\sin\\theta \\times \\text{y}_c)</span>\n\n<span class=\"mathquill\">\\text{y}_m= \\text{y}_p + (\\sin\\theta \\times \\text{x}_c) + (\\cos\\theta \\times \\text{y}_c)</span>",
              "instructor_notes": ""
            },
            {
              "id": 360368,
              "key": "a836ade0-5bb2-4c0c-96f9-170fec96b995",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solutions",
              "instructor_notes": ""
            },
            {
              "id": 358010,
              "key": "ce44e9e5-32ab-4beb-800b-8ab776490838",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Observation 1 Solution\n```cpp\n#include <cmath>\n#include <iostream>\n\nint main() {\n  // define coordinates and theta\n  double x_part, y_part, x_obs, y_obs, theta;\n  x_part = 4;\n  y_part = 5;\n  x_obs = 2;\n  y_obs = 2;\n  theta = -M_PI/2; // -90 degrees\n\n  // transform to map x coordinate\n  double x_map;\n  x_map = x_part + (cos(theta) * x_obs) - (sin(theta) * y_obs);\n    \n  // transform to map y coordinate\n  double y_map;\n  y_map = y_part + (sin(theta) * x_obs) + (cos(theta) * y_obs);\n  \n  // (6,3)\n  std::cout << int(round(x_map)) << \", \" << int(round((y_map)) << std::endl;\n    \n  return 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 358038,
              "key": "e8b5b3b2-9eec-4cab-b765-d9ac4c4541cc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Observation 2 Solution\n```cpp\n#include <cmath>\n#include <iostream>\n\nint main() {\n  // define coordinates and theta\n  double x_part, y_part, x_obs, y_obs, theta;\n  x_part = 4;\n  y_part = 5;\n  x_obs = 3;\n  y_obs = -2;\n  theta = -M_PI/2; // -90 degrees\n\n  // transform to map x coordinate\n  double x_map;\n  x_map = x_part + (cos(theta) * x_obs) - (sin(theta) * y_obs);\n    \n  // transform to map y coordinate\n  double y_map;\n  y_map = y_part + (sin(theta) * x_obs) + (cos(theta) * y_obs);\n  \n  // (2,2)\n  std::cout << int(round(x_map)) << \", \" << int(round(y_map)) << std::endl;\n    \n  return 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 358044,
              "key": "e3741569-82a5-44df-9456-05d25c7106b8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Observation 3 Solution\n```cpp\n#include <cmath>\n#include <iostream>\n\nint main() {\n  // define coordinates and theta\n  double x_part, y_part, x_obs, y_obs, theta;\n  x_part = 4;\n  y_part = 5;\n  x_obs = 0;\n  y_obs = -4;\n  theta = -M_PI/2; // -90 degrees\n\n  // transform to map x coordinate\n  double x_map;\n  x_map = x_part + (cos(theta) * x_obs) - (sin(theta) * y_obs);\n    \n  // transform to map y coordinate\n  double y_map;\n  y_map = y_part + (sin(theta) * x_obs) + (cos(theta) * y_obs);\n  \n  // (0,5)\n  std::cout << int(round(x_map)) << \", \" << int(round(y_map)) << std::endl;\n    \n  return 0;\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 357008,
          "key": "d6291e87-4a3b-43aa-a137-4b9e229464a5",
          "title": "Quiz: Association",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d6291e87-4a3b-43aa-a137-4b9e229464a5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 357122,
              "key": "08bd886e-c5bd-4d06-90d5-471e70323976",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598aa0c0_localization-map-concept-copy/localization-map-concept-copy.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/08bd886e-c5bd-4d06-90d5-471e70323976",
              "caption": "Map with Car Observations and Particle",
              "alt": null,
              "width": 1024,
              "height": 1024,
              "instructor_notes": null
            },
            {
              "id": 357123,
              "key": "a9371f6b-01ae-4ae0-a37b-4e30f9e08bb5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Associations\n\nNow that observations have been transformed into the map's coordinate space, the next step is to associate each transformed observation with a land mark identifier. In the map exercise above we have 5 total landmarks each identified as L1, L2, L3, L4, L5, and each with a known map location. We need to associate each transformed observation TOBS1, TOBS2, TOBS3 with one of these 5 identifiers. To do this we must associate the closest landmark to each transformed observation.\n\nAs a reminder:\n\n`TOBS1` = (6,3), `TOBS2` = (2,2) and `TOBS3` = (0,5).",
              "instructor_notes": ""
            },
            {
              "id": 357124,
              "key": "0663a374-f8f5-4c0f-8ffe-c5a654b0f84b",
              "title": "TOBS1 Association",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0663a374-f8f5-4c0f-8ffe-c5a654b0f84b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which landmark identifier is transformed OBS1 associated with? Answer either L1, L2, L3, L4, or L5.",
                "matchers": [
                  {
                    "expression": "[L-l][1]"
                  }
                ]
              }
            },
            {
              "id": 357125,
              "key": "974febde-5470-45fd-8003-a82ef8c0a4b6",
              "title": "TOBS2 Association",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "974febde-5470-45fd-8003-a82ef8c0a4b6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which landmark identifier is transformed OBS2 associated with? Answer either L1, L2, L3, L4, or L5.",
                "matchers": [
                  {
                    "expression": "[L-l][2]"
                  }
                ]
              }
            },
            {
              "id": 357126,
              "key": "4ab9984a-7872-4c03-8526-72dd9026681b",
              "title": "TOBS3 Association",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4ab9984a-7872-4c03-8526-72dd9026681b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which landmark identifier is transformed OBS3 associated with? Answer either L1, L2, L3, L4, or L5.",
                "matchers": [
                  {
                    "expression": "[L-l][5]"
                  },
                  {
                    "expression": "[L-l][2]"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 357009,
          "key": "0d4fb3b6-7db0-4bca-b88e-fceebf8373ed",
          "title": "Quiz: Particle Weights",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0d4fb3b6-7db0-4bca-b88e-fceebf8373ed",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 357716,
              "key": "17eb70f8-41f5-4cf9-a723-9009fcc1f528",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Calculating the Particle's Final Weight\n\nNow we that we have done the measurement transformations and associations, we have all the pieces we need to calculate the particle's final weight. The particles final weight will be calculated as the product of each measurement's Multivariate-Gaussian probability density.\n\nThe Multivariate-Gaussian probability density has two dimensions, x and y. The mean of the Multivariate-Gaussian is the measurement's associated landmark position and the Multivariate-Gaussian's standard deviation is described by our initial uncertainty in the x and y ranges. The Multivariate-Gaussian is evaluated at the point of the transformed measurement's position. The formula for the Multivariate-Gaussian can be seen below.\n\n<div class=\"mathquill\">P(x,y) =\\frac{1}{2\\pi \\sigma_{x}\\sigma_{y}}e^{-(\\frac{(x-\\mu_x)^2}{2\\sigma_x^2}+\\frac{(y-\\mu_y)^2}{2\\sigma_y^2})}</div>\n\n\nTo complete the next set of quizzes, calculate each measurement's Multivariate-Gaussian probability density using the formula above and the previously calculated values. In this example the standard deviation for both x and y is 0.3.\n\nNote that x and y are the observations in map coordinates from the landmarks quiz and <span class=\"mathquill\">\\mu_x</span>,  <span class=\"mathquill\">\\mu_y</span> are the coordinates of the nearest landmarks.  These should correspond to the correct responses from previous quizzes.\n",
              "instructor_notes": ""
            },
            {
              "id": 357728,
              "key": "8f4fb3fb-2aeb-4490-96bf-79a774172422",
              "title": "OBS1 Multivariate-Gaussian Probability",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8f4fb3fb-2aeb-4490-96bf-79a774172422",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the calculated Multivariate-Gaussian probability density of OBS1? Write your answer in scientific notation with an accuracy of two decimal places, for example 3.14E-15.",
                "matchers": [
                  {
                    "expression": "6.84E-(0|)3"
                  }
                ]
              }
            },
            {
              "id": 357729,
              "key": "84b394b1-37be-4481-81fa-b776cc433a5d",
              "title": "OBS2 Multivariate-Gaussian Probability",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "84b394b1-37be-4481-81fa-b776cc433a5d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the calculated Multivariate-Gaussian probability density of OBS2? Write your answer in scientific notation with an accuracy of two decimal places, for example 3.14E-15.",
                "matchers": [
                  {
                    "expression": "6.84E-(0|)3"
                  }
                ]
              }
            },
            {
              "id": 357730,
              "key": "1c011c82-ce2b-48f8-8ccb-3fcf9b7d2e3a",
              "title": "OBS3 Multivariate-Gaussian Probability",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1c011c82-ce2b-48f8-8ccb-3fcf9b7d2e3a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the calculated Multivariate-Gaussian probability density of OBS3? Write your answer in scientific notation with an accuracy of two decimal places, for example 3.14E-15.",
                "matchers": [
                  {
                    "expression": "9.83E-49"
                  }
                ]
              }
            },
            {
              "id": 357731,
              "key": "bfb6610c-9681-4211-9932-cdbfe62cc1a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources, Tips, and Hints\n\n- The elements of the formula above can be entered into a calculator but consider writing a function.  This will be a valuable addition to your toolkit.\n- Recall that x and y are the observations in map coordinates from the landmarks quiz and <span class=\"mathquill\">\\mu_x</span>,  <span class=\"mathquill\">\\mu_y</span> are the coordinates of the nearest landmarks.  These should correspond to the correct responses from previous quizzes.\n",
              "instructor_notes": ""
            },
            {
              "id": 357732,
              "key": "9bfee38f-967f-4071-80d2-7275052c1700",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Particle's Final Weight\n\nTo get the final weight just multiply all the calculated measurement probabilities together.",
              "instructor_notes": ""
            },
            {
              "id": 357733,
              "key": "e5b00751-b96a-4bda-968d-3f98390a59bd",
              "title": "Particle's Final weight",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e5b00751-b96a-4bda-968d-3f98390a59bd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the particle's final weight? Write your answer in scientific notation with an accuracy of two decimal places, for example 3.14E-15.",
                "matchers": [
                  {
                    "expression": "4.60E-53"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 357010,
          "key": "0a756b5c-458b-491f-b560-ac18b251f14d",
          "title": "Particle Weights Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0a756b5c-458b-491f-b560-ac18b251f14d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 360186,
              "key": "1f46257b-697e-45cc-a742-963888cf58fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We can calculate particle weights using the following equation:\n\n<div class=\"mathquill\">P(x,y) =\\frac{1}{2\\pi \\sigma_{x}\\sigma_{y}}e^{-(\\frac{(x-\\mu_x)^2}{2\\sigma_x^2}+\\frac{(y-\\mu_y)^2}{2\\sigma_y^2})}</div>\n\n- Recall that for this example the standard deviation for both x and y is 0.3.\n- x and y are the observations in map coordinates from landmarks quiz and <span class=\"mathquill\">\\mu_x</span>,  <span class=\"mathquill\">\\mu_y</span> are the coordinates of the nearest landmarks.  These should correspond to the correct responses from previous quizzes.\n",
              "instructor_notes": ""
            },
            {
              "id": 360367,
              "key": "18e073e0-ee2b-4a21-9042-69ad589020b3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solutions\nOBS1 weight should be around `0.00683644777551` rounding to `6.84E-3`.\n\nOBS2 weight should be around `0.00683644777551`, rounding to `6.84E-3`.\n\nOBS3 weight should be around `9.83184874151e-49`, rounding to `9.83E-49`.\n\nThe final weight should be around `4.59112934464959e-53`, rounding to `4.60E-53` (the above three multiplied together).\n\nWe have included a C++ solution below; the `multiv_gauss.cpp` file contains the primary calculations.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 805957,
              "key": "e20ce48e-e395-4387-879c-81b1820d6931",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e20ce48e-e395-4387-879c-81b1820d6931",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4722118790610944",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n#include \"multiv_gauss.h\"\n\nint main() {\n  // define inputs\n  double sig_x, sig_y, x_obs, y_obs, mu_x, mu_y;\n  // define outputs for observations\n  double weight1, weight2, weight3;\n  // final weight\n  double final_weight;\n    \n  // OBS1 values\n  sig_x = 0.3;\n  sig_y = 0.3;\n  x_obs = 6;\n  y_obs = 3;\n  mu_x = 5;\n  mu_y = 3;\n  // Calculate OBS1 weight\n  weight1 = multiv_prob(sig_x, sig_y, x_obs, y_obs, mu_x, mu_y);\n  // should be around 0.00683644777551 rounding to 6.84E-3\n  std::cout << \"Weight1: \" << weight1 << std::endl;\n    \n  // OBS2 values\n  sig_x = 0.3;\n  sig_y = 0.3;\n  x_obs = 2;\n  y_obs = 2;\n  mu_x = 2;\n  mu_y = 1;\n  // Calculate OBS2 weight\n  weight2 = multiv_prob(sig_x, sig_y, x_obs, y_obs, mu_x, mu_y);\n  // should be around 0.00683644777551 rounding to 6.84E-3\n  std::cout << \"Weight2: \" << weight2 << std::endl;\n    \n  // OBS3 values\n  sig_x = 0.3;\n  sig_y = 0.3;\n  x_obs = 0;\n  y_obs = 5;\n  mu_x = 2;\n  mu_y = 1;\n  // Calculate OBS3 weight\n  weight3 = multiv_prob(sig_x, sig_y, x_obs, y_obs, mu_x, mu_y);\n  // should be around 9.83184874151e-49 rounding to 9.83E-49\n  std::cout << \"Weight3: \" << weight3 << std::endl;\n    \n  // Output final weight\n  final_weight = weight1 * weight2 * weight3;\n  // 4.60E-53\n  std::cout << \"Final weight: \" << final_weight << std::endl;\n    \n  return 0;\n}",
                    "name": "main.cpp"
                  },
                  {
                    "text": "#include \"multiv_gauss.h\"\n#include <cmath>\n\ndouble multiv_prob(double sig_x, double sig_y, double x_obs, double y_obs,\n                   double mu_x, double mu_y) {\n  // calculate normalization term\n  double gauss_norm;\n  gauss_norm = 1 / (2 * M_PI * sig_x * sig_y);\n\n  // calculate exponent\n  double exponent;\n  exponent = (pow(x_obs - mu_x, 2) / (2 * pow(sig_x, 2)))\n               + (pow(y_obs - mu_y, 2) / (2 * pow(sig_y, 2)));\n    \n  // calculate weight using normalization terms and exponent\n  double weight;\n  weight = gauss_norm * exp(-exponent);\n    \n  return weight;\n}",
                    "name": "multiv_gauss.cpp"
                  },
                  {
                    "text": "#ifndef MULTIV_GAUSS_H\n#define MULTIV_GAUSS_H\n\ndouble multiv_prob(double sig_x, double sig_y, double x_obs, double y_obs,\n                   double mu_x, double mu_y);\n\n#endif  // MULTIV_GAUSS_H",
                    "name": "multiv_gauss.h"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 279207,
          "key": "8c4483e7-ab82-49e3-b640-593f7d5e8cd4",
          "title": "Explanation of Project Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8c4483e7-ab82-49e3-b640-593f7d5e8cd4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 286291,
              "key": "1a305cec-7355-4d9a-94f4-c787b388e7db",
              "title": "Explanation of Project Code",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3VRp4chnPE4",
                "china_cdn_id": "3VRp4chnPE4.mp4"
              }
            },
            {
              "id": 287744,
              "key": "db7e9cff-045d-494d-ac3c-3d87c86c4a3d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Explanation of Project Code\n\nWe are constantly updating and improving our projects so the code you see may be slightly different, such as `M` in the video now being named `num_particles`. Refer to the repository for the most up to date instructions.\n\nGo to the next lesson to read more about the project and get the link to the github repo.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 809769,
          "key": "f32443f3-0a61-41a6-987d-0481427ec29f",
          "title": "Bonus Round: Localization [Optional]",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f32443f3-0a61-41a6-987d-0481427ec29f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 809777,
              "key": "1d0f851f-e254-450d-a36b-7a9c48811aea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Additional Resources on Localization\n\nNice work reaching the end of the localization content! While you still have the project left to do here, we're also providing some additional resources and recent research on the topic that you can come back to if you have time later on.\n\nReading research papers is a great way to get exposure to the latest and greatest in the field, as well as expand your learning. However, just like the project ahead, it's often best to *learn by doing* - if you find a paper that really excites you, try to implement it (or even something better) yourself!",
              "instructor_notes": ""
            },
            {
              "id": 809780,
              "key": "76bef093-48b1-453c-81f7-0564b4b4febe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "##### Optional Reading\n\nAll of these are completely optional reading - you could spend hours reading through the entirety of these! We suggest moving onto the project first so you have what you’ve learned fresh on your mind, before coming back to check these out. \n\nWe've categorized these papers to hopefully help you narrow down which ones might be of interest, as well as highlighted a couple key reads by category by including their *Abstract* section, which summarizes the paper.\n\n---",
              "instructor_notes": ""
            },
            {
              "id": 810147,
              "key": "bcf471ad-d851-428c-a10a-93a42c401b23",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Simultaneous Localization and Mapping (SLAM)\nThe below papers cover Simultaneous Localization and Mapping (SLAM) - which as the name suggests, combines localization and mapping into a single algorithm without a map created beforehand.\n\n[Past, Present, and Future of Simultaneous Localization And Mapping: Towards the Robust-Perception Age](https://arxiv.org/abs/1606.05830) by C. Cadena, et. al.\n> **Abstract:** Simultaneous Localization and Mapping (SLAM) consists in the concurrent construction of a model of the environment (the map), and the estimation of the state of the robot moving within it. The SLAM community has made astonishing progress over the last 30 years, enabling large-scale real-world applications, and witnessing a steady transition of this technology to industry. We survey the current state of SLAM. We start by presenting what is now the de-facto standard formulation for SLAM. We then review related work, covering a broad set of topics including robustness and scalability in long-term mapping, metric and semantic representations for mapping, theoretical performance guarantees, active SLAM and exploration, and other new frontiers. [...]\n\n[Navigating the Landscape for Real-time Localisation and Mapping for Robotics and Virtual and Augmented Reality](https://arxiv.org/abs/1808.06352) by S. Saeedi, et. al.\n> **Abstract:** Visual understanding of 3D environments in real-time, at low power, is a huge computational challenge. Often referred to as SLAM (Simultaneous Localisation and Mapping), it is central to applications spanning domestic and industrial robotics, autonomous vehicles, virtual and augmented reality. This paper describes the results of a major research effort to assemble the algorithms, architectures, tools, and systems software needed to enable delivery of SLAM, by supporting applications specialists in selecting and configuring the appropriate algorithm and the appropriate hardware, and compilation pathway, to meet their performance, accuracy, and energy consumption goals. [...]\n\n---",
              "instructor_notes": ""
            },
            {
              "id": 810149,
              "key": "6d3d5ef9-dcb4-4585-85ab-6616ddb49102",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Other Methods\nThe below paper from Udacity's founder Sebastian Thrun, while from 2002, is still relevant for many different methods of mapping used today in robotics.\n\n[Robotic Mapping: A Survey](http://robots.stanford.edu/papers/thrun.mapping-tr.pdf) by S. Thrun\n> **Abstract:** This article provides a comprehensive introduction into the field of robotic mapping, with a focus on indoor mapping. It describes and compares various probabilistic techniques, as they are presently being applied to a vast array of mobile robot mapping problems. The history of robotic mapping is also described, along with an extensive list of open research problems.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}