{
  "data": {
    "lesson": {
      "id": 627682,
      "key": "407a2efa-3383-480f-9266-5981440b09b3",
      "title": "Project: Highway Driving",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Drive a car down a highway with other cars using your own path planner!",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/407a2efa-3383-480f-9266-5981440b09b3/627682/1538942268346/Project%3A+Highway+Driving+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/407a2efa-3383-480f-9266-5981440b09b3/627682/1538942259987/Project%3A+Highway+Driving+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": {
        "key": "73e03902-1967-4f7b-b78b-b73aab27d931",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 34560,
        "semantic_type": "Project",
        "title": "Highway Driving",
        "description": "Once you have completed your project, double check the [**Project Rubric**](https://review.udacity.com/#!/rubrics/1971/view) to make sure you have addressed all the rubric points. Your project will be evaluated by a Udacity reviewer according to that same rubric.\n\nYour project must \"meet specifications\" in each category in order for your submission to pass for at least one lap around the track.  If you are happy with your submission, then you are ready to submit! If you see room for improvement in **any** category in which you do not meet specifications, keep working! \n\nOnce you have a path planner that is able to complete at least one loop around the track, and pass the rubric specifications, go ahead and submit.",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "1971",
        "terminal_project_id": null,
        "resources": null,
        "image": {
          "url": "https://s3.amazonaws.com/video.udacity-data.com/topher/2018/June/5b15a2c5_path-planning/path-planning.png",
          "width": 530,
          "height": 291
        }
      },
      "lab": null,
      "concepts": [
        {
          "id": 663317,
          "key": "47f2bd54-661b-4e5d-826f-7d738f354be7",
          "title": "Planning is Hard",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "47f2bd54-661b-4e5d-826f-7d738f354be7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 663318,
              "key": "14a3aeb0-2220-440d-8b04-251fda060ed9",
              "title": "06 Path Planning A02 Planning Is Hard",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "15yIDPNbmWc",
                "china_cdn_id": "15yIDPNbmWc.mp4"
              }
            }
          ]
        },
        {
          "id": 332965,
          "key": "845a4549-6858-439e-a223-f387f15d477d",
          "title": "Getting Started",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "845a4549-6858-439e-a223-f387f15d477d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 340498,
              "key": "8f62891a-88b3-479a-af2b-e5084dbe89f2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The goal of this project is to build a path planner that creates smooth, safe trajectories for the car to follow. The highway track has other vehicles, all going different speeds, but approximately obeying the 50 MPH speed limit. \n\nThe car transmits its location, along with its sensor fusion data, which estimates the location of all the vehicles on the same side of the road.",
              "instructor_notes": ""
            },
            {
              "id": 340501,
              "key": "686e489e-8113-4013-8183-658e186c1ac8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/594314e3_car-ppc-gif/car-ppc-gif.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/686e489e-8113-4013-8183-658e186c1ac8",
              "caption": "Car traversing its given path points",
              "alt": null,
              "width": 654,
              "height": 632,
              "instructor_notes": null
            },
            {
              "id": 340502,
              "key": "de3e7ab2-6f72-4e4d-abfd-999067d85626",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Point Paths\nThe path planner should output a list of x and y  global map coordinates. Each pair of x and y coordinates is a point, and all of the points together form a trajectory. You can use any number of points that you want, but the x list should be the same length as the y list. \n\nEvery 20 ms the car moves to the next point on the list. The car's new rotation becomes the line between the previous waypoint and the car's new location. \n\nThe car moves from point to point perfectly, so you don't have to worry about building a controller for this project. \n\nThe animation above shows how the car moves and rotates through a given list of points.\n\n### Velocity \nThe velocity of the car depends on the spacing of the points. Because the car moves to a new waypoint every 20ms, the larger the spacing between points, the faster the car will travel. The speed goal is to have the car traveling at (but not above) the 50 MPH speed limit as often as possible. But there will be times when traffic gets in the way.\n\n### Getting Started\nStart by simply trying to move the car forward in a straight line at a constant 50 MPH velocity. Use the car's (x, y) localization information and its heading direction to create a simple, straight path that is drawn directly in front of the car.\n\nIn `main.cpp`, instead of setting the speed directly, we pass `next_x_vals`, and `next_y_vals` to the simulator. We will set the points 0.5 m apart. Since the car moves 50 times a second, a distance of 0.5m per move will create a velocity of 25 m/s. 25 m/s is close to 50 MPH.\n\n```cpp\ndouble dist_inc = 0.5;\nfor (int i = 0; i < 50; ++i) {\n  next_x_vals.push_back(car_x+(dist_inc*i)*cos(deg2rad(car_yaw)));\n  next_y_vals.push_back(car_y+(dist_inc*i)*sin(deg2rad(car_yaw)));\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 340503,
              "key": "e59fc9f5-1989-44ec-a181-eb333cb35b03",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/59432c9e_car-in-line/car-in-line.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e59fc9f5-1989-44ec-a181-eb333cb35b03",
              "caption": "A simple test moving the car forward at constant velocity",
              "alt": null,
              "width": 956,
              "height": 536,
              "instructor_notes": null
            },
            {
              "id": 340504,
              "key": "95cd0eae-95e3-4298-955d-ed4e58d18437",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Great! With just a couple of lines of code we were able to get the car to drive forward at constant velocity. \n\nNotice, however, that the car went from 0 MPH to 56 MPH in a single 20 ms frame, causing a spike in acceleration. \n\nAcceleration is calculated by comparing the rate of change of average speed over .2 second intervals. In this case total acceleration at one point was as high as 75 m/s^2. Jerk was also very high. The jerk is calculated as the average acceleration over 1 second intervals. In order for the passenger to have an enjoyable ride both the jerk and the total acceleration should not exceed 10 m/s^2. \n\nPart of the total acceleration is the normal component, *AccN* which measures the centripetal acceleration from turning. The tighter and faster a turn is made, the higher the *AccN* value will be. \n\nIn our simple test we were not turning at all, so the value of *AccN* was zero. \n\nGoing forward, consider how to minimize total acceleration and jerk by gradually increasing and decreasing point path spacing based on the `car_speed` variable.\n\nTo get a better idea of how movement affects the acceleration of the car, click the *Manual Mode* check box in the top left of the simulator screen to drive the car around yourself.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 340505,
          "key": "66b03ee0-8e28-4a20-a1b2-690801d57d06",
          "title": "More Complex Paths",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "66b03ee0-8e28-4a20-a1b2-690801d57d06",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 340506,
              "key": "4598c2c3-dbb8-425d-bd44-b4861f9bf43d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### More Complex Paths\n\nIn the previous concept you moved the car forward in a straight line. How about creating more interesting paths?",
              "instructor_notes": ""
            },
            {
              "id": 340507,
              "key": "eaf8da04-2d51-4b75-8074-bb4bbf8232be",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/59443931_circle-path/circle-path.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/eaf8da04-2d51-4b75-8074-bb4bbf8232be",
              "caption": "Driving the car in a circular path",
              "alt": null,
              "width": 956,
              "height": 536,
              "instructor_notes": null
            },
            {
              "id": 340509,
              "key": "cb657375-ecfd-4aaf-bc79-3dc307f09c4c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```cpp              \nvector<double> next_x_vals;\nvector<double> next_y_vals;\n\ndouble pos_x;\ndouble pos_y;\ndouble angle;\nint path_size = previous_path_x.size();\n\nfor (int i = 0; i < path_size; ++i) {\n  next_x_vals.push_back(previous_path_x[i]);\n  next_y_vals.push_back(previous_path_y[i]);\n}\n\nif (path_size == 0) {\n  pos_x = car_x;\n  pos_y = car_y;\n  angle = deg2rad(car_yaw);\n} else {\n  pos_x = previous_path_x[path_size-1];\n  pos_y = previous_path_y[path_size-1];\n\n  double pos_x2 = previous_path_x[path_size-2];\n  double pos_y2 = previous_path_y[path_size-2];\n  angle = atan2(pos_y-pos_y2,pos_x-pos_x2);\n}\n\ndouble dist_inc = 0.5;\nfor (int i = 0; i < 50-path_size; ++i) {\t\n  next_x_vals.push_back(pos_x+(dist_inc)*cos(angle+(i+1)*(pi()/100)));\n  next_y_vals.push_back(pos_y+(dist_inc)*sin(angle+(i+1)*(pi()/100)));\n  pos_x += (dist_inc)*cos(angle+(i+1)*(pi()/100));\n  pos_y += (dist_inc)*sin(angle+(i+1)*(pi()/100));\n}\n\nmsgJson[\"next_x\"] = next_x_vals;\nmsgJson[\"next_y\"] = next_y_vals;\n```",
              "instructor_notes": ""
            },
            {
              "id": 340510,
              "key": "0f257262-889e-4ed8-ba02-0249850d9dcf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Using Previous Path Points\nThe code snippet above builds a 50 point path, as in the previous experiment. But this code snippet starts the new path with whatever previous path points were left over from the last cycle. Then we append new waypoints, until the new path has 50 total waypoints. \n\nUsing information from the previous path ensures that there is a smooth transition from cycle to cycle. But the more waypoints we use from the previous path, the less the new path will reflect dynamic changes in the environment. \n\nIdeally, we might only use a few waypoints from the previous path and then generate the rest of the new path based on new data from the car's sensor fusion information.\n\n### Timing\nThe simulator runs a cycle every 20 ms (50 frames per second), but your C++ path planning program will provide a new path at least one 20 ms cycle behind. The simulator will simply keep progressing down its last given path while it waits for a new generated path. \n\nThis means that using previous path data becomes even more important when higher latency is involved. Imagine, for instance, that there is a 500ms delay in sending a new path to the simulator. As long as the new path incorporates a sufficient length of the previous path, the transition will still be smooth.\n\nA concern, though, is how accurately we can predict other traffic 1-2 seconds into the future. An advantage of newly generated paths is that they take into account the most up-to-date state of other traffic.\n\n### Setting Point Paths with Latency\nAs a mentioned, your C++ path planner will at the very least be one cycle behind the simulator because the C++ program can't receive and send data on the same cycle. As a result, any path that the simulator receives will be from the perspective of a previous cycle. This might mean that by the time a new path reaches the simulator, the vehicle has already passed the first few waypoints on that path.\n\nLuckily you don't have to worry about this too much. The simulator has built-in tools to deal with this timing difference. The simulator actually expects the received path to be a little out of date compared to where the car is, and the simulator will consider which point on the received path is closest to the car and adjust appropriately. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 340511,
          "key": "648d4d54-787a-4247-90df-6555980fe7be",
          "title": "Highway Map",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "648d4d54-787a-4247-90df-6555980fe7be",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 340512,
              "key": "17dacc26-0d8e-4de7-80a9-a5f910fa925a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Highway Map\nInside `data/highway_map.csv ` there is a list of waypoints that go all the way around the track. The track contains a total of 181 waypoints, with the last waypoint mapping back around to the first. The waypoints are in the middle of the double-yellow dividing line in the center of the highway.\n\nThe track is 6945.554 meters around (about 4.32 miles). If the car averages near 50 MPH, then it should take a little more than 5 minutes for it to go all the way around the highway. \n\nThe highway has 6 lanes total - 3 heading in each direction. Each lane is 4 m wide and the car should only ever be in one of the 3 lanes on the right-hand side. The car should always be inside a lane unless doing a lane change.\n\n#### Waypoint Data\nEach waypoint has an (x,y) global map position, and a Frenet s value and Frenet d unit normal vector (split up into the x component, and the y component). \n\nThe s value is the distance along the direction of the road. The first waypoint has an s value of 0 because it is the starting point. \n\nThe d vector has a magnitude of 1 and points perpendicular to the road in the direction of the right-hand side of the road. The d vector can be used to calculate lane positions. For example, if you want to be in the left lane at some waypoint just add the waypoint's (x,y) coordinates with the d vector multiplied by 2. Since the lane is 4 m wide, the middle of the left lane (the lane closest to the double-yellow dividing line) is 2 m from the waypoint. \n\nIf you would like to be in the middle lane, add the waypoint's coordinates to the d vector multiplied by 6 = (2+4), since the center of the middle lane is 4 m from the center of the left lane, which is itself 2 m from the double-yellow dividing line and the waypoints.\n\n#### Converting Frenet Coordinates\nWe have included a helper function, `getXY`, which takes in Frenet (s,d) coordinates and transforms them to (x,y) coordinates.\n\n#### Interpolating Points\nIf you need to estimate the location of points between the known waypoints, you will need to \"interpolate\" the position of those points. \n\nIn previous lessons we looked at fitting polynomials to waypoints. Once you have a polynomial function, you can use it to interpolate the location of a new point. \n\nThere are also other methods you could use. For example, Bezier curve fitting with control points, or spline fitting, which guarantees that the generated function passes through every point. \n\nHere is a great and easy to setup and use [spline tool](http://kluge.in-chemnitz.de/opensource/spline/) for C++, contained in just a single header file.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 340513,
          "key": "bc45c809-0e43-4bf6-91b6-6176eee78acd",
          "title": "Sensor Fusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bc45c809-0e43-4bf6-91b6-6176eee78acd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 340514,
              "key": "f4231c6e-7d94-4032-b599-340b4c49d4dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Sensor Fusion\n\nIt's important that the car doesn't crash into any of the other vehicles on the road, all of which are moving at different speeds around the speed limit and can change lanes.\n\nThe `sensor_fusion` variable contains all the information about the cars on the right-hand side of the road.\n\nThe data format for each car is: [ id, x, y, vx, vy, s, d]. The id is a unique identifier for that car. The x, y values are in global map coordinates, and the vx, vy values are the velocity components, also in reference to the global map. Finally s and d are the Frenet coordinates for that car.\n\nThe vx, vy values can be useful for predicting where the cars will be in the future. For instance, if you were to assume that the tracked car kept moving along the road, then its future predicted Frenet s value will be its current s value plus its (transformed) total velocity (m/s) multiplied by the time elapsed into the future (s).\n\n### Changing Lanes",
              "instructor_notes": ""
            },
            {
              "id": 569575,
              "key": "b2f41bad-a16c-4bc0-a5ef-8eef6afbfc9d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5ab2e685_playfuldesertedblackrussianterrier-size-restricted/playfuldesertedblackrussianterrier-size-restricted.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b2f41bad-a16c-4bc0-a5ef-8eef6afbfc9d",
              "caption": "Creating paths with smooth lane changes",
              "alt": "",
              "width": 445,
              "height": 249,
              "instructor_notes": null
            },
            {
              "id": 340516,
              "key": "28fa0a90-b4f4-4e6c-a5b7-9ea18b66731a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The last consideration is how to create paths that can smoothly changes lanes. Any time the ego vehicle approaches a car in front of it that is moving slower than the speed limit, the ego vehicle should consider changing lanes. \n\nThe car should only change lanes if such a change would be safe, and also if the lane change would help it move through the flow of traffic better. \n\nFor safety, a lane change path should optimize the distance away from other traffic. For comfort, a lane change path should also result in low acceleration and jerk. The acceleration and jerk part can be solved from linear equations for s and d functions. Examples of this can be found in the Trajectory Generation quizzes entitled, \"Quintic Polynomial Solver\" and \"Polynomial Trajectory\".\n\nThe provided Eigen-3.3 library can solve such linear equations. The `getXY` helper function can transform (s,d) points to (x,y) points for the returned path.\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 357094,
          "key": "3bdfeb8c-8dd6-49a7-9d08-beff6703792d",
          "title": "Project Q&A",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3bdfeb8c-8dd6-49a7-9d08-beff6703792d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 369712,
              "key": "815a74f5-089e-426b-94b7-2c1069a9f5bf",
              "title": "Path Planning Project Walkthrough and Q&A",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7sI3VHFPP0w",
                "china_cdn_id": "7sI3VHFPP0w.mp4"
              }
            }
          ]
        },
        {
          "id": 676982,
          "key": "48023528-6d96-4b72-be29-333f80fbb157",
          "title": "Project instructions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "48023528-6d96-4b72-be29-333f80fbb157",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676990,
              "key": "86bed675-fd93-41c6-b112-5e54eaff48dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The Goal of this Project\n---\nIn this project, your goal is to design a path planner that is able to create smooth, safe paths for the car to follow along a 3 lane highway with traffic. A successful path planner will be able to keep inside its lane, avoid hitting other cars, and pass slower moving traffic all by using localization, sensor fusion, and map data.\n\nIncluded in the submission should be a write-up, either in the README or a separate file that details how the project was completed.\n\nA great write-up should include the rubric points as well as your description of how you addressed each point.  You should include a detailed description of the code used in each step (with line-number references and code snippets where appropriate) and links to other supporting documents or external references.  \n\nAll that said, please be concise!  We're not looking for you to write a book, just a brief description of how you passed each rubric point, and references to the relevant code :)\n\n\nThe Code\n---\nYou can use the project version on workspaces [here](https://classroom.udacity.com/nanodegrees/nd013/parts/30260907-68c1-4f24-b793-89c0c2a0ad32/modules/b74b8e43-47d1-47d6-a4cf-4d64ea3e0b80/lessons/407a2efa-3383-480f-9266-5981440b09b3/concepts/4f9bfd12-9c32-4f91-86b4-4c7a206afaab?contentVersion=2.0.0&contentLocale=en-us) or you can find the project repository [here](https://github.com/udacity/CarND-Path-Planning-Project).\n\nIf you decide to work in your local setup, you can download the latest simulator [here](https://github.com/udacity/self-driving-car-sim/releases/tag/T3_v1.2).\n\nYour code should stand on its own as redable material.  Explain in code comments, as well as in your write-up, how your code works and why you wrote it that way.\n\nMake it easy for a reviewer to understand your code. \n\n\n## Accessing and using the workspace:\n- Navigate to the workspace node. If you need to test your solution, enable the GPU - otherwise, you won't be able to run the simulator. Remember to turn it off when you code your solution so that you don't run out of GPU hours.\n- Navigate to the repository `CarND-Path-Planning-Project` using menu on the left.\n- Complete the `TODO` in main.cpp and add any helper files you need using the text editor in the workspace.\n- Navigate to the project repository in the terminal.\n\n**Note**: You can add any necessary helper files within the `src` (or other) folder by clicking on the `+` in the top left, selecting *Create New File*, and then naming your file with the relevant extension (such as `.h`, `.hpp`, `.cpp`, etc).\n\nIn order to build and compile the code, from within the main repository directory, you can:\n- `mkdir build && cd build` to create and enter the build directory\n- `cmake .. && make` to compile your project\n- `./path_planning` to run your code\n\nClick on the \"Simulator\" button in the bottom of the Udacity workspace, which will open a new virtual desktop. You should see a \"Simulator\" icon on the virtual desktop. Double-click the \"Simulator\" icon in that desktop to start the simulator.\n\n**Important:** You need to open a terminal before attempting to run the simulator.\n\nAll Project instructions can be found in the [README.md](https://github.com/udacity/CarND-Path-Planning-Project/blob/master/README.md) (you can view the instruction in an easy-to-read format by visiting the previous link.\n\n\n\nWhat It Takes to Pass\n---\n\nRead the [project rubric](https://review.udacity.com/#!/rubrics/1971/view) for details on the requirements for a passing submission.  \n\nThere is no starter code provided, but you are welcome to use code from the lesson and quizzes as you like.  \n\nEvaluation\n---\n\nOnce you have completed your project, double check the [**Project Rubric**](https://review.udacity.com/#!/rubrics/1971/view) to make sure you have addressed all the rubric points. Your project will be evaluated by a Udacity reviewer according to that same rubric.\n\nYour project must \"meet specifications\" in each category in order for your submission to pass for at least one lap around the track.  If you are happy with your submission, then you are ready to submit! If you see room for improvement in **any** category in which you do not meet specifications, keep working! \n\nOnce you have a path planner that is able to complete at least one loop around the track and pass the rubric specifications, go ahead and submit.\n\n## Commit to GitHub\nStudents are highly encouraged to commit their project to a GitHub repo.  To do this, you must change the upstream of the current repository and add your credentials.  We have supplied a bash script to help you do this.  Please open up a terminal, navigate to the project repository, and enter: `./set_git.sh`, then follow the prompts.  This will set the upstream remote to your own repository and add your email and username to the git configuration.  At this time we are not configuring passwords, so you will need to enter your username and password for each push.  Since credentials are not persistent, it will be necessary to run this script each time you open, refresh, or reset the workspace.\n\n### Ready to Submit?###\n\nWhen you are ready to submit, just make sure you have in your files:\n1. Write up\n2. A complete solution, with all the files needed to run your project.\n\nIf you use **workspaces** click on the button on the right button and follow the instruction.  Alternatively, you may submit a link to your GitHub repo for the project or a zip file with your files in the last item in this lesson.\n\n### Using GitHub and Creating Effective READMEs\n\nIf you are unfamiliar with GitHub , Udacity has a brief [GitHub tutorial](http://blog.udacity.com/2015/06/a-beginners-git-github-tutorial.html) to get you started. Udacity also provides a more detailed free [course on git and GitHub](https://www.udacity.com/course/how-to-use-git-and-github--ud775).\n\nTo learn about README files and Markdown, Udacity provides a free [course on READMEs](https://www.udacity.com/course/writing-readmes--ud777), as well. \n\nGitHub also provides a [tutorial](https://guides.github.com/features/mastering-markdown/) about creating Markdown files.\n\n## Project Support ##\n\nIf you are stuck or having difficulties with the project, don't lose hope! Remember to talk to your mentors and fellow students in your Study Group, as well as ask (and answer!) questions on [Knowledge](https://knowledge.udacity.com) tagged with the project name. Don't forget to check out the project Q&A from the previous page as well (or visit it [here](https://youtu.be/7sI3VHFPP0w))!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 676936,
          "key": "4f9bfd12-9c32-4f91-86b4-4c7a206afaab",
          "title": "Workspaces: Highway Driving",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4f9bfd12-9c32-4f91-86b4-4c7a206afaab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676945,
              "key": "cdaae8f6-216b-4ce8-a5e6-5a24fef57f4f",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewHJgNfeO0QQ",
              "pool_id": "autonomousgpu",
              "view_id": "react-SJ4MxuCQm",
              "gpu_capable": true,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": {
                      "id": "autonomous-datasets",
                      "paths": [
                        {
                          "src": "/sdc_nd",
                          "dest": "/data/"
                        }
                      ]
                    },
                    "port": 3000,
                    "ports": [],
                    "userCode": "echo \"Installing dependencies.\"\nsudo apt-key del 421C365BD9FF1F717815A3895523BAEEB01FA116\nsudo -E apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\nsudo apt-get -qq update > /dev/null\nsudo apt-get -y -qq install libssl-dev >/dev/null 2>&1 &\nmkdir -p /usr/include/uWS\nln -sf /data/uWebSockets/src/*.h /usr/include/uWS/\nln -sf /data/uWebSockets/build/libuWS.so /usr/lib/\ncp -rsn /data/libuv/usr/* /usr &> /dev/null\necho \"Done. All dependencies installed.\"\n",
                    "openFiles": [],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": true,
                    "terminalTitle": "BASH",
                    "actionButtonText": "Simulator",
                    "openTerminalOnStartup": true
                  },
                  "kind": "react"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 708550,
          "key": "96dab280-750e-4bd3-a661-211a2791e324",
          "title": "Share Your Success - Highway Driving",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "96dab280-750e-4bd3-a661-211a2791e324",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 708551,
              "key": "5746e6cf-2c3b-42bd-9754-24d77563a03f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Share your project success\nPassed your project? Share the good news!\n\nWhat you’ve accomplished is no small feat. Give yourself a pat on the back and some well-deserved recognition by sharing your success with your network.\n\n<iframe\n  src=\"https://platform.twitter.com/widgets/tweet_button.html?size=l&url=www.udacity.com&text=I%20completed%20Path%20Planning%20!%20Just%20two%20projects%20left%20in%20my%20journey%20with%20the%20Self-Driving%20Car%20Engineer%20Nanodegree%20@udacity%20\n[Insert%20your%20Github%20repository%20url%20here]&hashtags=selfdrivingudacity\"\nwidth=\"140\"\nheight=\"28\"\nscrolling=\"no\">\n</iframe>\n\n#### Facebook and LinkedIn\nMake sure to use **@Udacity** and **#selfdrivingudacity** in your posts!\n\n<html>\n\n<head>\n<style>\n.fb {color: white;\n  background-color: #4661b0;\n  border-radius: 4px;\n  font-weight: bold;\n  height: 28px;\n  font-size: 14px;}\n.fb:hover {color: #4661b0;\n  background-color: white;\n  border-color: #4661b0;\n  transition: background-color 0.4s}\n.linkedin {color: white;\n  background-color: #0077B5;\n  border-radius: 4px;\n  font-weight: bold;\n  height: 28px;\n  font-size: 14px;}\n.linkedin:hover {color: #0077B5;\n  background-color: white;\n  border-color: #0077B5;\n  transition: background-color 0.4s}\n</style>\n\n</head>\n\n<body>\n<form action=\"https://www.facebook.com/sharer.php?\">\n  Enter the full URL of your Github repository or Youtube video:<br>\n  <input type=\"url\" name=\"u\" placeholder=\"Paste URL here\">\n  <input type=\"hidden\" name=\"hashtag\" value=\"#selfdrivingudacity\">\n  <button class=\"fb\">Share on Facebook</button>\n</form>\n\n<form action=\"https://www.linkedin.com/shareArticle?mini=true\">\n  <input type=\"url\" name=\"url\" placeholder=\"Paste URL here\">\n  <input type=\"hidden\" name=\"title\" value=\"Path Planning\">\n  <input type=\"hidden\" name=\"summary\" value=\"I finished the Path Planning project in the Self-Driving Car Nanodegree @udacity #selfdrivingudacity\">\n  <button class=\"linkedin\">Share on LinkedIn</button>\n</form>\n\n</body>\n\n</html>\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}