{
  "data": {
    "lesson": {
      "id": 96322,
      "key": "7123524086",
      "title": "Searching and Sorting",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Explore how to search and sort with list-based data structures, including binary search and bubble, merge, and quick sort. Learn how to use recursion.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/7123524086/96322/1517077830418/Searching%20and%20Sorting%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/7123524086/96322/1517077806781/Searching%20and%20Sorting%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 61000,
          "key": "71173440860923",
          "title": "Binary Search",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71173440860923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 97194,
              "key": "7117344086",
              "title": "Binary Search",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "0VN5iwEyq4c",
                "china_cdn_id": "0VN5iwEyq4c.mp4"
              }
            }
          ]
        },
        {
          "id": 22332,
          "key": "71154040750923",
          "title": "Efficiency of Binary Search",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71154040750923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 21953,
              "key": "7115404075",
              "title": "Efficiency of Binary Search",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "7WbRB7dSyvc",
                "china_cdn_id": "7WbRB7dSyvc.mp4"
              }
            }
          ]
        },
        {
          "id": 115071,
          "key": "78812066010923",
          "title": "Binary Search Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78812066010923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 61670,
              "key": "7881206601",
              "title": "Binary Search Practice",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "7881206601",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                },
                "text": "Searches and sorts can be very hard to visualize and understand. If you need, go through the video a few more times until it really sinks in. [Here](http://www.cs.armstrong.edu/liang/animation/web/BinarySearch.html) is a supplementary visualization that might help as well! <br>\n\nPython lists have a method called `index()`, which just does a search and returns the first index with an instance of that value. Next, you're going to write a binary search function that has the same result, but searches faster. Keep in mind the constraint for this exercise—for binary search, elements need to be in increasing order."
              },
              "question": {
                "title": "Binary Search Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "7883166535",
                "initial_code_files": [
                  {
                    "text": "\"\"\"You're going to write a binary search function.\nYou should use an iterative approach - meaning\nusing loops.\nYour function should take two inputs:\na Python list to search through, and the value\nyou're searching for.\nAssume the list only has distinct elements,\nmeaning there are no repeated values, and \nelements are in a strictly increasing order.\nReturn the index of value, or -1 if the value\ndoesn't exist in the list.\"\"\"\n\ndef binary_search(input_array, value):\n    \"\"\"Your code goes here.\"\"\"\n    return -1\n\ntest_list = [1,3,9,11,15,19,29]\ntest_val1 = 25\ntest_val2 = 15\nprint binary_search(test_list, test_val1)\nprint binary_search(test_list, test_val2)",
                    "name": "algorithmsP5.py"
                  }
                ]
              },
              "answer": {
                "text": "If you feel like you struggled with this material, check out [this visualization](https://www.cs.usfca.edu/~galles/visualization/Search.html). (There's a coded solution there too!)",
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                }
              }
            }
          ]
        },
        {
          "id": 44690,
          "key": "71225249930923",
          "title": "Recursion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71225249930923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 131802,
              "key": "7122524993",
              "title": "Recursion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "_aI2Jch6Epk",
                "china_cdn_id": "_aI2Jch6Epk.mp4"
              }
            }
          ]
        },
        {
          "id": 23487,
          "key": "78810568040923",
          "title": "Recursion Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78810568040923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 35041,
              "key": "7881056804",
              "title": "Recursion Practice",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "7881056804",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                },
                "text": "We're going to take a look at recursion with a famous example—the Fibonacci Sequence. <br>\n\nThe Fibonacci Sequence follows one rule: get the next number in the sequence by adding the two previous numbers. Here is an example of the sequence:\n\n    0,1,1,2,3,5,8,13,21,34...\n\nStep through each value. You start with 0 and 1. 0 + 1 = 1, so you add 1 to the sequence. 1 + 1 = 2, so 2 is added. 1 + 2 = 3, so 3. 2 + 3 = 5, et cetera. <br>\n\nYou could represent these numbers as Python list, and it would look something like this:\n\n    fib_seq = []\n    fib_seq[0] = 0\n    fib_seq[1] = 1\n    fib_seq[2] = 1\n    fib_seq[3] = 2\n    fib_seq[4] = 3\n    fib_seq[5] = 5\n    fib_seq[6] = 8\n    fib_seq[7] = 13\n    fib_seq[8] = 21\n    fib_seq[9] = 34\n\nWe can generate this sequence using an iterative method (with loops):\n\n    function getFib(position) {\n      if (position == 0) { return 0; }\n      if (position == 1) { return 1; }\n      var first = 0,\n          second = 1,\n          next = first + second;\n      for (var i = 2; i < position; i++) {\n        first = second;\n        second = next;\n        next = first + second;\n      }\n      return next;\n    }\nIn the quiz, you'll be implementing `get_fib()` in a recursive way."
              },
              "question": {
                "title": "Recursion Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "7887875800",
                "initial_code_files": [
                  {
                    "text": "\"\"\"Implement a function recursively to get the desired\nFibonacci sequence value.\nYour code should have the same input/output as the \niterative code in the instructions.\"\"\"\n\ndef get_fib(position):\n    return -1\n\n# Test cases\nprint get_fib(9)\nprint get_fib(11)\nprint get_fib(0)\n",
                    "name": "algorithmsP6.py"
                  }
                ]
              },
              "answer": {
                "text": "Here's the recursive solution:\n\n    def get_fib(position):\n        if position == 0 or position == 1:\n            return position\n        return get_fib(position - 1) + get_fib(position - 2)\n    \nIsn't that elegant? We took a short function and managed to write it in even fewer lines! <br>\n\nApparently Google thinks recursion is pretty cool too—if you search for \"recursion\" in Google's search engine, the first thing that pops up is \"Did you mean: recursion\". Don't get stuck in an infinite loop continuously searching \"recursion\"!\n\nYou may have noticed that this solution will compute the values of some inputs more than once. For example  `get_fib(4)` calls `get_fib(3)` and `get_fib(2)`, `get_fib(3)` calls `get_fib(2)` and `get_fib(1)` etc. The number of recursive calls grows exponentially with `n`.\n \nIn practice if we were to use recursion to solve this problem we should use a hash table to store and fetch previously calculated results.  This will increase the space needed but will drastically improve the runtime efficiency.",
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                }
              }
            }
          ]
        },
        {
          "id": 57651,
          "key": "71226940110923",
          "title": "Intro to Sorting",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71226940110923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 122182,
              "key": "7122694011",
              "title": "Intro to Sorting",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "Z6yuIen71zM",
                "china_cdn_id": "Z6yuIen71zM.mp4"
              }
            }
          ]
        },
        {
          "id": 137089,
          "key": "71181444620923",
          "title": "Bubble Sort",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71181444620923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 123428,
              "key": "7118144462",
              "title": "Bubble Sort",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "h_osLG3GmjE",
                "china_cdn_id": "h_osLG3GmjE.mp4"
              }
            }
          ]
        },
        {
          "id": 53798,
          "key": "71191848070923",
          "title": "Efficiency of Bubble Sort",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71191848070923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 122190,
              "key": "7119184807",
              "title": "Efficiency of Bubble Sort",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "KddkHygi7is",
                "china_cdn_id": "KddkHygi7is.mp4"
              }
            }
          ]
        },
        {
          "id": 41450,
          "key": "79132405320923",
          "title": "Bubble Sort Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "79132405320923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 136472,
              "key": "7913240532",
              "title": "Bubble Sort Practice",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "7913240532",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": null,
                "text": "Sorting techniques can be tricky—sometimes the best way to understand them is to watch a visual of a sorting algorithm in action again and again. When I was first learning sorting, I used to check out the [Wikipedia page](https://en.wikipedia.org/wiki/Bubble_sort) for each sort. There's normally some colorful illustration near the top, then a GIF showing the sort in action. There are plenty of other visualizations on the World Wide Web—take the time to look around if you need it!"
              },
              "question": {
                "title": "Bubble Sort Quiz",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/Q3iry_KDz9TW71uVDTGcg6zJ25D5ZSWDkEVYFrvAz9zpMuEdZg92BxjkXKn15XSqlKjR7jrqTIZ_j_h69iE=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7913240532",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "7910014174",
                "widgets": [
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio1",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.3089346945137157,
                      "y": 0.5312153547671841
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio2",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.309830891521197,
                      "y": 0.6279794900221729
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio3",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.30934382793017456,
                      "y": 0.7250900776053215
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio4",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.3086619389027431,
                      "y": 0.8197062084257206
                    }
                  }
                ]
              },
              "answer": {
                "text": "If you struggled, examine what the array looks like at each iteration:\n\n    [21, 4, 1, 3, 9, 20, 25, 6, 21, 14] (Original Array)\n    [4, 1, 3, 9, 20, 21, 6, 21, 14, 25] (1)\n    [1, 3, 4, 9, 20, 6, 21, 14, 21, 25] (2)\n    [1, 3, 4, 9, 6, 20, 14, 21, 21, 25] (3)\n    [1, 3, 4, 6, 9, 14, 20, 21, 21, 25] (4)",
                "video": null
              }
            }
          ]
        },
        {
          "id": 134050,
          "key": "71509523140923",
          "title": "Merge Sort",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71509523140923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 97219,
              "key": "7150952314",
              "title": "Merge Sort",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "K916wfSzKxE",
                "china_cdn_id": "K916wfSzKxE.mp4"
              }
            }
          ]
        },
        {
          "id": 72178,
          "key": "71254347930923",
          "title": "Efficiency of Merge Sort",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71254347930923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 97205,
              "key": "7125434793",
              "title": "Efficiency of Merge Sort",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "HKiK5Y-YSkk",
                "china_cdn_id": "HKiK5Y-YSkk.mp4"
              }
            }
          ]
        },
        {
          "id": 73242,
          "key": "78825770750923",
          "title": "Merge Sort Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78825770750923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 112479,
              "key": "7882577075",
              "title": "Merge Sort Practice",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "7882577075",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": null,
                "text": "Sorting is pretty tedious—take a break and check out [this comic](https://xkcd.com/1185/) inspired by merge sort. <br>\n\nYou can learn more about merge sort, as well as see many more visualizations, in the online [*Algorithms* textbook](http://algs4.cs.princeton.edu/22mergesort/). This book is often nice for a more in-depth analysis of topics, but beware—all of the examples are in Java! For merge sort, it's particularly worth reading up on top-down and bottom-up merge sort."
              },
              "question": {
                "title": "Merge Sort Quiz",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/RMK_nUIEzGf25lW3iJsi5A0ex_PJfWyXtkEvKkMPqwJjJBk8apD0-hxKSoT03HxqDj_YfKGgPFy1J9tZSQ=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7882577075",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "7881207114",
                "widgets": [
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio1",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.3099867518703242,
                      "y": 0.5327397450110865
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio2",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.3084086658354115,
                      "y": 0.6284298780487805
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio3",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.3099088216957606,
                      "y": 0.7223531042128604
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio4",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.3099672693266833,
                      "y": 0.8200180155210643
                    }
                  }
                ]
              },
              "answer": {
                "text": "Depending on the way you design your merge sort, you could get a few different solutions, but this was the answer:\n\n    [21, 4, 1, 3, 9, 20, 25] (Original Array)\n    [21, 1, 4, 3, 9, 20, 25] (1)\n    [1, 4, 21, 3, 9, 20, 25] (2)\n    [1, 3, 4, 9, 20, 21, 25] (3)",
                "video": null
              }
            }
          ]
        },
        {
          "id": 37814,
          "key": "71181150370923",
          "title": "Quick Sort",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71181150370923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 121831,
              "key": "7118115037",
              "title": "Quick Sort",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "kUon6854joI",
                "china_cdn_id": "kUon6854joI.mp4"
              }
            }
          ]
        },
        {
          "id": 71296,
          "key": "71183251400923",
          "title": "Efficiency of Quick Sort",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71183251400923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 131811,
              "key": "7118325140",
              "title": "Efficiency of Quick Sort",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "aMb5GHPGQ1U",
                "china_cdn_id": "aMb5GHPGQ1U.mp4"
              }
            }
          ]
        },
        {
          "id": 17506,
          "key": "78868166210923",
          "title": "Quick Sort Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78868166210923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 346552,
              "key": "6108eb23-ed4f-4397-9e4a-79d6842b01e9",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "6108eb23-ed4f-4397-9e4a-79d6842b01e9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6690134983573504",
                "initial_code_files": [
                  {
                    "text": "\"\"\"Implement quick sort in Python.\nInput a list.\nOutput a sorted list.\"\"\"\ndef quicksort(array):\n    return []\n\ntest = [21, 4, 1, 3, 9, 20, 25, 6, 21, 14]\nprint quicksort(test)",
                    "name": "alg_quicksort.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 346551,
              "key": "c74bc123-4a95-4e5a-84d9-8bdd6e3aef3c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Congrats on getting through three different types of sorts! You should also investigate some of the other famous sorting algorithms. You can watch all of them in action [here](http://visualgo.net/en/sorting/) (and see a coding solution too).",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    }
  ]
}