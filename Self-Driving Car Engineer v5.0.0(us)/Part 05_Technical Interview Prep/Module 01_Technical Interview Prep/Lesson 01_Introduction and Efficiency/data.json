{
  "data": {
    "lesson": {
      "id": 138709,
      "key": "7174469398",
      "title": "Introduction and Efficiency",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Begin the section on data structures and algorithms, including Python and efficiency practice.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/7174469398/138709/1517077433310/Introduction%20and%20Efficiency%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/7174469398/138709/1517077414520/Introduction%20and%20Efficiency%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 41931,
          "key": "71212749920923",
          "title": "Course Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71212749920923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 97192,
              "key": "7121274992",
              "title": "Course Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "NKBUbUiedzc",
                "china_cdn_id": "NKBUbUiedzc.mp4"
              }
            }
          ]
        },
        {
          "id": 132606,
          "key": "78885717720923",
          "title": "Course Outline",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78885717720923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 138942,
              "key": "7888571772",
              "title": "Course Outline",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "I hope you're ready to get started! Below is the outline for this course—each section will include some mix of videos, text explanations, Python examples, and practice questions. The mix of formats will keep each bit of information interesting and digestible. Feel free to post in the forums if you have questions!\n\n\n1. **Introduction and Efficiency**\n    * Course Introduction\n    * Syntax\n    * Efficiency\n    * Notation of Efficiency\n2. **List-Based Collections**\n    * Lists/Arrays\n    * Linked Lists\n    * Stacks\n    * Queues\n3. **Searching and Sorting**\n    * Binary Search\n    * Recursion\n    * Bubble Sort\n    * Merge Sort\n    * Quick Sort\n4. **Maps and Hashing**\n    * Maps\n    * Hashing\n    * Collisions\n    * Hashing Conventions\n5. **Trees**\n    * Trees\n    * Tree Traversal\n    * Binary Trees\n    * Binary Search Trees\n    * Heaps\n    * Self-Balancing Trees\n6. **Graphs**\n    * Graphs\n    * Graph Properties\n    * Graph Representation\n    * Graph Traversal\n    * Graph Paths\n7. **Case Studies in Algorithms**\n    * Shortest Path Problem\n    * Knapsack Problem\n    * Traveling Salesman Problem\n8. **Technical Interview Tips**\n    * Mock Interview Breakdown\n    * Additional Tips\n    * Practice with Pramp\n    * Next Steps",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 22312,
          "key": "78896797102589030923",
          "title": "Course Expectations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78896797102589030923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 104727,
              "key": "7889679710258903",
              "title": "Course Expectations",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7889679710258903",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "Course Expectations",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/VCnIOIcbh-1CLqectT3EQre63BnfApzdDa7OLo2CgyZhbtLxdoorZtPjr1RV_H7j9sUqVyF72RXexlHx6iXI=s0#w=1920&h=1200",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7889679710258903",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "7889679710",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": true,
                    "tabindex": null,
                    "placement": {
                      "height": 0.2616407982261641,
                      "width": 0.8391521197007481,
                      "x": 0.08176823566084788,
                      "y": 0.583009977827051
                    }
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 94577,
          "key": "71234649090923",
          "title": "Syntax",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71234649090923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 137691,
              "key": "7123464909",
              "title": "Syntax",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "08M93RaBSgU",
                "china_cdn_id": "08M93RaBSgU.mp4"
              }
            }
          ]
        },
        {
          "id": 54414,
          "key": "80025032460923",
          "title": "Python Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "80025032460923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 25468,
              "key": "8002503246",
              "title": "Python Practice",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "8002503246",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                },
                "text": "Please check off the following topics to confirm that you already understand them! You're only expected to understand the basics of how to manipulate them—details about usage will be explained later if needed. If anything looks unfamiliar, you can check out one of our [introductory Python classes](https://www.udacity.com/course/programming-foundations-with-python--ud036). This course will also default to [Python 2](https://docs.python.org/2/) where applicable, though it's very similar to [Python 3](https://docs.python.org/3/)!\n\n### Comments\n\n    # This is a one-line Python comment - code blocks are so useful!\n    \"\"\"This type of comment is used to document the purpose of functions and classes.\"\"\"\n    \n### Declaration/Initialization\n\n    # Remember values, not variables, have data types.\n    # A variable can be reassigned to contain a different data type.\n    answer = 42\n    answer = \"The answer is 42.\"\n    \n### Data Types\n\n    boolean = True\n    number = 1.1\n    string = \"Strings can be declared with single or double quotes.\"\n    list = [\"Lists can have\", 1, 2, 3, 4, \"or more types together!\"]\n    tuple = (\"Tuples\", \"can have\", \"more than\", 2, \"elements!\")\n    dictionary = {'one': 1, 'two': 2, 'three': 3}\n    variable_with_zero_data = None\n    \n### Simple Logging\n\n    print \"Printed!\"\n    \n### Conditionals\n\n    if cake == \"delicious\":\n        return \"Yes please!\"\n    elif cake == \"okay\":\n        return \"I'll have a small piece.\"\n    else:\n        return \"No, thank you.\"\n        \n### Loops\n\n    for item in list:\n        print item\n\n    while (total < max_val):\n        total += values[i]\n        i += 2\n        \n### Functions\n\n    def divide(dividend, divisor):\n        quotient = dividend / divisor\n        remainder = dividend % divisor\n        return quotient, remainder\n        \n    def calculate_stuff(x, y):\n        (q, r) = divide(x,y)\n        print q, r\n  \n### Classes\n\n    class Person(object):\n        def __init__(self, name, age):\n            self.name = name\n            self.age = age \n            \n        def birthday(self):\n            self.age += 1\n\nYou shouldn't need to run Python code outside the classroom, so don't worry if you don't have a development environment set up!\n"
              },
              "question": {
                "title": "Python Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "7959277588",
                "initial_code_files": [
                  {
                    "text": "\"\"\"You can use this class to represent how classy someone\nor something is.\n\"Classy\" is interchangable with \"fancy\".\nIf you add fancy-looking items, you will increase\nyour \"classiness\".\nCreate a function in \"Classy\" that takes a string as\ninput and adds it to the \"items\" list.\nAnother method should calculate the \"classiness\"\nvalue based on the items.\nThe following items have classiness points associated\nwith them:\n\"tophat\" = 2\n\"bowtie\" = 4\n\"monocle\" = 5\nEverything else has 0 points.\nUse the test cases below to guide you!\"\"\"\n\nclass Classy(object):\n    def __init__(self):\n        self.items = []\n\n# Test cases\nme = Classy()\n\n# Should be 0\nprint me.getClassiness()\n\nme.addItem(\"tophat\")\n# Should be 2\nprint me.getClassiness()\n\nme.addItem(\"bowtie\")\nme.addItem(\"jacket\")\nme.addItem(\"monocle\")\n# Should be 11\nprint me.getClassiness()\n\nme.addItem(\"bowtie\")\n# Should be 15\nprint me.getClassiness()",
                    "name": "alg_python_practice.py"
                  }
                ]
              },
              "answer": {
                "text": "Here's the solution:\n\n    class Classy(object):\n        def __init__(self):\n            self.items = []\n\n        def addItem(self, item):\n            self.items.append(item)\n\n        def getClassiness(self):\n            classiness = 0\n            if len(self.items) > 0:\n                for item in self.items:\n                    if item == \"tophat\":\n                        classiness += 2\n                    elif item == \"bowtie\":\n                        classiness += 4\n                    elif item == \"monocle\":\n                        classiness += 5\n            return classiness\n\nIf you thought that quiz was really hard, you likely won't be able to understand the coding examples ahead. The videos are all language agnostic, meaning you don't need to know about a particular coding language to understand them, so you should still be able to watch the videos!",
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                }
              }
            }
          ]
        },
        {
          "id": 94578,
          "key": "79010286550923",
          "title": "Python: The Basics",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "79010286550923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 58277,
              "key": "7901028655",
              "title": "Python: The Basics",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "7901028655",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": null,
                "text": "Please check off the following topics to confirm that you already understand them! You're only expected to understand the basics of how to manipulate them—details about usage will be explained later if needed. If anything looks unfamiliar, you can check out one of our [introductory Python classes](https://www.udacity.com/course/programming-foundations-with-python--ud036). This course will also default to [Python 2](https://docs.python.org/2/) where applicable, though it's very similar to [Python 3](https://docs.python.org/3/)!\n\n### Comments\n\n    # This is a Python comment - code blocks are so useful!\n    \n### Declaration/Initialization\n\n    # Remember values, not variables, have data types.\n    # A variable can be reassigned to contain a different data type.\n    answer = 42\n    answer = \"The answer is 42.\"\n    \n### Data Types\n\n    boolean = True\n    number = 1.1\n    string = \"Strings can be declared with single or double quotes.\"\n    list = [\"Lists can have\", 1, 2, 3, 4, \"or more types together!\"]\n    tuple = (\"Tuples\", \"can have\", \"more than\", 2, \"elements!\")\n    dictionary = {'one': 1, 'two': 2, 'three': 3}\n    variable_with_zero_data = None\n    \n### Simple Logging\n\n    print \"Printed!\"\n    \n### Conditionals\n\n    if cake == \"delicious\":\n        return \"Yes please!\"\n    elif cake == \"okay\":\n        return \"I'll have a small piece.\"\n    else:\n        return \"No, thank you.\"\n        \n### Loops\n\n    for item in list:\n        print item\n    while (total < max_val):\n        total += values[i]\n        i += 2\n        \n### Functions\n\n    def divide(dividend, divisor):\n        quotient = dividend / divisor\n        remainder = dividend % divisor\n        return quotient, remainder\n        \n    def calculate_stuff(x, y):\n        (q, r) = divide(x,y)\n        print q, r\n  \n### Classes\n\n    class Person:\n        def __init__(self, name, age):\n            self.name = name\n            self.age = age \n            \n        def birthday():\n            self.age += 1\n\nYou shouldn't need to run Python code outside the classroom, so don't worry if you don't have a development environment set up!\n"
              },
              "question": {
                "title": "Python: The Basics Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "7863766310",
                "initial_code_files": [
                  {
                    "text": "# Write a function called \"show_excitement\" where the string\n# \"I am super excited for this course!\" is returned exactly\n# 5 times, where each sentence is separated by a single space.\n# Return the string with \"return\".\n# You can only have the string once in your code.\n# Don't just copy/paste it 5 times into a single variable!\n\n\ndef show_excitement():\n    # Your code goes here!\n    return \"\"\n\nprint show_excitement()",
                    "name": "algorithmP1.py"
                  }
                ]
              },
              "answer": {
                "text": "If you thought that quiz was really hard, you likely won't be able to understand the coding examples ahead. The videos are all language agnostic, meaning you don't need to know about a particular coding language to understand them, so you should still be able to watch the videos!",
                "video": null
              }
            }
          ]
        },
        {
          "id": 55578,
          "key": "71213347930923",
          "title": "Efficiency",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71213347930923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 137676,
              "key": "7121334793",
              "title": "Efficiency",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "I-RASDPbDrI",
                "china_cdn_id": "I-RASDPbDrI.mp4"
              }
            }
          ]
        },
        {
          "id": 115059,
          "key": "71201055390923",
          "title": "Notation Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71201055390923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 137662,
              "key": "7120105539",
              "title": "Notation Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "At 2:07 I say \"since **2** is the number of letters in our input string\". I mean \"since **n** is the number of letters in our input string\".\n\nAlso, don't worry about immediately understanding all of the notation examples at 0:45—they'll be explained soon or in later lessons!",
              "video": {
                "youtube_id": "xHwIU4j3gBc",
                "china_cdn_id": "xHwIU4j3gBc.mp4"
              }
            }
          ]
        },
        {
          "id": 115120,
          "key": "71163649850923",
          "title": "Notation Continued",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71163649850923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 97212,
              "key": "7116364985",
              "title": "Notation Continued",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "ZeGnkrKZWBQ",
                "china_cdn_id": "ZeGnkrKZWBQ.mp4"
              }
            }
          ]
        },
        {
          "id": 25243,
          "key": "71191553790923",
          "title": "Worst Case and Approximation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71191553790923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 97164,
              "key": "7119155379",
              "title": "Worst Case and Approximation",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Note that anything that can be approximated to O(n) can be said to occur \"in linear time\". If you plotted n = y on a graph, it would be a line. You can read about other possible time complexities [here](https://en.wikipedia.org/wiki/Time_complexity#Table_of_common_time_complexities).",
              "video": {
                "youtube_id": "ZYcmui02J40",
                "china_cdn_id": "ZYcmui02J40.mp4"
              }
            }
          ]
        },
        {
          "id": 17523,
          "key": "78896814660923",
          "title": "Efficiency Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78896814660923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 27314,
              "key": "7889681466",
              "title": "Efficiency Practice",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "7889681466",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                },
                "text": "Below are some examples of functions in Python. Look at each and take note of the time efficiency. Then, in the quiz, enter those values using the correct notation. Use approximations wherever possible!\n\n    \"\"\"input manatees: a list of \"manatees\", where one manatee is represented by a dictionary\n    a single manatee has properties like \"name\", \"age\", et cetera\n    n = the number of elements in \"manatees\"\n    m = the number of properties per \"manatee\" (i.e. the number of keys in a manatee dictionary)\"\"\"\n\n    def example1(manatees):\n        for manatee in manatees:\n            print manatee['name']\n\n    def example2(manatees):\n        print manatees[0]['name']\n        print manatees[0]['age']\n\n    def example3(manatees):\n        for manatee in manatees:\n            for manatee_property in manatee:\n                print manatee_property, \": \", manatee[manatee_property]\n\n    def example4(manatees):\n        oldest_manatee = \"No manatees here!\"\n        for manatee1 in manatees:\n            for manatee2 in manatees:\n                if manatee1['age'] < manatee2['age']:\n                    oldest_manatee = manatee2['name']\n                else:\n                    oldest_manatee = manatee1['name']\n        print oldest_manatee\n"
              },
              "question": {
                "title": "Efficiency Practice Quiz",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/TIrRIONZIbfh6ZUvlYvH05CaExhps1vbKyYQPn8dekp5xrZnfSGtPs7VdxU8Xx3rN2iu2-6EaGgIWPVmRr0=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7889681466",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "7883232307",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.1197339246119734,
                      "width": 0.256857855361596,
                      "x": 0.5296329488778054,
                      "y": 0.282185421286031
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text2",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.11751662971175167,
                      "width": 0.256857855361596,
                      "x": 0.5293601932668329,
                      "y": 0.44529517738359203
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text3",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.1197339246119734,
                      "width": 0.256857855361596,
                      "x": 0.5287951995012469,
                      "y": 0.6089246119733924
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text4",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.11751662971175167,
                      "width": 0.25561097256857856,
                      "x": 0.5298082917705735,
                      "y": 0.774390243902439
                    }
                  }
                ]
              },
              "answer": {
                "text": "Here are the answers and explanations:\n\n### Example 1\n\nWe iterate over every `manatee` in the `manatees` list with the for loop. Since we're given that `manatees` has n elements, our code will take approximately O(n) time to run.\n\n### Example 2\n\nWe look at two specific properties of a specific `manatee`. We aren't iterating over anything - just doing constant-time lookups on lists and dictionaries. Thus the code will complete in constant, or O(1), time.\n\n### Example 3\n\nThere are two for loops, and nested for loops are a good sign that you need to multiply two runtimes. Here, for every `manatee`, we check every property. If we had 4 `manatees`, each with 5 properties, then we would need 5+5+5+5 steps. This logic simplifies to the number of `manatees` times the number of properties, or O(nm).\n\n### Example 4\n\nAgain we have nested for loops. This time we're iterating over the `manatees` list twice - every time we see a `manatee`, we compare it to every other `manatee`'s age. We end up with O(nn), or O(n^2) (which is read as \"n squared\").\n\nThroughout the course, you can reference the [Big-O Cheat Sheet](http://bigocheatsheet.com/) to keep track of time complexities for many of the algorithms and data structures we study.",
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                }
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    }
  ]
}