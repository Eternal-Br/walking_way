WEBVTT
Kind: captions
Language: ja-JP

00:00:00.630 --> 00:00:04.179
クイズの例では 計算では
結果が 1.0になるはずですが

00:00:04.179 --> 00:00:07.184
コードでは 0.95です

00:00:07.184 --> 00:00:09.119
これは 大きな違いです

00:00:09.119 --> 00:00:12.179
ここで 10億を
1に 置き換えたとすると

00:00:12.179 --> 00:00:14.890
誤差は
とても小さい値に なります

00:00:14.890 --> 00:00:17.660
この 大きな損失関数の
計算に 含まれる値を

00:00:17.660 --> 00:00:22.379
大きすぎず 小さすぎない値に
したいと 思います

00:00:23.379 --> 00:00:28.489
目安として 適切なのは
可能な限り 変数の 平均が ゼロ

00:00:28.489 --> 00:00:31.349
そして分散が 等分散になるように することです

00:00:31.350 --> 00:00:34.250
最適化を行う際に
平均を およそゼロにし 分散を

00:00:34.250 --> 00:00:39.109
等分散にすることには
数値的な メリットだけでなく

00:00:39.109 --> 00:00:42.200
計算上の理由も
あります

00:00:42.200 --> 00:00:45.109
問題の条件が 悪いと
最適化の際に

00:00:45.109 --> 00:00:48.409
あちこちを 探し回らないと
よい解が 見つかりません

00:00:48.409 --> 00:00:51.029
問題の条件が よければ

00:00:51.030 --> 00:00:53.079
最適化の 処理は
はるかに 楽になります

00:00:53.079 --> 00:00:55.809
画像を 扱っている場合は
単純です

00:00:55.810 --> 00:00:59.050
画像の ピクセル値を 取得します
通常は

00:00:59.049 --> 00:00:59.759
0～255です

00:00:59.759 --> 00:01:03.829
128を 引いて
128で 割るだけです

00:01:03.829 --> 00:01:07.659
画像の内容は 変わりませんが
最適化の際の 数値処理が

00:01:07.659 --> 00:01:09.409
はるかに 簡単になります

00:01:10.599 --> 00:01:13.780
また 重みと
バイアスを 初期化して

00:01:13.780 --> 00:01:16.879
勾配降下法を 進めるのに
適した状態にします

00:01:16.879 --> 00:01:20.459
よい初期値を 見つけるための スキームには
優れたものが たくさんあります

00:01:20.459 --> 00:01:23.989
ここでは 単純で 一般的な
方法を 取り上げたいと 思います

00:01:23.989 --> 00:01:27.899
ガウス分布に従う 重みを
ランダムに描きます

00:01:27.900 --> 00:01:29.140
平均はゼロ 標準偏差は σです

00:01:30.230 --> 00:01:34.350
σの値によって 最適化の

00:01:34.349 --> 00:01:37.549
初期点の 指標が
決まります

00:01:37.549 --> 00:01:41.829
さらに softmaxがあるため 指標により

00:01:41.829 --> 00:01:45.560
初期確率分布の
尖度も決まります

00:01:45.560 --> 00:01:49.350
σが大きければ 分布の
ピークが 大きくなり

00:01:49.349 --> 00:01:51.399
かなり独断的に なります

00:01:51.400 --> 00:01:54.710
σが小さければ
分散は 非常に不確かな

00:01:54.709 --> 00:01:55.339
ものになります

00:01:55.340 --> 00:01:58.980
普通は 不確かな
分散で 始めて

00:01:58.980 --> 00:02:02.540
トレーニングを 進めながら
最適化の 信頼性を 高めるのが 妥当です

00:02:02.540 --> 00:02:05.230
そのため 最初は 小さいσを 使います

00:02:05.230 --> 00:02:05.790
さて これで

00:02:05.790 --> 00:02:09.879
クラシファイ（識別器）の トレーニングに 必要な
ものが 揃いました

00:02:09.879 --> 00:02:13.537
トレーニングデータは
平均 ゼロと

00:02:13.538 --> 00:02:15.270
単位分散で 正規化しました

00:02:15.270 --> 00:02:20.230
それに ランダムな重みで 初期化した
大規模な 行列を かけました

00:02:20.229 --> 00:02:24.409
softmaxと
クロスエントロピー損失を 適用し

00:02:24.409 --> 00:02:29.409
トレーニングデータ全体の
損失の平均を 求めました

00:02:29.409 --> 00:02:31.990
そして 魔法の
最適化パッケージが

00:02:31.990 --> 00:02:36.735
この損失の微分係数を
重みと バイアスに 関して 計算し

00:02:36.735 --> 00:02:40.965
微分係数とは 逆の方向に
一歩 後退します

00:02:40.965 --> 00:02:42.215
そして また最初から

00:02:42.215 --> 00:02:45.495
プロセスを 開始し
損失関数が 最小になるまで 繰り返します

