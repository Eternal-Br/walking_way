WEBVTT
Kind: captions
Language: ja-JP

00:00:00.430 --> 00:00:02.930
効率についてかなり
理解が深まったと思います

00:00:02.930 --> 00:00:06.689
2 種類のコードを見ただけで
実行時間が早いコードと

00:00:06.689 --> 00:00:09.400
遅いコードを見分けられる
ようになったかもしれませんが

00:00:09.400 --> 00:00:14.200
どちらが早くてどちらが遅いか
確実に断言したり

00:00:14.200 --> 00:00:17.660
このことを同僚や関係者に伝えるには
どうすればよいでしょうか

00:00:17.660 --> 00:00:22.330
コードの効率はビッグ O- 記法と呼ばれる
記法で説明できます

00:00:22.330 --> 00:00:25.180
初めて耳にする人にとっては
奇妙な名前に聞こえるかもしれませんが

00:00:25.180 --> 00:00:27.320
実はとても
わかりやすい名前です

00:00:28.480 --> 00:00:33.170
この記法では
毎回必ず大文字の O と

00:00:33.170 --> 00:00:36.880
括弧で括られた代数式を
記述します

00:00:36.880 --> 00:00:40.770
代数式は必ず
変数 n の数学関数になります

00:00:40.770 --> 00:00:45.230
たとえば、これらの例の
ようになります

00:00:45.230 --> 00:00:49.830
ご覧のとおり、いずれも n と
代数式を含んでいます

00:00:49.830 --> 00:00:52.000
唯一の例外はこれです

00:00:53.360 --> 00:00:56.800
しかし、この場合は 1 も該当します

00:00:56.800 --> 00:01:01.549
1 は 0n + 1 を別の方法で表記した
だけなので n があると見なせます

00:01:02.740 --> 00:01:06.500
では、この場合の代数式とは
何を意味するのでしょうか

00:01:06.500 --> 00:01:11.900
n は関数の入力の長さを
表しています

00:01:11.900 --> 00:01:15.120
たとえば、コーディングされた秘密の
メッセージと、どの文字が何に

00:01:15.120 --> 00:01:18.670
割り当てられているのかを解く暗号が
送られてきたとします

00:01:18.670 --> 00:01:22.270
そこで、暗号を使ってメッセージを
解読するために擬似コードを

00:01:22.270 --> 00:01:24.300
記述しながら解読方法を

00:01:24.300 --> 00:01:27.640
見つけようとするでしょう

00:01:28.840 --> 00:01:32.820
文字列入力を取得して
これを何度も繰り返し

00:01:32.820 --> 00:01:37.280
暗号に従って各文字を変換して
新しいメッセージを出力します

00:01:37.281 --> 00:01:42.190
擬似コードを使うことで
全体像が明らかになる場合があります

00:01:42.190 --> 00:01:42.830
次に時間効率を

00:01:42.830 --> 00:01:44.660
大まかに把握するため

00:01:44.660 --> 00:01:47.649
行の数を数えることにします

00:01:47.650 --> 00:01:50.550
関数を実行するたびに
出力文字列を作成して

00:01:50.550 --> 00:01:53.619
出力文字列を返すわけですが
これらの作業はそれぞれ 1 回のみです

00:01:54.750 --> 00:01:58.890
このことを示すために
効率に 2 を追加します

00:01:58.890 --> 00:02:00.920
これで for ループ内にある両方の行を

00:02:00.920 --> 00:02:04.520
入力に含まれる各文字に対して
実行する必要が生じます

00:02:04.520 --> 00:02:08.948
この場合、入力文字列に含まれる
文字数が 2 であり、各文字に対して

00:02:08.949 --> 00:02:13.380
実行する必要のある行が
2 つあるため 2n を追加します

00:02:13.380 --> 00:02:15.180
どうですか。行の数え方や

00:02:15.180 --> 00:02:19.490
ビッグ O- 記法による行の変換について
少しわかってきたでしょうか

00:02:19.490 --> 00:02:21.910
では、いくつか例を見てみましょう

00:02:21.910 --> 00:02:26.140
入力文字列に文字が 10 個含まれている場合
演算はこのようになり

00:02:26.140 --> 00:02:28.519
22 という値に
なります

00:02:28.520 --> 00:02:33.210
実際の効率を算出するには
コンピューターでコード 1 行を

00:02:33.210 --> 00:02:36.674
実行する時間に 22 をかけます

00:02:37.900 --> 00:02:42.120
入力文字列に含まれる数が
100 万であれば

00:02:42.120 --> 00:02:45.830
コンピューターの計算に要する時間に
200 万をかけることになります

00:02:45.830 --> 00:02:47.740
これで基礎を押さえられた
と思います

