WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:05.315
自動運転車における 最初のプロジェクトは 車線の検知でしょう

00:00:05.315 --> 00:00:06.589
なぜ そんなに重要かと 言えば

00:00:06.589 --> 00:00:09.320
車線を 検知できなかったら

00:00:09.320 --> 00:00:11.445
どこを走ればいいか わからないからです

00:00:11.445 --> 00:00:13.349
皆さんは きっと車線に 注意を払っていないでしょう

00:00:13.349 --> 00:00:15.240
でも 自動運転車エンジニアになれば

00:00:15.240 --> 00:00:16.580
すぐに仲良しに なるはずです

00:00:16.579 --> 00:00:22.019
車線は どこを走るべきか 知らせてくれますコンピュータービジョンとは 何か

00:00:22.019 --> 00:00:24.094
私たちが 車を運転するときは

00:00:24.094 --> 00:00:28.094
体のどの器官よりも 目を 多く使って 何をすべきか 判断します

00:00:28.094 --> 00:00:31.699
コンピュータービジョンは それと同じ能力を コンピューターで 実現します

00:00:31.699 --> 00:00:34.409
カメラを使い そのカメラ画像から 車線や

00:00:34.409 --> 00:00:37.214
他の車両などを 抽出する方法を 私たちは 開発しました

00:00:37.215 --> 00:00:39.180
すごく 楽しいですよ

00:00:39.179 --> 00:00:42.155
ディープラーニングは シリコンバレーで 最もホットな分野の 1つになり

00:00:42.155 --> 00:00:46.149
自動運転車に 大規模に 利用されています

00:00:46.149 --> 00:00:51.619
私たちは トレーニングを通じて ニューラルネットワークに 交通標識や 画像を 識別させようとしています

00:00:51.920 --> 00:00:56.730
行動クローニングでは 学習プログラムが ステアリング操作や

00:00:56.729 --> 00:01:00.599
ブレーキ操作 ペダル操作などの 人間行動を 模倣して クローンを作成します

00:01:00.600 --> 00:01:02.865
これは 皆さんにも 試してもらいます

00:01:02.865 --> 00:01:04.350
相手が 人間なら

00:01:04.349 --> 00:01:06.000
ルールを与えて トレーニングするのではなく

00:01:06.000 --> 00:01:07.980
例を与えて 自分で学習させます

00:01:07.980 --> 00:01:09.180
そこで このユニットでは

00:01:09.180 --> 00:01:10.920
ニューラルネットワーク つまりディープラーニングを

00:01:10.920 --> 00:01:13.230
カメラ画像に適用して 自動運転車に

00:01:13.230 --> 00:01:16.295
実行させたいことを 実行します

00:01:16.295 --> 00:01:20.635
皆さんを センサーフュージョンの世界に 連れて行くのが 楽しみです

00:01:20.635 --> 00:01:25.975
センサーフュージョンとは 何かそれは 異なる種類の センサーを 統合する科学です

00:01:25.974 --> 00:01:28.349
自動運転車は LIDARや

00:01:28.349 --> 00:01:29.849
レーダー そして

00:01:29.849 --> 00:01:34.979
カメラを装備し 内蔵センサーには ジャイロスコープや 慣性計測装置が あります

00:01:34.980 --> 00:01:37.650
センサーフュージョンとは さまざまな様式から

00:01:37.650 --> 00:01:41.230
1つの 明瞭な画像を 作り上げる科学です

00:01:41.239 --> 00:01:48.119
ローカライゼーションとは 車が 世界との相対で どこにあるかを 特定することです

00:01:48.120 --> 00:01:50.750
なぜ重要かと いうと これから 見ていくとおり

00:01:50.750 --> 00:01:53.849
膨大な 詳細情報を使って 周囲の地図を 作成するわけですが

00:01:53.849 --> 00:01:55.859
そこには ロボットには 見えないものも 含まれます

00:01:55.859 --> 00:01:57.075
どこに 危険が 潜んでいるか

00:01:57.075 --> 00:01:59.579
歩行者は 道のどこを 渡ることが 多いか

00:01:59.579 --> 00:02:01.959
地図の 意味を 理解するために

00:02:01.959 --> 00:02:04.679
ロボットは 地図上での 自分の位置を 正確に把握しなければなりません

00:02:04.680 --> 00:02:07.090
センサーデータの整合や

00:02:07.090 --> 00:02:09.439
地図における 現在位置

00:02:09.439 --> 00:02:11.829
それが ローカライゼーションを 構成します

00:02:11.830 --> 00:02:15.240
パスプランニングは 迷路の中で 有効なステップや

00:02:15.240 --> 00:02:19.439
アクションのシーケンスを 見つけるための科学です

00:02:19.439 --> 00:02:22.250
たとえば マンハッタン南にいても 町を横断したかったら

00:02:22.250 --> 00:02:24.490
地図を 見つけて

00:02:24.490 --> 00:02:28.820
どの道を たどれば 反対側に 着くか 調べなければなりません

00:02:28.819 --> 00:02:33.840
そういった アクションのシーケンスを パスプランニングアルゴリズムが 見つけてくれるのです

00:02:33.840 --> 00:02:35.664
都市部でのナビゲーションにも 使えれば

00:02:35.664 --> 00:02:38.000
たとえば 駐車場内での

00:02:38.000 --> 00:02:40.490
ナビゲーションにも 使えます

00:02:40.759 --> 00:02:45.794
次は 制御という とてもおもしろい世界を のぞいてみましょう

00:02:45.794 --> 00:02:49.079
技術的に 言えば 制御とは

00:02:49.080 --> 00:02:52.710
車のステアリングやアクセルペダルそしてブレーキペダルを

00:02:52.710 --> 00:02:56.730
与えられた目的に沿って 操作する コンピュータープログラムです

00:02:56.729 --> 00:02:58.500
たとえば 道路の中央を 走り続けたいとします

00:02:58.500 --> 00:03:01.080
車が走り始めて しばらくすると 左にそれてきます

00:03:01.080 --> 00:03:03.390
そのとき コントローラーが

00:03:03.389 --> 00:03:06.029
「よし ハンドルを 少し右に切って

00:03:06.030 --> 00:03:09.175
 修正しよう」と 決めるわけです

00:03:09.175 --> 00:03:10.585
ささいなことの ように思えますが

00:03:10.585 --> 00:03:13.360
実際には へまを しかねない場面です

00:03:13.849 --> 00:03:18.780
これで 最も エキサイティングな ステップに進む 準備ができました

00:03:18.780 --> 00:03:24.129
自分のコードを 実際の自動車に 組み込んで カリフォルニアの道路を 走るのですこわいですか?

00:03:24.129 --> 00:03:25.655
まあ ちょっと こわいですよね

00:03:25.655 --> 00:03:28.289
でも 本当に ワクワクします  なぜなら

00:03:28.289 --> 00:03:31.079
実際の自動車のために 実際の ソフトウェアを書くことほど

00:03:31.080 --> 00:03:35.200
完璧な学習方法は 他にありませんからでは やってみましょう

