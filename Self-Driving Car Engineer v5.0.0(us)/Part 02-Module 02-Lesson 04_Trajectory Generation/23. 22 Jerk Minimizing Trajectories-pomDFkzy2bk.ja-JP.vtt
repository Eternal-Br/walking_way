WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:02.334
トラジェクトリーを最小化する Jerk とは何ですか?

00:00:02.334 --> 00:00:05.429
興味深くて役立つ事実は

00:00:05.429 --> 00:00:09.820
1D で jerk の最適なトラジェクトリーを計算することは相対的に簡単だということです

00:00:09.820 --> 00:00:15.464
実際に 時間 0 ～tf の t の関数 s の違いを考えてみます

00:00:15.464 --> 00:00:19.679
また jerk が位置に 3 番目に関連していることをリコールします

00:00:19.679 --> 00:00:22.289
このトラジェクトリーの期間中の累積した jerk の合計は この方程式で

00:00:22.289 --> 00:00:25.699
提供されます

00:00:25.699 --> 00:00:30.269
また ここでは正と負の両方の jerk を分析します

00:00:30.269 --> 00:00:33.719
そのため jerk の 2 乗を見ていきます

00:00:33.719 --> 00:00:39.015
問題は この積分の最小値関数 t の s を見つけることです

00:00:39.015 --> 00:00:41.670
最小値を見つけるために必要な計算をしていくと

00:00:41.670 --> 00:00:45.329
S を jerk の最小値にするには0 にならないといけないのに

00:00:45.329 --> 00:00:49.469
s の微分はいつも 6 以上になることがわかりました

00:00:49.469 --> 00:00:52.844
関数についての役立つ事実も使用できます

00:00:52.844 --> 00:00:59.909
それは どの関数もこのように記述されるまたはこのくらいコンパクトに記述されるということです

00:00:59.909 --> 00:01:02.969
s のこの形式を使って

00:01:02.969 --> 00:01:07.575
時間で微分した情報に追加すると これがわかります

00:01:07.575 --> 00:01:09.269
係数はすべて 5 か 0 より大きいです

00:01:09.269 --> 00:01:13.920
これは すべての最小限の jerk トラジェクトリーはこのように

00:01:13.920 --> 00:01:18.390
 5 個の多項式で表されることを意味します

00:01:18.390 --> 00:01:22.560
この方程式には6つの係数がありますこの6つの係数は6つの調整可能なパラメータを意味し、

00:01:22.560 --> 00:01:24.780
1次元のトラジェクトリーの形状を定義することができます

00:01:24.780 --> 00:01:28.674
1D で jerk の最適なトラジェクトリーを計算することは相対的に簡単だということです

00:01:28.674 --> 00:01:34.054
実際には トラジェクトリーの境界条件を指定するために使用します

00:01:34.055 --> 00:01:37.740
制約したいことは 初期位置の速度と加速度

00:01:37.739 --> 00:01:43.859
および最終位置の速度と加速度です

00:01:43.859 --> 00:01:48.780
これは変位の縦方向の位置を表す1Dです

00:01:48.780 --> 00:01:52.144
でも 横方向の移動と同じものが適用されます

00:01:52.144 --> 00:01:55.589
s と d で自動車の動きを定義します

00:01:55.590 --> 00:01:59.490
動きを定義するために選択する 12 変数を提供します

00:01:59.489 --> 00:02:02.459
自動車の初期ステートは

00:02:02.459 --> 00:02:06.750
境界条件 t = 0 の緯度と経度を提供します

00:02:06.750 --> 00:02:09.960
また終了境界条件を選ぶことができます

00:02:09.960 --> 00:02:14.445
ここからここまで車が動くというシンプルな場合での

00:02:14.444 --> 00:02:17.879
横方向のトラジェクトリーがどのようなものかの構想をお見せします

00:02:17.879 --> 00:02:19.500
また 初期と最後の横方向の速度と加速度が 0 という

00:02:19.500 --> 00:02:23.969
簡略化した仮定を作成します

00:02:23.969 --> 00:02:26.064
それは車線変更には合理的です

00:02:26.064 --> 00:02:29.099
そして すべての境界条件はこのようになります

00:02:29.099 --> 00:02:34.394
この 1D 問題の 0 でない量だけが最終の横方向移動です

00:02:34.395 --> 00:02:37.260
これらのトラジェクトリーがどのように見えるのかを確認してみましょう

00:02:37.259 --> 00:02:40.334
これは 1D の動きということを覚えておいてください

00:02:40.335 --> 00:02:42.810
ここの X 軸は時間で

00:02:42.810 --> 00:02:47.835
その車線変更をするので Y 軸は自動車の横方向の位置です

00:02:47.835 --> 00:02:54.875
F と T は最終の横方向移動とトラジェクトリーの時間です

00:02:54.875 --> 00:02:56.175
= 0 で

00:02:56.175 --> 00:02:58.155
位置が 0 であることがわかります

00:02:58.155 --> 00:03:02.129
スロープは 0 です そのため 速度も今は 0 で 加速度も同じく 0 です

00:03:02.129 --> 00:03:04.844
同じように 最終位置の場合は = 10 です

00:03:04.844 --> 00:03:06.659
この曲線はとてもなめらかです

00:03:06.659 --> 00:03:11.250
でも 速度と加速度を見ていきましょう

00:03:11.250 --> 00:03:14.610
これらの曲線のすべてが意味あるものではないかもしれませんが

00:03:14.610 --> 00:03:17.345
ここで発生したことを振り返ってみましょう

00:03:17.344 --> 00:03:22.020
いくつかの質問で たどり着きたい位置とそれにかける時間を指定しました

00:03:22.020 --> 00:03:26.865
そして とてもきれいなトラジェクトリーを取得できました

00:03:26.865 --> 00:03:30.405
それはとても素晴らしいです その理由は

00:03:30.405 --> 00:03:34.435
再現するようにドライバーにたずねても 多くのドライバーは快適レベルに達しないからです

00:03:34.435 --> 00:03:37.650
では T を下げてもっと速く目的地にたどり着こうとしたら

00:03:37.650 --> 00:03:40.890
何が起こるか見てみましょう

00:03:40.889 --> 00:03:42.959
もちろん 徐々にトラジェクトリーを見つけることもできますが

00:03:42.960 --> 00:03:45.510
それはもっと大変です

00:03:45.509 --> 00:03:49.049
このメソッドまたは境界条件の与えられたセットの jerk 最適化を使用して

00:03:49.050 --> 00:03:53.295
トラジェクトリーを生成しましたが

00:03:53.294 --> 00:03:56.250
これらの条件にとても依存しているということを認識することは重要です

00:03:56.250 --> 00:04:01.050
そのため 今後幅広くこれらの終了条件を選ぶことが重要になるでしょう

00:04:01.050 --> 00:04:04.260
では これらの境界条件を満たすために

00:04:04.259 --> 00:04:08.329
この 6 つの係数がどうなるかをどのように計算したかをお見せします

