WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:04.000
次にお見せしたいアルゴリズムは Hybrid A* と呼ばれています

00:00:04.000 --> 00:00:06.455
Hybrid A* を説明するために

00:00:06.455 --> 00:00:10.245
別のクラス用にセバスチャンが作成したビデオをお見せしようと思います

00:00:10.244 --> 00:00:13.439
そのあと A*について回答した

00:00:13.439 --> 00:00:16.699
 Hybrid A* に関する同じ質問を尋ねます

00:00:16.699 --> 00:00:20.265
それではロボットパスプランニングまたはロボットモーションプランニングについて お話ししましょう

00:00:20.265 --> 00:00:23.050
それ自体が非常に奥が深い分野であるため

00:00:23.050 --> 00:00:26.355
関連する全ての項目の完全な調査結果を伝えることができません

00:00:26.355 --> 00:00:29.455
でも 前にもお話ししたように プランニングでカギとなる違いの 1 つは

00:00:29.454 --> 00:00:33.539
連続です

00:00:33.539 --> 00:00:36.939
たとえば 世界を離散化する A* について読みました

00:00:36.939 --> 00:00:38.655
ゴールの場所があったり

00:00:38.655 --> 00:00:41.534
障害があったりするかもしれません

00:00:41.534 --> 00:00:45.019
 A* は有効なアクションの順序はこのような感じかもしれません

00:00:45.020 --> 00:00:48.345
これはプランニング問題には有効なソリューションですが

00:00:48.344 --> 00:00:51.475
車はこれらの個々の選択にはついていけません

00:00:51.475 --> 00:00:54.329
ここには とても繊細な曲がり角がいくつかあります

00:00:54.329 --> 00:00:58.125
これは車の動きだけでは解決できません

00:00:58.125 --> 00:01:00.840
ここでの基本的な問題は A* は

00:01:00.840 --> 00:01:04.182
 離散で ロボット工学の世界では継続します

00:01:04.182 --> 00:01:05.439
よって 出てくる質問は

00:01:05.439 --> 00:01:08.745
A* はその本質のままで

00:01:08.745 --> 00:01:12.770
可能性のある実行可能なパスを提供できるのかということです

00:01:12.769 --> 00:01:16.045
これはロボットモーションプランニングではとても大きな質問です

00:01:16.045 --> 00:01:19.320
また この 1 つの例についてだけお話し

00:01:19.319 --> 00:01:23.069
無意味な証明に挑戦してこの問題を解決するために行ったことをお見せします

00:01:23.069 --> 00:01:28.704
 A* でこれを解決するカギは 状態遷移関数を使って行わなければなりません

00:01:28.704 --> 00:01:31.950
このようなセルにいるとします

00:01:31.950 --> 00:01:36.555
個々の状態は前の数式を引き続き使用して

00:01:36.555 --> 00:01:39.240
小さいステップのシミュレーションの順序をやってみます

00:01:39.239 --> 00:01:43.679
その後 ここの状態は それ自体は 次の離散状態の端のちょうどここになることがわかります

00:01:43.680 --> 00:01:46.230
グリッドセルでこれを想定する代わりに

00:01:46.230 --> 00:01:51.165
 Hybrid A* というアルゴリズムは 正確な X の素数 Y の素数 θ の素数を暗記し

00:01:51.165 --> 00:01:53.730
 ここでグリッドセルに関連付けて

00:01:53.730 --> 00:01:56.835
はじめてここでグリッドセルが展開されます

00:01:56.834 --> 00:01:58.974
その後 セルから展開するとき

00:01:58.974 --> 00:02:03.594
ここで特定の出発点を使用して 次のセルがどこになるかを見つけます

00:02:03.594 --> 00:02:06.900
ここで A* で取得するために使用した同じセルは

00:02:06.900 --> 00:02:11.175
X Y および θ の異なる連続するポリメリゼーションに入りますが

00:02:11.175 --> 00:02:14.280
 A* では長いパスを見る前に 一番短いパスで

00:02:14.280 --> 00:02:17.914
セルを展開しようとしたので

00:02:17.914 --> 00:02:22.060
ここを削除しただけではなく ここにもう一度と考えることもありませんでした

00:02:22.060 --> 00:02:25.920
完成するまでの欠陥につながるかもしれません

00:02:25.919 --> 00:02:28.109
これが捉えられなかったナビゲーション問題に対する

00:02:28.110 --> 00:02:30.740
ソリューションがあるかもしれないが

00:02:30.740 --> 00:02:33.159
それは正しさを与えてくれます

00:02:33.159 --> 00:02:35.444
モーションの方程式が正しい限り

00:02:35.444 --> 00:02:37.864
結果のパスは実行できます

00:02:37.865 --> 00:02:39.600
ここに補足事項があります

00:02:39.599 --> 00:02:41.969
これは概算で このモーションの方程式が

00:02:41.969 --> 00:02:44.844
正しいかどうかという点だけが正しいです

00:02:44.844 --> 00:02:48.389
そうはいっても すべてのパスはよくて

00:02:48.389 --> 00:02:50.309
スムーズで 曲がったパスです

00:02:50.310 --> 00:02:52.650
グリッドセルを展開するといつでも

00:02:52.650 --> 00:02:56.069
このグリッドセルで X の素数 Y の素数 θ の素数の連続値を

00:02:56.069 --> 00:02:58.289
明確に暗記します

