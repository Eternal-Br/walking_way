WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.280
现在 在绝大多数情况下

00:00:02.280 --> 00:00:04.360
行为层也许不会发送

00:00:04.360 --> 00:00:10.450
一个要到达的精确最终配置 而是像这样的一个大概配置

00:00:10.450 --> 00:00:14.630
因此 我们想要确认一个变化的目标状态 这个状态在一个大概的最终配置中

00:00:14.630 --> 00:00:20.925
引导我们的车辆 它将把我们的车辆带到这里 另一条车道上

00:00:20.925 --> 00:00:23.865
现在 这就是我们的基于抽样算法派得上用场的地方

00:00:23.865 --> 00:00:27.855
我们并不确切知道最终状态如何

00:00:27.855 --> 00:00:32.535
即使我们从行为层获取到精确的 S 和 D 坐标

00:00:32.535 --> 00:00:36.280
我们仍然不得不找出一个合适的最终速度和加速度

00:00:36.280 --> 00:00:39.820
大多数情况下 S 和 D 并不是固定值

00:00:39.820 --> 00:00:43.690
因此 我们需要抽样大量的最终配置

00:00:43.690 --> 00:00:47.915
这些配置在我们希望到达的目标位置附近

00:00:47.915 --> 00:00:50.340
然后我们为每个目标配置

00:00:50.340 --> 00:00:53.135
生成对应的 Jerk 最小化轨迹

00:00:53.135 --> 00:00:56.470
接着 我们丢弃所有不可行驶轨迹

00:00:56.470 --> 00:00:59.380
这些轨迹与道路边界存在碰撞

00:00:59.380 --> 00:01:04.065
或者预测层预测它们会撞上其他车辆和行人

00:01:04.065 --> 00:01:09.360
现在 我们得到了一些与开始以及结束配置相关的可行驶轨迹 

00:01:09.360 --> 00:01:15.435
这些轨迹不会产生碰撞 并且在每一维度上都是 Jerk 优化的

00:01:15.435 --> 00:01:19.760
现在我们需要决定车辆走哪一条

00:01:19.760 --> 00:01:21.675
这意味着我们要给它们排一下序

00:01:21.675 --> 00:01:24.785
我们可以通过定义一个成本函数来完成排序工作

00:01:24.785 --> 00:01:27.195
成本函数会考虑哪些方面？

00:01:27.195 --> 00:01:28.740
首先 它会考虑 Jerk

00:01:28.740 --> 00:01:31.530
对于每一对最终配置

00:01:31.530 --> 00:01:33.975
都有一个 Jerk 优化的5次多项式

00:01:33.975 --> 00:01:38.520
但是鉴于轨迹是由不同的最终配置生成的

00:01:38.520 --> 00:01:41.090
也许其中会有一些轨迹好于其他轨迹

00:01:41.090 --> 00:01:42.420
此外

00:01:42.420 --> 00:01:46.070
我们还需要考虑纵向和横向 Jerk

00:01:46.070 --> 00:01:48.025
对于乘客舒适感而言 哪种更不好一些？

00:01:48.025 --> 00:01:52.085
事实证明 横向的 Jerk 让人更不舒服

00:01:52.085 --> 00:01:56.960
因此我们会优先考虑横向 Jerk 最小化的轨迹

00:01:56.960 --> 00:02:00.075
下一步 我们还要考虑与障碍物的距离

00:02:00.075 --> 00:02:02.180
拿这两个配置来说

00:02:02.180 --> 00:02:04.350
我们更喜欢离别的车辆远一点的轨迹

00:02:04.350 --> 00:02:09.585
而不是紧紧跟在别的车辆后面的轨迹

00:02:09.585 --> 00:02:13.425
还有 我们还要考虑与道路中线的距离

00:02:13.425 --> 00:02:16.860
我们或许更喜欢靠近道路中线

00:02:16.860 --> 00:02:20.385
因此 在这两种场景中做选择时

00:02:20.385 --> 00:02:23.200
也许我们会更偏爱右边的这个

00:02:23.200 --> 00:02:25.475
最后 车辆开始行驶

00:02:25.475 --> 00:02:29.070
所有其他值都一样地给了最终的 S

00:02:29.070 --> 00:02:34.360
我们更希望早点到达目标而不是晚点

00:02:34.360 --> 00:02:36.480
因此我们可能更加偏爱这个情况

00:02:36.480 --> 00:02:40.290
你可能会想到大量的其他成本函数

00:02:40.290 --> 00:02:44.280
这里的关键在于合理地平衡这些成本

00:02:44.280 --> 00:02:46.305
常见的情况是 我们的多个目标会发生冲突

00:02:46.305 --> 00:02:48.235
所以 横向 Jerk 最小化的轨迹

00:02:48.235 --> 00:02:53.020
不一定是一条让我们持续靠近车道中线的轨迹

00:02:53.020 --> 00:02:58.425
实践中 最困难的工作大部分都在平衡这些成本函数的细节中

00:02:58.425 --> 00:03:00.810
现在 我们已经定义了所有这些成本函数

00:03:00.810 --> 00:03:03.525
并把他们结合进一个权重成本函数

00:03:03.525 --> 00:03:06.720
我们可以回到我们刚才的场景

00:03:06.720 --> 00:03:10.885
并使用这些成本函数来计算每条轨迹的成本

00:03:10.885 --> 00:03:13.830
例如 这条轨迹看起来还不错

00:03:13.830 --> 00:03:16.710
但是 它和车道边界过于接近

00:03:16.710 --> 00:03:18.220
更重要的是

00:03:18.220 --> 00:03:21.110
它和另一辆行驶的车辆过于接近

00:03:21.110 --> 00:03:22.800
我们讲过 当我们查看到障碍物的距离时

00:03:22.800 --> 00:03:26.730
我们需要考虑车辆的所有维度

00:03:26.730 --> 00:03:30.730
这里 我们和另一辆车靠得太近 相当危险

00:03:30.730 --> 00:03:35.530
因此 我们将把这条轨迹和高成本相关联

00:03:35.530 --> 00:03:37.980
类似地 我们也不喜欢这两条轨迹

00:03:37.980 --> 00:03:41.535
因为它们使我们不得不靠着车道边缘行驶

00:03:41.535 --> 00:03:45.345
在这个场景中 并没有理由这么做

00:03:45.345 --> 00:03:48.600
所以 它们也将和高成本相关联

00:03:48.600 --> 00:03:51.110
至于这两条轨迹

00:03:51.110 --> 00:03:55.020
它们还可以 但是和它们相关联的横向 Jerk  

00:03:55.020 --> 00:04:00.350
高于那些拥有更大 S 值的轨迹

00:04:00.350 --> 00:04:04.410
因此 他们将和一个中等成本相关联

00:04:04.410 --> 00:04:06.960
现在 考虑最后这条轨迹

00:04:06.960 --> 00:04:08.120
看起来不错 非常平滑

00:04:08.120 --> 00:04:10.105
没有急转弯

00:04:10.105 --> 00:04:12.703
最终我们沿着道路继续行驶

00:04:12.703 --> 00:04:16.210
没有一个成本函数返回一个较高值

00:04:16.210 --> 00:04:18.510
就这样 当我们把它们综合起来

00:04:18.510 --> 00:04:23.000
这条轨迹成本更低 最终我们会选择这一条

