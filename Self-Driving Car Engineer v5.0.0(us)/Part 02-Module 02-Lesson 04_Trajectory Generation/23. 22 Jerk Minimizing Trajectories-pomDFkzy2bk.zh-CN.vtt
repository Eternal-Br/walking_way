WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.334
什么是一条 “jerk minimizing” 轨迹？

00:00:02.334 --> 00:00:05.429
对我们而言 一个有趣并有用的事实是

00:00:05.429 --> 00:00:09.820
在单个维度上计算一条 Jerk 优化的轨迹是相对容易的

00:00:09.820 --> 00:00:15.464
事实上 考虑一个有关时间 t 的函数 s 从时间点0到 tf 

00:00:15.464 --> 00:00:19.679
并且回想一下 jerk 是与位置相关的第三个参数

00:00:19.679 --> 00:00:22.289
所以在沿着这条轨迹行驶过程中累计的总 jerk 量

00:00:22.289 --> 00:00:25.699
由这个等式确定

00:00:25.699 --> 00:00:30.269
这里 我们想要分析正面的和负面的 jerk

00:00:30.269 --> 00:00:33.719
因此 我们将要看看总的直角 jerk

00:00:33.719 --> 00:00:39.015
我们的问题是 找出一个函数 s 该函数最小化这个成份

00:00:39.015 --> 00:00:41.670
如果我们查看与找出最小值相关的数学上的东西

00:00:41.670 --> 00:00:45.329
大家会发现 如果要让 s 成为 jerk 最小化的

00:00:45.329 --> 00:00:49.469
那么 s 的所有时间导数必须为0

00:00:49.469 --> 00:00:52.844
现在 我们可以应用一个有关函数的非常有用的特性

00:00:52.844 --> 00:00:59.909
那就是 所有函数可以写成这样 或者更简洁地写成这样

00:00:59.909 --> 00:01:02.969
如果我们把 s 写成这样

00:01:02.969 --> 00:01:07.575
并且加入我们已知的它的时间导数 那么结果是这样

00:01:07.575 --> 00:01:09.269
所有的系数都大于5 或者为0

00:01:09.269 --> 00:01:13.920
这意味着所有的 jerk 最小化轨迹

00:01:13.920 --> 00:01:18.390
都可以表示为一个这样的5次多项式

00:01:18.390 --> 00:01:22.560
大家可以看到 这个等式有6个系数

00:01:22.560 --> 00:01:24.780
6个系数意味着6个可调参数

00:01:24.780 --> 00:01:28.674
我们可以使用这些参数来定义某个一维轨迹的形状

00:01:28.674 --> 00:01:34.054
事实上 我们使用它们来指定轨迹的边界条件

00:01:34.055 --> 00:01:37.740
我们想要将约束的对象包括 最初位置 速度 加速度

00:01:37.739 --> 00:01:43.859
以及 最终位置 速度 加速度

00:01:43.859 --> 00:01:48.780
现在 这只是纵向移动的一维展示

00:01:48.780 --> 00:01:52.144
但是 横向移动同样适用

00:01:52.144 --> 00:01:55.589
这样 我们就有了12个变量

00:01:55.590 --> 00:01:59.490
来完整定义车辆随时间的运动

00:01:59.489 --> 00:02:02.459
我们车辆的最初状态

00:02:02.459 --> 00:02:06.750
纵向和横向边界条件 t 等于 0

00:02:06.750 --> 00:02:09.960
我们也可以选择最终的边界条件

00:02:09.960 --> 00:02:14.445
我会向大家展示一个小例子 显示出横向轨迹是什么样子的

00:02:14.444 --> 00:02:17.879
这里 一辆车从这里移动到这里

00:02:17.879 --> 00:02:19.500
我们做个简化

00:02:19.500 --> 00:02:23.969
假定最初和最终横向速度和加速度均为0

00:02:23.969 --> 00:02:26.064
这在变道操作中是合理的

00:02:26.064 --> 00:02:29.099
然后 所有的边界条件看起来是这样的

00:02:29.099 --> 00:02:34.394
这里唯一的非零值是最终的横向位移

00:02:34.395 --> 00:02:37.260
我们继续看一些此类轨迹

00:02:37.259 --> 00:02:40.334
记住 这是一个一维运动

00:02:40.335 --> 00:02:42.810
X 轴代表时间

00:02:42.810 --> 00:02:47.835
Y 轴代表车辆在变道时候的横向位置

00:02:47.835 --> 00:02:54.875
F 代表最终横向位移 T 代表轨迹的持续时间

00:02:54.875 --> 00:02:56.175
大家可以看到 在0时刻

00:02:56.175 --> 00:02:58.155
位置值为0

00:02:58.155 --> 00:03:02.129
坡度为0 所以速度和加速度也为0

00:03:02.129 --> 00:03:04.844
同样地 在最后为10的位置

00:03:04.844 --> 00:03:06.659
这条曲线看起来非常平滑

00:03:06.659 --> 00:03:11.250
但是 现在我们看看速度和加速度随时间的变化情况

00:03:11.250 --> 00:03:14.610
虽然并非所有这些曲线大家都能看明白

00:03:14.610 --> 00:03:17.345
大家来回想一下 刚才我们都做了些什么

00:03:17.344 --> 00:03:22.020
在一些方程式中 我们指定了一个目标位置 指定了一个到达时间

00:03:22.020 --> 00:03:26.865
最后 我们得出了一条看起来很不错的轨迹

00:03:26.865 --> 00:03:30.405
这条轨迹的确非常棒 如果你请一些司机沿着这条轨迹行驶

00:03:30.405 --> 00:03:34.435
很多人并不能行驶得和轨迹完全吻合

00:03:34.435 --> 00:03:37.650
现在 如果我们想更快到达目的地 因此我们把时间值 T 调小

00:03:37.650 --> 00:03:40.890
我们来看一下 会发生什么情况

00:03:40.889 --> 00:03:42.959
当然 我们仍然可以得到一条轨迹

00:03:42.960 --> 00:03:45.510
但是它会非常颠簸

00:03:45.509 --> 00:03:49.049
有一点非常重要 尽管我们使用 Jerk优化法加一些边界条件

00:03:49.050 --> 00:03:53.295
生成了轨迹

00:03:53.294 --> 00:03:56.250
它们仍然重度依赖于这些条件

00:03:56.250 --> 00:04:01.050
因此 在未来 明智地选择这些最终条件是非常重要的

00:04:01.050 --> 00:04:04.260
现在 我将向大家展示

00:04:04.259 --> 00:04:08.329
我是如何计算6个系数以满足这些边界条件的

