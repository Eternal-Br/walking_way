WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.339
接下来不久我就会请大家来实现一个多项式解算器

00:00:02.339 --> 00:00:06.399
用来生成 “Jerk 最小化” 的轨迹

00:00:06.400 --> 00:00:09.759
但是现在 我想先为大家展示一下解算器是如何使用的

00:00:09.759 --> 00:00:12.419
我们先考虑一下这些 S 坐标

00:00:12.419 --> 00:00:16.364
作为输入 它包含了当前车辆状态

00:00:16.364 --> 00:00:19.604
目标状态 以及过程数据

00:00:19.605 --> 00:00:21.225
而作为输出

00:00:21.225 --> 00:00:23.415
它将生成6个系数

00:00:23.414 --> 00:00:28.780
这些系数唯一标定了描述纵向轨迹的多项式

00:00:28.780 --> 00:00:32.189
同样 我们的解算器接受横向配置的相关输入参数

00:00:32.189 --> 00:00:36.719
然后解算出横向轨迹

00:00:36.719 --> 00:00:40.634
我们可以在如下环境中使用该方法

00:00:40.634 --> 00:00:43.684
道路上有车流 这里有一辆无人驾驶汽车

00:00:43.685 --> 00:00:48.450
假设该车的是目标行为是超过前面那辆车

00:00:48.450 --> 00:00:50.858
如果使用多项式轨迹生成算法

00:00:50.857 --> 00:00:53.609
我们获取该车当前配置 速度 加速度

00:00:53.609 --> 00:00:56.774
作为初始状态

00:00:56.774 --> 00:01:01.439
然后我们标定一个有效的目标状态 该状态将使该车到达另一条车道

00:01:01.439 --> 00:01:04.454
我们把这些状态数据输入多项式解算器

00:01:04.454 --> 00:01:07.885
同时输入的还有期望的换道过程

00:01:07.885 --> 00:01:11.100
然后 我们就会得到一条通向目标的 “Jerk 最小化” 轨迹

