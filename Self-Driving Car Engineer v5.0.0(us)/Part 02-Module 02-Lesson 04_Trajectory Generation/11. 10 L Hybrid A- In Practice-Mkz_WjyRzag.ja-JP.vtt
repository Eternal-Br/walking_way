WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:01.879
Hybrid A*に関する最初のビデオでは

00:00:01.879 --> 00:00:05.339
私たちが使用した更新した方程式はほとんどのXYフィールド構成空間において

00:00:05.339 --> 00:00:09.434
一般的なものでした

00:00:09.435 --> 00:00:13.210
特に、Omegaがなんであるかは特定しません

00:00:13.210 --> 00:00:15.990
オメガは、変化の進行率です

00:00:15.990 --> 00:00:17.760
一部のロボットでは

00:00:17.760 --> 00:00:22.355
そのステートの ω を独立して指定できる場合があります

00:00:22.355 --> 00:00:27.734
しかし ロボットはその Z 軸を制約なしで回転できるという意味になります

00:00:27.734 --> 00:00:30.945
でも自動車には これはあまり現実的ではありません

00:00:30.945 --> 00:00:34.055
 自転車モデルを使用した方がいいでしょう

00:00:34.055 --> 00:00:38.489
これは このような ω の方程式ができます

00:00:38.490 --> 00:00:42.289
ここの L は前と後ろの間の距離

00:00:42.289 --> 00:00:47.325
δ は ステアリング角度で ⱴ は一定の正の速度です

00:00:47.325 --> 00:00:49.080
では Hybrid A* アルゴリズムの場合

00:00:49.079 --> 00:00:54.469
オープンセットに追加するために どのコンフィギュレーションが現在考えているノードから

00:00:54.469 --> 00:00:57.769
到達可能か決定しなければなりません

00:00:57.770 --> 00:01:00.900
実際に 左のスチール最大角度と右のスチール最大角度の間から

00:01:00.899 --> 00:01:05.909
ステアリング角度を使用してみます

00:01:05.909 --> 00:01:10.890
ただし 異なる Δ を追加すればするほど アルゴリズムが完了するのに時間がかかります

00:01:10.890 --> 00:01:12.465
よって この例では

00:01:12.465 --> 00:01:15.885
Δを選択するために 3 つの角度のみを選択します

00:01:15.885 --> 00:01:18.150
最大左操舵角 ゼロ操舵角

00:01:18.150 --> 00:01:22.230
及び最大右操舵角です

00:01:22.230 --> 00:01:27.130
自動車がタイヤを最大 35 度回転できる場合は

00:01:27.129 --> 00:01:32.515
これらの角度は -35 0 35 になります

00:01:32.515 --> 00:01:36.689
直進 左に曲がる 右に曲がるの

00:01:36.689 --> 00:01:41.364
3 つの新しいモーションプリミティブのある検索ツリーを展開できるようになります

00:01:41.364 --> 00:01:44.349
ロボット迷路でどうなるか やってみましょう

00:01:44.349 --> 00:01:46.390
このような迷路があるとします

00:01:46.390 --> 00:01:50.689
赤い四角がゴールで これがスタート地点です

00:01:50.689 --> 00:01:54.530
最初に行うことは このセルをオープンリストに追加することです

00:01:54.530 --> 00:01:57.359
それをグレーで示します

00:01:57.359 --> 00:01:59.730
そして 3 つのトラジェクトリーを作成します

00:01:59.730 --> 00:02:01.410
1 つは直進

00:02:01.409 --> 00:02:03.504
次が右に曲がる

00:02:03.504 --> 00:02:05.324
最後に左に曲がるです

00:02:05.325 --> 00:02:10.824
この場合では 地図から出てしまったり 衝突するトラジェクトリーなどは考えません

00:02:10.824 --> 00:02:14.414
これで新しいセルが 1 つ開け

00:02:14.414 --> 00:02:20.185
チェックマークがついている最初のセルを閉じます

00:02:20.185 --> 00:02:25.074
今は オープンセルは 1 つだけなので 次のセルも展開します

00:02:25.074 --> 00:02:28.274
ここでもう一度このステージで 3 つのトラジェクトリーを作成します

00:02:28.275 --> 00:02:29.825
その中の 1 つは実行不可能なので

00:02:29.824 --> 00:02:31.959
それのことは忘れましょう

00:02:31.960 --> 00:02:34.935
そして これにより 2 つの新しいセルが開けます

00:02:34.935 --> 00:02:37.275
前のセルを閉じます

00:02:37.275 --> 00:02:40.254
ここでは 展開するセルには 2 つの選択があります

00:02:40.254 --> 00:02:43.930
ゴールに近くなるヒューリックの値があると想定して

00:02:43.930 --> 00:02:45.960
右側のセルを選んで

00:02:45.960 --> 00:02:49.885
この新しいステートからトラジェクトリーを作成します

00:02:49.884 --> 00:02:51.734
これらのすべてのステップで どのように

00:02:51.735 --> 00:02:53.340
トラックを残しているか見てください

00:02:53.340 --> 00:02:55.020
今どこのセルにいるかというだけではなく

00:02:55.020 --> 00:03:00.750
方向も含めて自分がいたセルがどこかというのも残しています

00:03:00.750 --> 00:03:05.875
実際に ヘッディングも含め 3 つの状態スペースを使用することもできます

00:03:05.875 --> 00:03:09.849
それをしなかった場合 はやくにセルを閉じてしまうようです

00:03:09.849 --> 00:03:12.299
ビジュアライズすることは難しいので

00:03:12.300 --> 00:03:14.980
ここではそのようにはやっていません

00:03:14.979 --> 00:03:19.144
それでは続けていきましょう3 つの新しいセルが開いています

00:03:19.145 --> 00:03:21.540
前のセルを閉じなければなりません

00:03:21.539 --> 00:03:25.319
オープンセルのセットのベストオプションを見つけて繰り返します

00:03:25.319 --> 00:03:29.219
また オープンリストに追加する新しい 3 つのセルを残しています

00:03:29.219 --> 00:03:30.859
そのため 前のセルを閉じることができ

00:03:30.860 --> 00:03:34.695
ここはちょっとおもしろくなってきました

00:03:34.694 --> 00:03:37.379
ヒューリスティックは おそらく一番下の右のセルを開いて

00:03:37.379 --> 00:03:41.079
そこからトラジェクトリーを作成するよう提案します

00:03:41.080 --> 00:03:43.990
でも今回は すべて壁にぶつかってしまいます

00:03:43.990 --> 00:03:48.300
よって オープンセットに新しいセルを追加する必要はありません

00:03:48.300 --> 00:03:52.897
このセルを展開したので 閉じてチェックマークを付けます

00:03:52.896 --> 00:03:56.159
そして 残りのオープンセルを見ていきます

00:03:56.159 --> 00:03:57.914
前と同じように

00:03:57.914 --> 00:03:59.429
一番ゴールに近いセルに行き

00:03:59.430 --> 00:04:01.405
トラジェクトリーを生成します でも全部ぶつかるので

00:04:01.405 --> 00:04:04.390
そのセルは閉じます

00:04:04.389 --> 00:04:06.731
残りのオープンセルの

00:04:06.731 --> 00:04:12.275
この右上のが一番近いセルか 一番いいヒューリスティックのセルです

00:04:12.275 --> 00:04:14.159
ゴールにたどり着くまで

00:04:14.159 --> 00:04:19.259
ずっとプロセスを繰り返していきます

00:04:19.259 --> 00:04:22.050
では 一部のクラスターを取り除いて

00:04:22.050 --> 00:04:25.775
実際のこのトラジェクトリーを見ていきましょう

00:04:25.774 --> 00:04:28.729
私たちが残しているのは連続的なパスであり

00:04:28.730 --> 00:04:33.360
プランニング問題に一番スムーズな解決法ではないかもしれません

00:04:33.360 --> 00:04:36.270
本当に 結果パスが人間のドライバーが

00:04:36.269 --> 00:04:39.089
この状況で通るパスと比べてあまりよくない環境の例は

00:04:39.089 --> 00:04:42.685
簡単に見つけれます

00:04:42.685 --> 00:04:44.584
これだけが問題ではありません

00:04:44.584 --> 00:04:49.889
実際にはソリューションがあるにもかかわらず だれもそれを見つけられないこともあります

00:04:49.889 --> 00:04:52.800
多と言えば アルゴリズムのステージに戻って

00:04:52.800 --> 00:04:58.454
地図が少し変わった場合にどうなるかを考えてみましょう

00:04:58.454 --> 00:05:03.699
この場合には このポイントまでは すべて同じ決定を行うと思います

00:05:03.699 --> 00:05:06.305
でも ここから この重要なセルを閉じてしまいます

00:05:06.305 --> 00:05:09.959
明らかに ゴールにたどり着くパスはあります

00:05:09.959 --> 00:05:11.859
でも これらの状況では

00:05:11.860 --> 00:05:13.925
Hybrid A* は見つけれません

00:05:13.925 --> 00:05:17.960
グリッドの解像度を増やし 進むために 3 次元を検索スペースに追加して

00:05:17.959 --> 00:05:22.949
この問題が起こる可能性を減らすことができます

00:05:22.949 --> 00:05:27.564
本当にこれで すべての進行方向で この問題が発生することを回避できるだけでなく

00:05:27.564 --> 00:05:32.540
特定の範囲でこれのソリューションを見つけることもできます

