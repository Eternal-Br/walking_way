WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:03.450
モーションプランニングアルゴリズムについては 多くのクラスがあります

00:00:03.450 --> 00:00:06.190
今日は これらのクラスの 1 つに焦点を当てますが

00:00:06.190 --> 00:00:08.570
ほかのクラスについても言及します

00:00:08.570 --> 00:00:13.995
組合せ的手法は 通常 空き領域を小さな部分に分割し

00:00:13.994 --> 00:00:18.600
最初に これらの原子的要素を接続することによってモーション プランニング問題を解決します

00:00:18.600 --> 00:00:22.380
初期近似解を見つけるための非常に直感的な方法があります

00:00:22.379 --> 00:00:25.899
しかし これらの方法は 通常 大規模環境には適していません

00:00:25.899 --> 00:00:28.844
次に ポテンシャル場は反応方法ですが

00:00:28.844 --> 00:00:33.394
それぞれの障害物は一種の反重力場を作り出すことになり

00:00:33.395 --> 00:00:36.655
車両が近づくことが困難になります

00:00:36.655 --> 00:00:40.079
たとえば 歩行者や自転車の周囲でこのアイデアを使用すると

00:00:40.079 --> 00:00:45.989
計画アルゴリズムを組み込んで 離れているトラジェクトリーを見つけることができます

00:00:45.990 --> 00:00:48.630
ほとんどのポテンシャル場法の主な問題

00:00:48.630 --> 00:00:50.850
は 極小値になってしまい

00:00:50.850 --> 00:00:54.300
解決策が見つからない可能性があります

00:00:54.299 --> 00:00:58.589
最適制御は 1 つのアルゴリズムでモーション プランニング問題と

00:00:58.590 --> 00:01:01.485
制御 PoD 生成を解くことを試みることからなります

00:01:01.484 --> 00:01:05.099
車両の動的モデルを使用するか

00:01:05.099 --> 00:01:09.449
構成を開始してから構成を終了し 一連の入力を生成します

00:01:09.450 --> 00:01:12.269
たとえば 操舵目標とスロットル入力については

00:01:12.269 --> 00:01:16.239
 設定の最初から最後までガイドします

00:01:16.239 --> 00:01:20.280
燃費を最小化する制御入力に関連し、

00:01:20.280 --> 00:01:25.594
もしくは車両の設定に関連して、

00:01:25.594 --> 00:01:28.510
コスト関数を最適化する

00:01:28.510 --> 00:01:31.255
実行する良い方法が複数存在します

00:01:31.254 --> 00:01:34.609
ほとんどの方法は数値最適化法に基づいています

00:01:34.609 --> 00:01:37.439
しかしながら これらのアルゴリズムを高速に機能させるために

00:01:37.439 --> 00:01:41.405
他の車両に関連する全ての制約を

00:01:41.405 --> 00:01:44.234
十分にうまく取り込むことは困難です

00:01:44.234 --> 00:01:49.819
今日 最後に 焦点を当てるのはサンプリング ベースの方法です

00:01:49.819 --> 00:01:52.709
これらのアルゴリズムは 空き領域の定義を簡単に計算できるため

00:01:52.709 --> 00:01:57.074
非常に人気があります

00:01:57.075 --> 00:02:00.615
サンプリング ベースのメソッドは 衝突検知モジュール

00:02:00.614 --> 00:02:05.459
を使用して 空き領域を調べ 設定が干渉しているかどうかを確認します

00:02:05.459 --> 00:02:10.965
環境全体を分析する組み合わせ制御法や最適制御法とは異なり

00:02:10.965 --> 00:02:15.950
解決策を見つけるために空き領域のすべての部分を調べる必要はありません

00:02:15.949 --> 00:02:20.189
探索された部分は D *やA *のようなグラフ検索アルゴリズムで検索できる

00:02:20.189 --> 00:02:24.050
グラフ構造に格納されます

00:02:24.050 --> 00:02:28.245
方法の 2 つの主要なクラスは サンプリング ベースとして識別できます

00:02:28.245 --> 00:02:33.115
一つは より細かいコントリビューション セット または

00:02:33.115 --> 00:02:38.340
インプットをグリッドのように配置スペースの上に重ね合わせたものに依存する離散的方法です

00:02:38.340 --> 00:02:41.729
もう一つは 連続的な構成空間の確率的

00:02:41.729 --> 00:02:45.929
サンプルに依存する確率的方法です

00:02:45.930 --> 00:02:48.765
検討される可能性のある設定または状態の集合

00:02:48.764 --> 00:02:51.959
は潜在的に無限大です

00:02:51.960 --> 00:02:54.390
これらの方法のいくつかについては

00:02:54.389 --> 00:02:57.284
確率論的に完全であるという良い性質を提供します

00:02:57.284 --> 00:03:00.389
確率的最適法は

00:03:00.389 --> 00:03:03.569
十分な計算時間があれば

00:03:03.569 --> 00:03:06.194
常に解決策を見つけることを意味します

00:03:06.194 --> 00:03:08.504
存在するすべての異なる種類の計画アルゴリズムの表面

00:03:08.504 --> 00:03:11.859
には ほとんど ダメージを与えていません

00:03:11.860 --> 00:03:15.005
徹底的なリストを作成するという考えからは離れますが

00:03:15.004 --> 00:03:17.099
アルゴリズムのいくつかを調べて

00:03:17.099 --> 00:03:20.329
アルゴリズムが どのように働くかについてもっと学ぶことを強く勧めます

00:03:20.330 --> 00:03:24.600
次に Hybrid A *アルゴリズムを紹介します

00:03:24.599 --> 00:03:27.944
しかしその前に A *で以前に見たビデオを実際に見て

00:03:27.944 --> 00:03:32.500
いくつかの特性について いくつかの質問に答えることをお勧めします

