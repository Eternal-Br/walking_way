WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.879
In the first video about Hybrid A*,

00:00:01.879 --> 00:00:05.339
the update equations that we used were somewhat

00:00:05.339 --> 00:00:09.434
generic to most X Y field configuration spaces.

00:00:09.435 --> 00:00:13.210
In particular, we don't specify what Omega is.

00:00:13.210 --> 00:00:15.990
Omega is the heading rate of change.

00:00:15.990 --> 00:00:17.760
Now for some robots,

00:00:17.760 --> 00:00:22.355
it might be that we can specify any omega independently of its state.

00:00:22.355 --> 00:00:27.734
But that would mean that the robot can turn around its Z axis without constraints.

00:00:27.734 --> 00:00:30.945
For car though, this is not very realistic,

00:00:30.945 --> 00:00:34.055
and we should probably use the bicycle model.

00:00:34.055 --> 00:00:38.489
This gives us an equation for Omega like this.

00:00:38.490 --> 00:00:42.289
Here, 'L' is the distance between the front and rear axle,

00:00:42.289 --> 00:00:47.325
'δ' is the steering angle and ⱴ is the constant positive velocity.

00:00:47.325 --> 00:00:49.080
Now, for our Hybrid A* algorithm,

00:00:49.079 --> 00:00:54.469
we need to decide which configuration can be reached from the current node considered,

00:00:54.469 --> 00:00:57.769
in order to add them to the open set.

00:00:57.770 --> 00:01:00.900
In practice, we would probably use some number of

00:01:00.899 --> 00:01:05.909
steering angles between maximum left steer and maximum right steer angle.

00:01:05.909 --> 00:01:10.890
But the more different Deltas you add the longer it takes for your algorithm to complete.

00:01:10.890 --> 00:01:12.465
Therefore, in this example,

00:01:12.465 --> 00:01:15.885
we will only choose three angles to pick delta from;

00:01:15.885 --> 00:01:18.150
the maximum left steering angle,

00:01:18.150 --> 00:01:22.230
zero steering angle and the maximum right steering angle.

00:01:22.230 --> 00:01:27.130
In the case of a car that can turn its wheels 35 degrees at most,

00:01:27.129 --> 00:01:32.515
that would be -35, 0 and 35.

00:01:32.515 --> 00:01:36.689
This allows us to expand the search tree with three new motion primitives;

00:01:36.689 --> 00:01:41.364
go straight, steer left and steer right.

00:01:41.364 --> 00:01:44.349
Let's see how that works in a robot maze.

00:01:44.349 --> 00:01:46.390
Let's say we have a maze like this.

00:01:46.390 --> 00:01:50.689
The red square is the goal and this is the start position.

00:01:50.689 --> 00:01:54.530
The first thing we would do is add this cell to open list.

00:01:54.530 --> 00:01:57.359
I'll use gray to indicate that.

00:01:57.359 --> 00:01:59.730
And then we would generate three trajectories,

00:01:59.730 --> 00:02:01.410
the one for going straight,

00:02:01.409 --> 00:02:03.504
the one for turning right,

00:02:03.504 --> 00:02:05.324
the one for turning left.

00:02:05.325 --> 00:02:10.824
And in this case, we can discard the trajectories that go off the map or collide.

00:02:10.824 --> 00:02:14.414
This gives us one new cell to open, which we do,

00:02:14.414 --> 00:02:20.185
and then we mark the first cell closed which am indicating with this check-mark.

00:02:20.185 --> 00:02:25.074
Now, there is only one open cell so I choose to expend that one next.

00:02:25.074 --> 00:02:28.274
And again, I generate the three trajectories from this stage,

00:02:28.275 --> 00:02:29.825
one of them is infeasible,

00:02:29.824 --> 00:02:31.959
so let's not keep looking at it.

00:02:31.960 --> 00:02:34.935
And this leaves us with two new cells to open.

00:02:34.935 --> 00:02:37.275
I close the previous.

00:02:37.275 --> 00:02:40.254
Now there are two choices of what cell to expand.

00:02:40.254 --> 00:02:43.930
Assuming i have some heuristic that values being closer to the goal,

00:02:43.930 --> 00:02:45.960
I choose the cell on the right,

00:02:45.960 --> 00:02:49.885
and then generate trajectories from this new state.

00:02:49.884 --> 00:02:51.734
Note, how, in all these steps,

00:02:51.735 --> 00:02:53.340
I'm keeping track of,

00:02:53.340 --> 00:02:55.020
not just what cell I am in,

00:02:55.020 --> 00:03:00.750
but also where in that cell I am, including orientation.

00:03:00.750 --> 00:03:05.875
In practice, we could also use a three state space that include heading.

00:03:05.875 --> 00:03:09.849
If we don't do that, then we're likely to prematurely close cells.

00:03:09.849 --> 00:03:12.299
I'm not doing it that way here,

00:03:12.300 --> 00:03:14.980
mostly because it's harder to visualize.

00:03:14.979 --> 00:03:19.144
Let's keep going. I have three new cells to open.

00:03:19.145 --> 00:03:21.540
I have to close the previous cell,

00:03:21.539 --> 00:03:25.319
find the best option in the set of open cells and repeat.

00:03:25.319 --> 00:03:29.219
Again leaving me with three new cells to add to the open list.

00:03:29.219 --> 00:03:30.859
Which means I can close

00:03:30.860 --> 00:03:34.695
the the previous cells and things get a little more interesting here.

00:03:34.694 --> 00:03:37.379
My heuristic will probably suggest that I expand

00:03:37.379 --> 00:03:41.079
the lower right cell and generate trajectories from there.

00:03:41.080 --> 00:03:43.990
But this time, all of them would collide with the wall.

00:03:43.990 --> 00:03:48.300
Therefore, I don't need to add any new cell to the open set.

00:03:48.300 --> 00:03:52.897
Now, since I did expand this cell I have to mark it closed,

00:03:52.896 --> 00:03:56.159
and then I can look at my remaining open cells.

00:03:56.159 --> 00:03:57.914
So same as before,

00:03:57.914 --> 00:03:59.429
I take a closest cell the goal,

00:03:59.430 --> 00:04:01.405
generate trajectories, that is,

00:04:01.405 --> 00:04:04.390
that all of these collides and close that cell.

00:04:04.389 --> 00:04:06.731
Of the remaining open cells,

00:04:06.731 --> 00:04:12.275
this upper right one is closest or the one with the best heuristic.

00:04:12.275 --> 00:04:14.159
So I repeat the process,

00:04:14.159 --> 00:04:19.259
on and on, until I reach the goal.

00:04:19.259 --> 00:04:22.050
Now, let's look at what this trajectory

00:04:22.050 --> 00:04:25.775
really looks like by getting rid of some of the clutter.

00:04:25.774 --> 00:04:28.729
And what we're left with is a continuous path,

00:04:28.730 --> 00:04:33.360
that might not be the smoothest solution to our planning problem.

00:04:33.360 --> 00:04:36.270
Indeed we can easily find examples of environment,

00:04:36.269 --> 00:04:39.089
where the resulting path doesn't look very good compared to

00:04:39.089 --> 00:04:42.685
what human drivers would have done in this situation.

00:04:42.685 --> 00:04:44.584
And that's not the only problem.

00:04:44.584 --> 00:04:49.889
Sometimes, everyday stuff fails to even find the solution when one actually exists.

00:04:49.889 --> 00:04:52.800
For example, let's go back to the stage in

00:04:52.800 --> 00:04:58.454
the algorithm and consider what would happen if the map were slightly changed.

00:04:58.454 --> 00:05:03.699
In this case, we would have made all the same decisions up until this point.

00:05:03.699 --> 00:05:06.305
But now we have close this crucial cell.

00:05:06.305 --> 00:05:09.959
Clearly, there is a path to the goal that could be reached.

00:05:09.959 --> 00:05:11.859
But in these circumstances,

00:05:11.860 --> 00:05:13.925
Hybrid A* will not find any.

00:05:13.925 --> 00:05:17.960
We can reduce the likelihood of this problem by increasing the resolution of

00:05:17.959 --> 00:05:22.949
our grid or adding a third dimension to the search space for the heading.

00:05:22.949 --> 00:05:27.564
Indeed, this would allow us not to close this position in the map for all headings

00:05:27.564 --> 00:05:32.540
but only for a specific range which may allow us to find the solution in this-

