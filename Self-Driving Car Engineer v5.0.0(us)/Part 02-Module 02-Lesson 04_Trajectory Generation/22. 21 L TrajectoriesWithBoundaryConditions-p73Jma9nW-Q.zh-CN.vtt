WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.200
我们的目标是生成连续的轨迹

00:00:03.200 --> 00:00:05.270
但是如何才能做到这一点？

00:00:05.270 --> 00:00:08.715
让我们从一个原生方法开始 然后我们会变得更加现实一点

00:00:08.715 --> 00:00:13.815
假设 我们的车已经沿着道路匀速行驶了一段时间

00:00:13.815 --> 00:00:17.730
在时间-速度图上 速度 s 是一条直线

00:00:17.730 --> 00:00:19.920
因为速度恒定不变

00:00:19.920 --> 00:00:22.620
在不同时间点上 图形都是平的

00:00:22.620 --> 00:00:26.380
因为车辆一直保持在车道中间

00:00:26.380 --> 00:00:29.250
另外 请注意 我把轴稍稍调整了一下

00:00:29.250 --> 00:00:33.545
这个框的原点代表我们的当前位置 TNT

00:00:33.545 --> 00:00:36.650
结束的时候 计算机显示出效率层

00:00:36.650 --> 00:00:40.210
现在 假设不久之后我们就会驶出这条高速

00:00:40.210 --> 00:00:43.460
因此 我们想变换车道 然后到达这里

00:00:43.460 --> 00:00:47.510
在一段时间后 假设为10秒

00:00:47.510 --> 00:00:52.995
在 SNT 图上 目标点将是这里和这里

00:00:52.995 --> 00:00:56.170
停止位和起始位都是固定的

00:00:56.170 --> 00:01:00.576
它们定义了当时间 t 为0和10时 

00:01:00.576 --> 00:01:02.160
我们要生成的轨迹的边界条件

00:01:02.160 --> 00:01:04.474
如果这是我们全部的边界条件

00:01:04.474 --> 00:01:08.170
那么我们只需要考虑 s 和 t 然后生成这样的轨迹

00:01:08.170 --> 00:01:11.805
但是 事实上这些轨迹在物理上是不可行的

00:01:11.805 --> 00:01:14.040
这个坡道上的弯折将会转化为一个瞬间的急加速

00:01:14.040 --> 00:01:18.990
这个操作需要无限大的加速度才能做到

00:01:18.990 --> 00:01:22.902
如果我们把这张图输入我们的运动控制模块

00:01:22.902 --> 00:01:25.905
模块可能会沿着这条轨迹行进 不过很可能不会这么做

00:01:25.905 --> 00:01:27.765
如果模块试图走这条轨迹

00:01:27.765 --> 00:01:30.735
结果会导致车辆的急加速

00:01:30.735 --> 00:01:33.510
这种操作会让乘客非常不适 并且很危险

00:01:33.510 --> 00:01:37.465
这就是为什么我们的轨迹既要考虑连续性 又要考虑平滑性

00:01:37.465 --> 00:01:39.555
但是 多大的连续和平滑是可接受的？

00:01:39.555 --> 00:01:41.940
我们知道 我们需要位置上的连续

00:01:41.940 --> 00:01:44.065
因为我们的车并没有瞬间位移的技能

00:01:44.065 --> 00:01:48.725
如果算出的轨迹起点距我们的车10米远 那将毫无意义

00:01:48.725 --> 00:01:53.490
我们也了解 我们的车不可能瞬间改变速度

00:01:53.490 --> 00:01:56.460
因此 速度也需要连续变化

00:01:56.460 --> 00:02:00.360
同样地 我们可以推出 加速度也需要连续性

00:02:00.360 --> 00:02:05.025
也许加速度的导数也是连续的

00:02:05.025 --> 00:02:08.925
从位置推出速度 从速度推出加速度

00:02:08.925 --> 00:02:15.040
从加速度推出急刹车 然后是 急停 急转 跳跃

00:02:15.040 --> 00:02:17.610
事实上 这些量中的每一个

00:02:17.610 --> 00:02:20.590
都直接与人的舒适感相关

00:02:20.590 --> 00:02:22.155
我们来思考一下

00:02:22.155 --> 00:02:27.410
这些属性中的哪一个很高时 坐在车里的乘客会感觉不舒服？

00:02:27.410 --> 00:02:32.100
速度？ 不对 因为在高速路上行驶时 人们并不会感觉到高速不舒服

00:02:32.100 --> 00:02:36.200
相反 速度过低才让人不舒服

00:02:36.200 --> 00:02:38.218
想想飞机

00:02:38.218 --> 00:02:41.960
飞机飞得更快 但是乘客也没有不适感

00:02:41.960 --> 00:02:43.550
那会是加速度？

00:02:43.550 --> 00:02:45.630
这里有点让人迷惑

00:02:45.630 --> 00:02:50.160
我们对加速度的确敏感 不过大都是在加速度很大的情况下

00:02:50.160 --> 00:02:53.850
例如 我们都可以忍受高达 1G 的加速度

00:02:53.850 --> 00:02:58.430
这是我们乘坐一般汽车的常见情况

00:02:58.430 --> 00:02:59.940
因此 我们不能得出

00:02:59.940 --> 00:03:02.960
高加速度会导致不舒服的结论

00:03:02.960 --> 00:03:04.730
那么 是颠簸？ 

00:03:04.730 --> 00:03:08.985
没错 事实上 颠簸是人感觉不舒服的根源

00:03:08.985 --> 00:03:12.210
我们可以接受高加速度

00:03:12.210 --> 00:03:16.090
但是我们不能忍受加速度忽快忽慢不停变换 那就导致颠簸

00:03:16.090 --> 00:03:18.850
因此 在我们为无人驾驶汽车生成轨迹时

00:03:18.850 --> 00:03:21.270
我们会着重考虑 颠簸最小化 问题

