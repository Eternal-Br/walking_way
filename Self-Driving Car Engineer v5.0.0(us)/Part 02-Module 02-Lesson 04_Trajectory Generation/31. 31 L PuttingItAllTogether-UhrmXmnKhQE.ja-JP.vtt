WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:02.280
ところで 多くの場合

00:00:02.280 --> 00:00:04.360
行動レイヤーは到達するための正確な終了構成ではなく

00:00:04.360 --> 00:00:10.450
おおよそのものを送信するかもしれません

00:00:10.450 --> 00:00:14.630
そのため この他方の車線に送信されているおおよその終了構成に

00:00:14.630 --> 00:00:20.925
車両を導く 有効な目標状態を特定する必要があります

00:00:20.925 --> 00:00:23.865
これが サンプリングベースのアプローチが役立つところです

00:00:23.865 --> 00:00:27.855
良い終了状態がどのようなものであるかは明確にわかりません

00:00:27.855 --> 00:00:32.535
行動レイヤーから正確な s と d の座標を受け取ったとしても

00:00:32.535 --> 00:00:36.280
車にとって良い終了速度と加速を見つける必要があります

00:00:36.280 --> 00:00:39.820
多くの場合 s と d はどちらも固定ではありません

00:00:39.820 --> 00:00:43.690
したがって 膨大な数の終了構成が 車を運転したいおおよその

00:00:43.690 --> 00:00:47.915
目的の位置にあることをサンプリングしたいのです

00:00:47.915 --> 00:00:50.340
そして 各ゴール構成に対応した

00:00:50.340 --> 00:00:53.135
躍度最小トラジェクトリーを生成します

00:00:53.135 --> 00:00:56.470
その後 予測レイヤーによって予測された

00:00:56.470 --> 00:00:59.380
導き出せないすべてのトラジェクトリー つまり道路境界 他の車両

00:00:59.380 --> 00:01:04.065
または歩行者にぶつかるすべてのトラジェクトリーを排除します

00:01:04.065 --> 00:01:09.360
これで 導き出せるトラジェクトリーの優れたセットができました 衝突がなく スタートおよび

00:01:09.360 --> 00:01:15.435
ゴール構成に対する各次元においての最適な躍度になっているものです

00:01:15.435 --> 00:01:19.760
車がどれに従うべきか決定する必要があります

00:01:19.760 --> 00:01:21.675
つまりランク付けが必要です

00:01:21.675 --> 00:01:24.785
これはコスト関数を定義して行います

00:01:24.785 --> 00:01:27.195
コスト関数として何がわかりますか?

00:01:27.195 --> 00:01:28.740
まず 躍度を考えます

00:01:28.740 --> 00:01:31.530
終了構成の各ペアに対して

00:01:31.530 --> 00:01:33.975
5 次多項式が躍度的に最適です

00:01:33.975 --> 00:01:38.520
でも 取得されたすべてのトラジェクトリーが異なる最終構成だとすると

00:01:38.520 --> 00:01:41.090
他よりも良いものがいくつかあるかもしれません

00:01:41.090 --> 00:01:42.420
それに加えて

00:01:42.420 --> 00:01:46.070
縦方向と横方向の躍度について考えなければなりません

00:01:46.070 --> 00:01:48.025
快適性ついて よくないものは何ですか?

00:01:48.025 --> 00:01:52.085
横方向の躍度が最も不快であることがわかります

00:01:52.085 --> 00:01:56.960
ですから 縦方向の躍度の最小化よりも 横方向の躍度の最小化を優先したいのです

00:01:56.960 --> 00:02:00.075
次に障害物への距離を考えます

00:02:00.075 --> 00:02:02.180
これらの 2 つの構成を考えると

00:02:02.180 --> 00:02:04.350
他方の車両のリアバンパーのすぐ近くにある状況よりも

00:02:04.350 --> 00:02:09.585
車両からだいぶ離れているほうが良いでしょう

00:02:09.585 --> 00:02:13.425
さらに 中央線への距離も考えます

00:02:13.425 --> 00:02:16.860
きっと車線の中央に近い方がいいと思うでしょう

00:02:16.860 --> 00:02:20.385
そのため これら 2 つのシナリオから選ぶ場合は

00:02:20.385 --> 00:02:23.200
右側のものが良いと思うかもしれません

00:02:23.200 --> 00:02:25.475
最後に ゴールまでの時間です

00:02:25.475 --> 00:02:29.070
他がすべて同じで 最終の S が与えられていれば

00:02:29.070 --> 00:02:34.360
遅いよりかは早く目的地に着きたいでしょう

00:02:34.360 --> 00:02:36.480
ですからこの状況がよいと思うでしょう

00:02:36.480 --> 00:02:40.290
そして それ以外のたくさんのコスト関数が思い浮かぶでしょう

00:02:40.290 --> 00:02:44.280
複雑なのは これらのコストすべてについて正確にバランスをとることです

00:02:44.280 --> 00:02:46.305
よく 目標が対立することがあります

00:02:46.305 --> 00:02:48.235
横方向の躍度を最小化するトラジェクトリーが

00:02:48.235 --> 00:02:53.020
中央線の最も近くを維持するものではないかもしれません

00:02:53.020 --> 00:02:58.425
実際 困難な作業のほとんどが これらのコスト関数のバランスの詳細です

00:02:58.425 --> 00:03:00.810
これらコスト関数をすべて定義し

00:03:00.810 --> 00:03:03.525
これらを 1 つの重み付きのコスト関数に統合したので

00:03:03.525 --> 00:03:06.720
さきほど見たシナリオに戻り

00:03:06.720 --> 00:03:10.885
準備したコスト関数を使用して各トラジェクトリーのコストを計算します

00:03:10.885 --> 00:03:13.830
たとえば このトラジェクトリーは良いように見えます

00:03:13.830 --> 00:03:16.710
でも 車線の境界にかなり近いです

00:03:16.710 --> 00:03:18.220
もっと重要なのは

00:03:18.220 --> 00:03:21.110
別の移動中の車両に近いことです

00:03:21.110 --> 00:03:22.800
障害物への距離を見たときに

00:03:22.800 --> 00:03:26.730
車全体の寸法を考えなければなりません

00:03:26.730 --> 00:03:30.730
この場合 もうひとつの車に危険なほど近いことになります

00:03:30.730 --> 00:03:35.530
したがって このトラジェクトリーには高いコストを関連付けることになります

00:03:35.530 --> 00:03:37.980
同様に この 2 つのトラジェクトリーもあまり気に入りません

00:03:37.980 --> 00:03:41.535
というのは車線のこちら側を運転させるからです

00:03:41.535 --> 00:03:45.345
それに このシナリオでそうすることの理由が本当にありません

00:03:45.345 --> 00:03:48.600
ですからこれらも高いコストに関連付けられるでしょう

00:03:48.600 --> 00:03:51.110
この 2 つのトラジェクトリーについて

00:03:51.110 --> 00:03:55.020
これらは OK ですが これらに関連付けられた横方向の躍度は

00:03:55.020 --> 00:04:00.350
終了構成に大きい S 値があるトラジェクトリーのものより高くなるでしょう

00:04:00.350 --> 00:04:04.410
そのため これらは中間のコストに関連付けられます

00:04:04.410 --> 00:04:06.960
では 最後のトラジェクトリーを考えましょう

00:04:06.960 --> 00:04:08.120
良い感じでスムースです

00:04:08.120 --> 00:04:10.105
急激に向きを変えていません

00:04:10.105 --> 00:04:12.703
道路に沿って遠くまで移動します

00:04:12.703 --> 00:04:16.210
コスト関数で高い値で終わっているものはありません

00:04:16.210 --> 00:04:18.510
したがって これらを統合すると

00:04:18.510 --> 00:04:23.000
このトラジェクトリーのコストが低くなり 選択されることになります

