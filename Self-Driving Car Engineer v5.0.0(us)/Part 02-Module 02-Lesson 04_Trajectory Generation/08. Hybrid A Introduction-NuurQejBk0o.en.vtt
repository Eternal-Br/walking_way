WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
The next algorithm I would like to show you is called Hybrid A*.

00:00:04.000 --> 00:00:06.455
To introduce you to Hybrid A*,

00:00:06.455 --> 00:00:10.245
I would like to share your video that Sebastian recorded for another class.

00:00:10.244 --> 00:00:13.439
Afterwards, I'm going to ask you the same question

00:00:13.439 --> 00:00:16.699
about Hybrid A* that you just answered about A*.

00:00:16.699 --> 00:00:20.265
So let's talk about robot path planning or robot motion planning.

00:00:20.265 --> 00:00:23.050
Where just a rich field in itself and I

00:00:23.050 --> 00:00:26.355
can't give you a complete survey of all the items involved.

00:00:26.355 --> 00:00:29.455
But one of the key differences to the planning as

00:00:29.454 --> 00:00:33.539
we talked about before is that now the word is continuous.

00:00:33.539 --> 00:00:36.939
So for example, we've read about A* in which we discretize the world.

00:00:36.939 --> 00:00:38.655
You might have a goal location,

00:00:38.655 --> 00:00:41.534
you might have obstacles and then A*,

00:00:41.534 --> 00:00:45.019
a valid action sequence might look like this.

00:00:45.020 --> 00:00:48.345
And even though this is a valid solution to the planning problem,

00:00:48.344 --> 00:00:51.475
a car can't really follow these discrete choices.

00:00:51.475 --> 00:00:54.329
There's a number of very sharp turns over here

00:00:54.329 --> 00:00:58.125
that are just irreconcilable with the motion of a car.

00:00:58.125 --> 00:01:00.840
So the fundamental problem here is A* is

00:01:00.840 --> 00:01:04.182
discrete whereas the robotic world is continuous.

00:01:04.182 --> 00:01:05.439
So the question arises,

00:01:05.439 --> 00:01:08.745
is there version of A* that can deal with the continuous nature

00:01:08.745 --> 00:01:12.770
and give us probably executable paths?

00:01:12.769 --> 00:01:16.045
This is a big big question in robot motion planning.

00:01:16.045 --> 00:01:19.320
And let me just discuss it for this one example and show you

00:01:19.319 --> 00:01:23.069
what we've done to solve this problem with a duff probing challenge.

00:01:23.069 --> 00:01:28.704
So the key to solving this with A* has to do with a state transition function.

00:01:28.704 --> 00:01:31.950
Suppose we are in a cell like this and you play a sequence

00:01:31.950 --> 00:01:36.555
of very small steps simulations using our continuous math from before,

00:01:36.555 --> 00:01:39.240
then a state over here might find

00:01:39.239 --> 00:01:43.679
itself right here in the corner of the next discrete state.

00:01:43.680 --> 00:01:46.230
Instead of assigning this just to the grid cell,

00:01:46.230 --> 00:01:51.165
an algorithm called Hybrid A* memorizes the exact X prime Y prime and theta

00:01:51.165 --> 00:01:53.730
prime and associate it with

00:01:53.730 --> 00:01:56.835
the grid cell over here the first time the grid cell is expanded.

00:01:56.834 --> 00:01:58.974
Then when expanding from the cell,

00:01:58.974 --> 00:02:03.594
it uses a specific starting point over here to figure out what the next cell might be.

00:02:03.594 --> 00:02:06.900
Now, it might happen that the same cell we used to get in A* maybe from over

00:02:06.900 --> 00:02:11.175
here going into a different continuous polymerization of X, Y and theta,

00:02:11.175 --> 00:02:14.280
but because in A* we tend to expand

00:02:14.280 --> 00:02:17.914
cells along the shortest path before we look the longer paths,

00:02:17.914 --> 00:02:22.060
we not just cut this off and never consider to stay over here again.

00:02:22.060 --> 00:02:25.920
Now, this leads to a lack of completeness which

00:02:25.919 --> 00:02:28.109
means there might be solutions to

00:02:28.110 --> 00:02:30.740
the navigation problem that this algorithm doesn't capture.

00:02:30.740 --> 00:02:33.159
But it does give us correctness.

00:02:33.159 --> 00:02:35.444
So as long as our motion equations are correct,

00:02:35.444 --> 00:02:37.864
the resulting paths can be executed.

00:02:37.865 --> 00:02:39.600
Now, here's a caveat.

00:02:39.599 --> 00:02:41.969
This is an approximation and it's only correct

00:02:41.969 --> 00:02:44.844
to the point that these motions equations are correct or not correct.

00:02:44.844 --> 00:02:48.389
But nevertheless, all paths that come out are nice,

00:02:48.389 --> 00:02:50.309
smooth, and curved paths.

00:02:50.310 --> 00:02:52.650
And every time we expand the grid cell,

00:02:52.650 --> 00:02:56.069
we memorize explicitly the continuous values of X prime,

00:02:56.069 --> 00:02:58.289
Y prime and theta with this grid cell.

