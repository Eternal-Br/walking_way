WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:03.629
パブリッシャーとサブスクライバー間でトピックに関するメッセージを渡すことは

00:00:03.629 --> 00:00:07.529
便利ですが万人向けの通信ソリューションではありません

00:00:07.530 --> 00:00:10.470
要求応答パターンの方が向いている場合があります

00:00:10.470 --> 00:00:12.230
こうしたタイプの相互作用に対して

00:00:12.230 --> 00:00:14.009
ROS はサービスと呼ばれるものを提供します

00:00:14.009 --> 00:00:18.975
サービスはトピックのように ノード間のメッセージ通信を可能にします

00:00:18.975 --> 00:00:21.885
サービスがトピックと違うのは これがバスではなく

00:00:21.885 --> 00:00:25.679
関連したパブリッシャーもサブスクライバーもないことです

00:00:25.678 --> 00:00:28.648
サービス経由で相互作用するノードは 1 対 1 をベースに

00:00:28.649 --> 00:00:32.728
要求メッセージと応答メッセージを使用し これを実行します

00:00:32.728 --> 00:00:36.820
今まで開発してきたこの例で サービスがどのように使用されるかを見てみましょう

00:00:36.820 --> 00:00:40.849
Behavior Executor (動作実行者) ノードがカメラからの画像をキャプチャするとします

00:00:40.848 --> 00:00:44.718
画像は camera_images (カメラ画像) トピックにサブスクライブするだけです

00:00:44.719 --> 00:00:49.460
ここでは camera ノードから画像が発行されると 毎回新しい画像を受信します

00:00:49.460 --> 00:00:51.600
しかしながら Executor ノードでもっと間隔を空けて

00:00:51.600 --> 00:00:54.920
画像をキャプチャするには この状況は望ましくありません

00:00:54.920 --> 00:00:57.789
camera_images トピックにサブスクライブするのではなく

00:00:57.789 --> 00:00:59.950
新しいサービスをこの camera ノードに定義します

00:00:59.950 --> 00:01:02.295
これを capture_image (キャプチャ画像) としましょう

00:01:02.295 --> 00:01:05.790
要求メッセージの定義は exposure time (露光時間) というカスタムメッセージタイプになり

00:01:05.790 --> 00:01:09.810
応答はシンプルに image (画像) メッセージになります

00:01:09.810 --> 00:01:12.947
capture_image サービスにサービス呼び出しを発行すると

00:01:12.947 --> 00:01:16.025
Behavior Executor ノードやその他の関係するノードは camera ノードに対して

00:01:16.025 --> 00:01:20.518
指定された露光時間設定で画像をキャプチャするよう要求できます

00:01:20.519 --> 00:01:22.950
camera ノードは 結果の画像を含むメッセージを送信することで

00:01:22.950 --> 00:01:26.168
要求に応答します

