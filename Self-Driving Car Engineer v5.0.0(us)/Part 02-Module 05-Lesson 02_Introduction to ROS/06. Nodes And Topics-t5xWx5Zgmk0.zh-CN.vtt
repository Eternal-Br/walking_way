WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.350
在本课程中 我们感兴趣的机器人

00:00:03.350 --> 00:00:05.974
几乎都具备相同的特征

00:00:05.974 --> 00:00:09.080
它们都包括传感器 可以感知周边的世界

00:00:09.080 --> 00:00:11.685
通过软件进行高层决策

00:00:11.685 --> 00:00:14.089
并利用马达和控制器驱动

00:00:14.089 --> 00:00:17.550
ROS 提供了强劲的通信系统

00:00:17.550 --> 00:00:20.344
允许不同组件互相沟通

00:00:20.344 --> 00:00:24.875
这里 我们以通用机器人为例 介绍这个通信系统

00:00:24.875 --> 00:00:26.879
机器人可能是无人机

00:00:26.879 --> 00:00:30.269
移动底座甚至机器手臂

00:00:30.268 --> 00:00:33.850
尽管这些机器人可能由非常不同的物理组件构成

00:00:33.850 --> 00:00:38.759
它们从构造上来说 都可以执行三个大致步骤：感知

00:00:38.759 --> 00:00:41.130
决策和驱动

00:00:41.130 --> 00:00:43.350
从软件侧来说

00:00:43.350 --> 00:00:46.200
ROS 管理这三个复杂的步骤时

00:00:46.200 --> 00:00:50.250
将每个分解为很多更小的单元流程 我们称之为节点

00:00:50.250 --> 00:00:52.859
通常 系统上的每个节点负责

00:00:52.859 --> 00:00:57.679
机器人功能总体的一个特定的小部分

00:00:57.679 --> 00:01:01.978
例如 系统中可能每个传感器都有相应节点

00:01:01.978 --> 00:01:05.084
此外还有节点对应位置估算

00:01:05.084 --> 00:01:07.769
行为执行和马达控制

00:01:07.769 --> 00:01:10.379
在这些节点的中心

00:01:10.379 --> 00:01:14.194
是 ROS 主进程 它相当于所有节点的管理器

00:01:14.194 --> 00:01:18.599
ROS 主进程维护着系统上所有节点的注册表

00:01:18.599 --> 00:01:20.939
它允许每个节点发现系统里的其他节点

00:01:20.938 --> 00:01:24.199
并与其建立通信线路

00:01:24.200 --> 00:01:27.674
除了允许节点相互发现和通信外

00:01:27.674 --> 00:01:31.065
ROS 主进程还负责作为参数服务器

00:01:31.064 --> 00:01:32.864
如其名称所示

00:01:32.864 --> 00:01:35.609
参数服务器通常用于存储参数

00:01:35.608 --> 00:01:39.173
和配置值 并在运行节点中共享

00:01:39.174 --> 00:01:42.569
例如 一台移动机器人的轮子半径

00:01:42.569 --> 00:01:46.454
可能被一个节点用于位置估算 同时被另一个节点用于速度计算

00:01:46.453 --> 00:01:49.798
节点不会在多个地点存储相同信息

00:01:49.799 --> 00:01:51.900
它会按需检索信息

00:01:51.900 --> 00:01:54.390
节点也可以相互共享数据

00:01:54.390 --> 00:01:57.385
通过在主题上相互传递信息实现这一功能

00:01:57.385 --> 00:02:00.239
主题是一个命名的信息传输通路 可以看做

00:02:00.239 --> 00:02:03.304
节点之间传递消息的管道

00:02:03.304 --> 00:02:05.272
要在一个主题上发送消息

00:02:05.272 --> 00:02:07.519
节点必须把消息发布到该主题

00:02:07.519 --> 00:02:10.405
同样地 要从一个主题接收消息

00:02:10.405 --> 00:02:12.759
节点必须订阅该主题

00:02:12.758 --> 00:02:14.918
这个例子说明了

00:02:14.919 --> 00:02:18.615
我们之前介绍过的主题、发布者和订阅者

00:02:18.615 --> 00:02:22.689
箭头代表从发布者到订阅者的消息流

00:02:22.688 --> 00:02:24.489
值得注意的是 每个节点都可能

00:02:24.490 --> 00:02:27.924
同步发布并订阅大量不同主题

00:02:27.924 --> 00:02:31.360
合在一起 这个节点网络通过主题连接

00:02:31.360 --> 00:02:35.000
我们称之为发布订阅架构或 pub/sub 架构

