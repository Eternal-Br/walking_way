WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.629
发布者和订阅者之间在主题上传递信息

00:00:03.629 --> 00:00:07.529
非常有用 但这并不是一劳永逸的通信解决方案

00:00:07.530 --> 00:00:10.470
有时候 我们需要请求响应模式

00:00:10.470 --> 00:00:12.230
对于这种类型的互动

00:00:12.230 --> 00:00:14.009
ROS 提供了我们所谓的“服务”

00:00:14.009 --> 00:00:18.975
和主题一样 服务允许节点间传递信息

00:00:18.975 --> 00:00:21.885
但是 和主题不同 服务不是并非信息转移通路

00:00:21.885 --> 00:00:25.679
它没有相关联的发布者和订阅者

00:00:25.678 --> 00:00:28.648
相反 节点通过服务互动时

00:00:28.649 --> 00:00:32.728
它们是一对一的 使用请求和响应消息沟通

00:00:32.728 --> 00:00:36.820
我们看看在我们正在开发的例子中 服务是如何应用的

00:00:36.820 --> 00:00:40.849
假设行为执行器节点想要捕捉来自摄像头的一幅图像

00:00:40.848 --> 00:00:44.718
我们只需让它订阅摄像头图像主题即可

00:00:44.719 --> 00:00:49.460
接下来 每次摄像头发布一幅新图像时 它都会收到

00:00:49.460 --> 00:00:51.600
但是 有时候这并不可行

00:00:51.600 --> 00:00:54.920
比如 有时执行器只想偶尔捕捉一次图像

00:00:54.920 --> 00:00:57.789
这时 我们不订阅摄像头图像主题

00:00:57.789 --> 00:00:59.950
我们为摄像头节点定义一个新服务

00:00:59.950 --> 00:01:02.295
我们称之为图像捕捉服务

00:01:02.295 --> 00:01:05.790
请求信息服务可以是一个定制信息类型

00:01:05.790 --> 00:01:09.810
叫做曝光时间 响应可以是一个图像类型

00:01:09.810 --> 00:01:12.947
向图像捕捉服务发起服务调用后

00:01:12.947 --> 00:01:16.025
行为执行器节点或任何其他类似节点

00:01:16.025 --> 00:01:20.518
都能请求摄像头根据给定曝光时间和设置捕捉一幅图像

00:01:20.519 --> 00:01:22.950
然后 摄像头节点会响应请求

00:01:22.950 --> 00:01:26.168
发送一条包括结果图像的消息

