WEBVTT
Kind: captions
Language: zh-CN

00:00:01.840 --> 00:00:06.785
Rosmsg info 命令在控制台上打印出消息类型

00:00:06.785 --> 00:00:09.250
我们进一步了解一下 cmd_vel 主题

00:00:09.250 --> 00:00:10.750
首先 我会清空终端

00:00:10.750 --> 00:00:14.224
然后 我会使用 rosmsg show 命令

00:00:14.224 --> 00:00:17.179
然后是包括消息类型的包的名称

00:00:17.178 --> 00:00:20.369
在这里 名称为 geometry_msgs/Twist 我们刚刚见过

00:00:20.370 --> 00:00:22.695
斜线 然后输入 twist

00:00:22.695 --> 00:00:25.035
这样 我们就完成了消息类型的名称

00:00:25.035 --> 00:00:27.600
Twist 类型的完整消息定义

00:00:27.600 --> 00:00:29.759
根据命令输入 你可以看到 twist 消息

00:00:29.759 --> 00:00:32.259
由两条消息组成 类型为向量 3

00:00:32.259 --> 00:00:35.670
这也是几何消息包中定义的类型

00:00:35.670 --> 00:00:39.715
有一个三维向量 表示线性速度 还有一个表示角速度

00:00:39.715 --> 00:00:45.179
每个向量都由三个不同的 64 位浮点分量组成：分量 x

00:00:45.179 --> 00:00:48.320
y 和 z Float64 是一个内置

00:00:48.320 --> 00:00:51.779
的原始数据类型 你可以在创建定制消息时使用

00:00:51.779 --> 00:00:55.740
要获得内置类型和消息定义的更多信息

00:00:55.740 --> 00:00:58.783
请检查和截屏相关的文本模块里的链接

00:00:58.783 --> 00:01:02.969
尽管 ROS 消息工具对了解消息内容非常有用

00:01:02.969 --> 00:01:05.420
它并不能提供所有相关信息

00:01:05.420 --> 00:01:08.459
你还可以利用另一个工具 rosed

00:01:08.459 --> 00:01:10.379
Rosed 是一个简单的 bash 命令 利用它

00:01:10.379 --> 00:01:13.299
你可以在 ROS 环境中轻松查看并编辑文件

00:01:13.299 --> 00:01:16.109
我们用它来查看 twist 消息定义

00:01:16.108 --> 00:01:18.568
同样地 我清空终端 然后执行

00:01:18.569 --> 00:01:21.754
命令 rosed 后面是 geometry

00:01:21.754 --> 00:01:24.420
下划线 messages 包括有问题的消息的包的名称

00:01:24.420 --> 00:01:27.969
然后是 twist.msg

00:01:27.968 --> 00:01:30.589
你想打开的消息定义的名称

00:01:30.590 --> 00:01:33.840
注意 如果你忘记了包的名称或消息类型名称

00:01:33.840 --> 00:01:36.489
可以按 Tab 完成

00:01:36.489 --> 00:01:39.290
好的 可以了 这是实际的消息定义

00:01:39.290 --> 00:01:42.965
它看起来非常像我们看到的 rosmessage info 命令的输出

00:01:42.965 --> 00:01:45.739
但是有几个重要的不同

00:01:45.739 --> 00:01:47.540
你首先会注意到的是

00:01:47.540 --> 00:01:51.150
它没有说明具体如何定义每个 vector 3 消息

00:01:51.150 --> 00:01:52.549
具体信息在别的地方

00:01:52.549 --> 00:01:57.325
它在 vector 3.msg 文件里 也在这个包中

00:01:57.325 --> 00:01:59.569
Rosmessage info 命令只是顺带

00:01:59.569 --> 00:02:03.140
在控制台输出中提供完整的定义

00:02:03.140 --> 00:02:05.379
你会注意到的第二点 是注释

00:02:05.379 --> 00:02:07.234
这是我们真正要关注的

00:02:07.233 --> 00:02:09.228
碰到疑问时 要查看源代码

00:02:09.229 --> 00:02:11.599
Rosmessage info 并没有提供

00:02:11.598 --> 00:02:14.234
任何关于 twist 消息如何使用的方法

00:02:14.235 --> 00:02:17.794
但这位 ROS 开发者非常友好 他创建了这条消息 帮了我们大忙

00:02:17.794 --> 00:02:20.120
标准的 ROS 分支中所包括的大部分

00:02:20.120 --> 00:02:22.250
消息类型定义都有大量

00:02:22.250 --> 00:02:25.205
注释 解释了具体用法

00:02:25.205 --> 00:02:27.710
在这里 你可以看到 twist 消息实际上用于

00:02:27.710 --> 00:02:30.800
包含线性速度和角速度向量

00:02:30.800 --> 00:02:32.960
在使用过程中 我们会掌握这一点

00:02:32.960 --> 00:02:36.875
因为我们可以看到 消息正在围绕 cmd_vel 主题传递

00:02:36.875 --> 00:02:38.870
但如果只看 rosmsg show 命令

00:02:38.870 --> 00:02:41.125
的输出 这一点并不清晰

00:02:41.125 --> 00:02:43.788
同样地 碰到疑问时 查看源代码

00:02:43.788 --> 00:02:46.008
这会是 ROS 开发中的通用做法

