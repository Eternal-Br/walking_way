WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:03.350
このコースで関心を持つほとんどすべてのロボットは

00:00:03.350 --> 00:00:05.974
同じ基本的な特徴を共有します

00:00:05.974 --> 00:00:09.080
それらには 周囲の世界を認識するセンサー

00:00:09.080 --> 00:00:11.685
高度な決定を行うソフトウェア

00:00:11.685 --> 00:00:14.089
作動用のモーターやコントローラがあります

00:00:14.089 --> 00:00:17.550
ROS には これらの異なるコンポーネントが互いに通信できる

00:00:17.550 --> 00:00:20.344
強力な通信システムが用意されています

00:00:20.344 --> 00:00:24.875
ここで この通信システムを一般的なロボットを検討しながら紹介します

00:00:24.875 --> 00:00:26.879
このロボットは ドローン 移動基地局 または

00:00:26.879 --> 00:00:30.269
ロボットアームとすることができます

00:00:30.268 --> 00:00:33.850
これらのロボットは まったく異なる物理コンポーネントで構成できますが

00:00:33.850 --> 00:00:38.759
 すべてが認識 意思決定 作動の 3 つの同じ高度なステップを

00:00:38.759 --> 00:00:41.130
実行するよう構築されています

00:00:41.130 --> 00:00:43.350
ソフトウェア側では ROS がこれら 3 つの

00:00:43.350 --> 00:00:46.200
複雑なステップをノードと呼ばれる多くの小さい

00:00:46.200 --> 00:00:50.250
ユニットプロセスにそれぞれ細分化して管理します

00:00:50.250 --> 00:00:52.859
通常はシステムの各ノードが ロボット全体の機能のうち

00:00:52.859 --> 00:00:57.679
小さく比較的特定の一部分を担当します

00:00:57.679 --> 00:01:01.978
たとえば システムには各センサーやアクチュエーター向けの

00:01:01.978 --> 00:01:05.084
ノードのほか ローカライゼーション 動作実行 モーター制御のようなもの向けの

00:01:05.084 --> 00:01:07.769
ノードもあるでしょう

00:01:07.769 --> 00:01:10.379
このノードの集まりの中心は ROS マスターで

00:01:10.379 --> 00:01:14.194
すべてのノードの管理者のように振る舞います

00:01:14.194 --> 00:01:18.599
ROS マスターは システムでアクティブになっているすべてのノードのレジストリを管理します

00:01:18.599 --> 00:01:20.939
そして 各ノードがシステム内の他のノードを検出し

00:01:20.938 --> 00:01:24.199
それらとの通信のラインを確立できるようにします

00:01:24.200 --> 00:01:27.674
ノードが互いを見つけて通信できるようにするだけでなく

00:01:27.674 --> 00:01:31.065
ROS マスターはいわゆるパラメーターサーバーのホストも行います

00:01:31.064 --> 00:01:32.864
その名が示すように

00:01:32.864 --> 00:01:35.609
パラメーターサーバーは通常 実行中のノード間で共有される

00:01:35.608 --> 00:01:39.173
パラメーターや構成値の格納に使用されます

00:01:39.174 --> 00:01:42.569
たとえばモバイルロボットのホイール半径は あるノードでは

00:01:42.569 --> 00:01:46.454
ローカライゼーションのために使用し 別のノードでは速度計算に使用できます

00:01:46.453 --> 00:01:49.798
同じ情報を複数の場所に格納する代わりに

00:01:49.799 --> 00:01:51.900
ノードは必要に応じて値を調べることができます

00:01:51.900 --> 00:01:54.390
ノードは トピックと呼ばれるメッセージを渡すことによって

00:01:54.390 --> 00:01:57.385
互いにデータを共有することもできます

00:01:57.385 --> 00:02:00.239
トピックは メッセージが通過するノード間のパイプとして

00:02:00.239 --> 00:02:03.304
考えることができる単なる名前の付いたバスです

00:02:03.304 --> 00:02:05.272
トピックでメッセージを送信するには

00:02:05.272 --> 00:02:07.519
ノードはトピックにパブリッシュする必要があります

00:02:07.519 --> 00:02:10.405
同様にメッセージをトピックで受信するには

00:02:10.405 --> 00:02:12.759
ノードがトピックにサブスクライブする必要があります

00:02:12.758 --> 00:02:14.918
これが さきほど説明したノード用のトピック

00:02:14.919 --> 00:02:18.615
パブリッシャー サブスクライバーの例です

00:02:18.615 --> 00:02:22.689
矢印はパブリッシャーからサブスクライバーへのメッセージフローを表しています

00:02:22.688 --> 00:02:24.489
各ノードがさまざまなトピックに対して同時にパブリッシュや

00:02:24.490 --> 00:02:27.924
サブスクライブする場合があることを認識しておくことが大切です

00:02:27.924 --> 00:02:31.360
トピックで接続されたこのノードのネットワークをまとめて

00:02:31.360 --> 00:02:35.000
パブリッシュサブスクライブまたはパブサブアーキテクチャといいます

