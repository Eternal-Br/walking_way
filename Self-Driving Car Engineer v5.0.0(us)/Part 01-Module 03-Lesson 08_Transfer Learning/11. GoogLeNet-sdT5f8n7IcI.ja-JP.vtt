WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:03.509
&gt;&gt; 2014年 Googleは独自のネットワークを

00:00:03.509 --> 00:00:08.070
ImageNetコンペティションとホームページでYann LecunおよびLeNetに公表し

00:00:08.070 --> 00:00:10.970
Googleはそのネットワークを

00:00:10.970 --> 00:00:13.670
GoogLeNetと名付けました

00:00:13.669 --> 00:00:18.230
GoogleNetと似たスペルですが グーグラネットと発音します

00:00:18.230 --> 00:00:20.594
図を見てください

00:00:20.594 --> 00:00:22.574
ImageNetコンペティションにおいて

00:00:22.574 --> 00:00:26.175
GoogLeNetはVGGより少しだけ良い成績でした

00:00:26.175 --> 00:00:29.545
6.7％対7.3％でした

00:00:29.545 --> 00:00:30.825
しかし このレベルでは

00:00:30.824 --> 00:00:32.850
些細な差に感じます

00:00:32.850 --> 00:00:36.450
&gt;&gt; GoogLeNetの大きな利点は実行が速いことです

00:00:36.450 --> 00:00:39.300
GoogLeNetを開発したチームは

00:00:39.299 --> 00:00:44.129
インセプションモジュールという賢い概念を開発し 実によくトレーニングされ 効率的に展開可能です

00:00:44.130 --> 00:00:45.770
&gt;&gt; インセプションを覚えていますか

00:00:45.770 --> 00:00:48.445
ビンセントが以前にこの概念を説明しました

00:00:48.445 --> 00:00:51.344
念のため ここでもう一度示しておきます

00:00:51.344 --> 00:00:53.850
&gt;&gt; これはインセプションモジュールと呼ばれます

00:00:53.850 --> 00:00:56.600
もう少し複雑に見えます

00:00:56.600 --> 00:01:00.000
考え方としてはConvNetの各層で

00:01:00.000 --> 00:01:01.515
選択を行うことができ

00:01:01.515 --> 00:01:03.480
プーリング操作を持ち

00:01:03.479 --> 00:01:06.015
畳み込みを持つことができます 決定する必要があるのは

00:01:06.015 --> 00:01:10.875
1x1の畳み込みか 3x3か 5x5かということです

00:01:10.875 --> 00:01:15.105
これらはすべて ネットワークのモデリング能力にとって実際に有益です

00:01:15.105 --> 00:01:17.969
それでは なぜ選択するのでしょうか  すべてを使用しましょう

00:01:17.969 --> 00:01:20.204
これはインセプションモジュールがどのようなものかを示しています

00:01:20.204 --> 00:01:22.635
1つの畳み込みを使用する代わりに

00:01:22.635 --> 00:01:26.910
平均プーリングとその後の1x1を組み合わせることができ

00:01:26.909 --> 00:01:29.429
1x1の畳み込み

00:01:29.430 --> 00:01:32.220
1x1の後に3x3

00:01:32.219 --> 00:01:35.250
1x1の後に5x5を使用し

00:01:35.250 --> 00:01:38.540
最後にそれぞれの出力を連結できます

00:01:38.540 --> 00:01:43.140
複雑に見えますが 面白いのは これらのパラメーターを

00:01:43.140 --> 00:01:48.015
モデル内のパラメーターの合計数が非常に少なくなるように

00:01:48.015 --> 00:01:51.599
しかも モデルが単一の畳み込みを使用した場合より改善されるように選択できることです

00:01:51.599 --> 00:01:55.289
&gt;&gt; ビンセントが言うように インセプションモジュールは

00:01:55.290 --> 00:01:59.124
パラメーターの合計数が非常に少ない状況を作り出します

00:01:59.123 --> 00:02:02.109
このため GoogLeNetはAlexNetと同じくらい高速に実行します

00:02:02.109 --> 00:02:05.855
&gt;&gt; そして もちろん GoogLeNetは非常に正確です

00:02:05.855 --> 00:02:06.975
すでに述べたように

00:02:06.974 --> 00:02:09.965
ImageNetのエラーはわずか7％でした

00:02:09.965 --> 00:02:14.310
GoogLeNetは自動運転車のようにリアルタイムでネットワークを実行する必要がある場合には

00:02:14.310 --> 00:02:16.020
調査すべき有力候補です

