WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.819
— 你可能认为 GPU 是为游戏中的大量图形渲染

00:00:02.819 --> 00:00:06.025
所定制的设备 这当然没错

00:00:06.025 --> 00:00:09.750
但 GPU 在深度学习方面同样发挥着极其重要的作用

00:00:09.750 --> 00:00:13.574
它对高吞吐量计算进行了优化

00:00:13.574 --> 00:00:16.589
而 CPU 则大多针对延迟进行优化

00:00:16.589 --> 00:00:20.199
使每个单线程的指令运行速度达到最优

00:00:20.199 --> 00:00:22.244
而 GPU 则针对数据吞吐进行了优化

00:00:22.245 --> 00:00:25.425
以尽可能多地运行并行计算

00:00:25.425 --> 00:00:28.410
吞吐量计算对于计算机图形显示非常重要

00:00:28.410 --> 00:00:31.605
因为我们希望在屏幕上同时刷新大量像素点

00:00:31.605 --> 00:00:34.530
吞吐量计算对深度学习也非常重要

00:00:34.530 --> 00:00:36.570
因为大量的深度学习底层计算

00:00:36.570 --> 00:00:39.359
以并行化方式进行

00:00:39.359 --> 00:00:42.359
— 训练网络时 如果从 CPU 转为使用 GPU

00:00:42.359 --> 00:00:45.969
通常可以实现多大程度的加速？

00:00:45.969 --> 00:00:47.504
— 这取决于很多因素

00:00:47.505 --> 00:00:50.445
包括软件的设计方式

00:00:50.445 --> 00:00:53.605
以及所比对的 CPU 和 GPU 处理器的具体规格

00:00:53.604 --> 00:00:56.339
例如 笔记本电脑上的低功耗处理器的速度

00:00:56.340 --> 00:00:59.440
比大型服务器上的处理器要慢很多

00:00:59.439 --> 00:01:01.769
但就一般经验而言 使用 GPU 训练网络的速度

00:01:01.770 --> 00:01:04.760
会比 CPU 快五倍左右

00:01:04.760 --> 00:01:06.495
— 我所知道的也差不多是这样

00:01:06.495 --> 00:01:10.890
按照我的经验 如果网络训练速度能提高 5 到 10 倍

00:01:10.890 --> 00:01:15.200
项目实施会更容易 进展也会快得多

00:01:15.200 --> 00:01:17.459
这样就能够节约出大量时间

00:01:17.459 --> 00:01:21.000
来测试一些新算法 并能更快地测试新算法的表现

00:01:21.000 --> 00:01:24.674
另一种快速测试的方法就是使用迁移学习

00:01:24.674 --> 00:01:26.819
也就是利用已经训练过的网络

00:01:26.819 --> 00:01:30.000
而不是每次都从头开始搭建

