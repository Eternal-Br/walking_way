WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.509
— 2014 年 谷歌在 ImageNet 竞赛中

00:00:03.509 --> 00:00:08.070
发布了自己的网络 为了向 Yann LeCun 的 LeNet 致敬

00:00:08.070 --> 00:00:10.970
谷歌很巧妙地把该网络命名为

00:00:10.970 --> 00:00:13.670
慢慢念： GoogLeNet

00:00:13.669 --> 00:00:18.230
它融合了 Google 和 Net 这两个词 但发音为 GoogLeNet

00:00:18.230 --> 00:00:20.594
下面看图

00:00:20.594 --> 00:00:22.574
在 ImageNet 竞赛中

00:00:22.574 --> 00:00:26.175
GoogLeNet 的表现甚至比 VGG 略胜一筹

00:00:26.175 --> 00:00:29.545
其错误率仅为 6.7% 而 VGG 则为 7.3%

00:00:29.545 --> 00:00:30.825
当然 如此接近的成绩

00:00:30.824 --> 00:00:32.850
也算是平分秋色了

00:00:32.850 --> 00:00:36.450
— GoogLeNet 的主要优势在于它的运行速度非常快

00:00:36.450 --> 00:00:39.300
它的研发团队提出了一个很聪明的概念

00:00:39.299 --> 00:00:44.129
称为 Inception 模块 这个模块使得训练效果更好 部署效率也很高

00:00:44.130 --> 00:00:45.770
— 你还记得 Inception 模块吗？

00:00:45.770 --> 00:00:48.445
Vincent 前面解释过这个概念

00:00:48.445 --> 00:00:51.344
让我们再复习一下

00:00:51.344 --> 00:00:53.850
— 这是一个 Inception 模块

00:00:53.850 --> 00:00:56.600
它看上去比较复杂一些

00:00:56.600 --> 00:01:00.000
它的原理是 在你的卷积网络的每一层

00:01:00.000 --> 00:01:01.515
你可以选择进

00:01:01.515 --> 00:01:03.480
行池化运算

00:01:03.479 --> 00:01:06.015
卷积运算

00:01:06.015 --> 00:01:10.875
如果是卷积 那么大小应该是 1×1、3×3 还是 5×5

00:01:10.875 --> 00:01:15.105
其实这些对网络的建模能力都是有益的

00:01:15.105 --> 00:01:17.969
所以何必还要选呢？ 把它们全部用上就好了

00:01:17.969 --> 00:01:20.204
Inception 模块看起来这个样子

00:01:20.204 --> 00:01:22.635
它不局限于单个卷积运算

00:01:22.635 --> 00:01:26.910
而是将多个模块组合

00:01:26.909 --> 00:01:29.429
如平均池化后接 1×1 的卷积

00:01:29.430 --> 00:01:32.220
单独的 1×1 的卷积 接着 3×3 的卷积

00:01:32.219 --> 00:01:35.250
另一个 1×1 的卷积 接着 5×5 的卷积

00:01:35.250 --> 00:01:38.540
最后把这些运算的输出连成一串

00:01:38.540 --> 00:01:43.140
它看起来很复杂 但有趣的是 根据你选择参数的方式

00:01:43.140 --> 00:01:48.015
模型中的参数总数可能非常少

00:01:48.015 --> 00:01:51.599
但模型的性能比你使用简单卷积时要好

00:01:51.599 --> 00:01:55.289
— 就像 Vincent 说的 

00:01:55.290 --> 00:01:59.124
Inception 模块可以使网络的参数总数非常少

00:01:59.123 --> 00:02:02.109
这就是 GoogLeNet 运行速度接近于 AlexNet 的原因

00:02:02.109 --> 00:02:05.855
— 当然 GoogLeNet 的识别准确率也非常高

00:02:05.855 --> 00:02:06.975
我们前面提到过

00:02:06.974 --> 00:02:09.965
它在 ImageNet 上的错误率只有 7% 左右

00:02:09.965 --> 00:02:14.310
如果你需要一个实时运行网络 那么 GoogLeNet 是一个理想选择

00:02:14.310 --> 00:02:16.020
无人车就是一个很好的应用实例

