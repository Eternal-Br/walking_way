{
  "data": {
    "lesson": {
      "id": 534645,
      "key": "05b03f20-8c4b-453c-b41e-9fac590278c7",
      "title": "Object Detection",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson, you'll learn how to detect and track vehicles using color and gradient features and a support vector machine classifier.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/05b03f20-8c4b-453c-b41e-9fac590278c7/534645/1518125913811/Object%20Detection%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/05b03f20-8c4b-453c-b41e-9fac590278c7/534645/1518125871683/Object%20Detection%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 232476,
          "key": "b761da7f-bea8-4458-9eae-4a7d494cf7e6",
          "title": "Intro to Vehicle Tracking",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b761da7f-bea8-4458-9eae-4a7d494cf7e6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232477,
              "key": "50cf8ab5-47d1-4967-b753-8aec2e2e9ac0",
              "title": "Intro to Vehicle Tracking",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "BAe-zslg088",
                "china_cdn_id": "BAe-zslg088.mp4"
              }
            }
          ]
        },
        {
          "id": 232478,
          "key": "a5f759ff-0dc9-429a-afe7-67d93038d91c",
          "title": "Arpan and Drew",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a5f759ff-0dc9-429a-afe7-67d93038d91c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232479,
              "key": "ac6ebfee-44f0-4e9a-b063-7326168cd045",
              "title": "Intro to Arpan and Drew",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "zfWvntpxbK0",
                "china_cdn_id": "zfWvntpxbK0.mp4"
              }
            }
          ]
        },
        {
          "id": 229192,
          "key": "668a9625-e1ee-494d-a56d-a1107ac47629",
          "title": "Finding Cars",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "668a9625-e1ee-494d-a56d-a1107ac47629",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 229199,
              "key": "c70e9f01-7dfe-44a4-8686-05fd6790f913",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Finding Cars\n===",
              "instructor_notes": ""
            },
            {
              "id": 229208,
              "key": "f89424ac-dc59-4978-87be-e83d78fbb8e1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584f2121_highway-cars-red-white/highway-cars-red-white.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f89424ac-dc59-4978-87be-e83d78fbb8e1",
              "caption": "",
              "alt": null,
              "width": 1280,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 229202,
              "key": "cb1beeb0-e675-4def-b4f2-70c80cf4b29d",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cb1beeb0-e675-4def-b4f2-70c80cf4b29d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Have a look at the image above.  What characteristics do you think might be useful for the purpose of identifying cars in this image?  ",
                "answers": [
                  {
                    "id": "a1481579176968",
                    "text": "Color",
                    "is_correct": true
                  },
                  {
                    "id": "a1481579245586",
                    "text": "Position within the image",
                    "is_correct": true
                  },
                  {
                    "id": "a1481579246839",
                    "text": "Shape",
                    "is_correct": true
                  },
                  {
                    "id": "a1481579247739",
                    "text": "Apparent size",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 232480,
          "key": "5566c4ff-caaf-41b4-b02a-551c2f6924ad",
          "title": "Object Detection Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5566c4ff-caaf-41b4-b02a-551c2f6924ad",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232481,
              "key": "ba74211b-5a3a-4a23-a029-c1b4f7688bd8",
              "title": "Object Detection Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "zNBWOHycI0I",
                "china_cdn_id": "zNBWOHycI0I.mp4"
              }
            }
          ]
        },
        {
          "id": 231839,
          "key": "b725c710-83fb-49a6-a6dd-e48c4b14a1ba",
          "title": "Manual Vehicle Detection",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b725c710-83fb-49a6-a6dd-e48c4b14a1ba",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 231845,
              "key": "b4c3a62d-ee20-42d4-b5b0-900089ab0cdf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Manual Vehicle Detection\n===",
              "instructor_notes": ""
            },
            {
              "id": 232465,
              "key": "13260e19-ef10-4e8a-8425-cb3a1bd981d2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/5859ace3_bbox-example-image/bbox-example-image.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/13260e19-ef10-4e8a-8425-cb3a1bd981d2",
              "caption": "",
              "alt": null,
              "width": 1280,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 231840,
              "key": "10e94a1d-9757-40c6-a0d1-e2865e6d1a2f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's your chance to be a human vehicle detector!  In this lesson, you will be drawing a lot of bounding boxes on vehicle positions in images.  Eventually, you'll have an algorithm that's outputting bounding box positions and you'll want an easy way to plot them up over your images.  So, now is a good time to get familiar with the `cv2.rectangle()` function ([documentation](http://docs.opencv.org/2.4/modules/core/doc/drawing_functions.html)) that makes it easy to draw boxes of different size, shape and color.  \n\nIn this exercise, your goal is to write a function that takes as arguments an image and a list of bounding box coordinates for each car.  Your function should then draw bounding boxes on a copy of the image and return that as its output.  \n\n**Your output should look something like this:**",
              "instructor_notes": ""
            },
            {
              "id": 232473,
              "key": "0133a525-f700-4653-b00e-3c242977a8cc",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/5859af73_manual-bbox-quiz-output/manual-bbox-quiz-output.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0133a525-f700-4653-b00e-3c242977a8cc",
              "caption": "",
              "alt": null,
              "width": 1780,
              "height": 1050,
              "instructor_notes": null
            },
            {
              "id": 231846,
              "key": "cb14eb85-df5e-49c9-b671-58a5371a86a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here, I don't actually care whether you identify the same cars as I do, or that you draw the same boxes, only that your function takes the appropriate inputs and yields the appropriate output.  So here's what it should look like:\n\n```python\n# Define a function that takes an image, a list of bounding boxes, \n# and optional color tuple and line thickness as inputs\n# then draws boxes in that color on the output\n\ndef draw_boxes(img, bboxes, color=(0, 0, 255), thick=6):\n    # make a copy of the image\n    # draw each bounding box on your image copy using cv2.rectangle()\n    # return the image copy with boxes drawn\n```\nYou'll draw bounding boxes with `cv2.rectangle()` like this:\n\n```python\ncv2.rectangle(image_to_draw_on, (x1, y1), (x2, y2), color, thick)\n```\n\nIn this call to `cv2.rectangle()` your `image_to_draw_on` should be the copy of your image, then `(x1, y1)` and `(x2, y2)` are the x and y coordinates of any two opposing corners of the bounding box you want to draw.  `color` is a 3-tuple, for example, `(0, 0, 255)` for blue, and `thick` is an optional integer parameter to define the box thickness.  \n\nHave a look at the image above with labeled axes, where I've drawn some bounding boxes and \"guesstimate\" where some of the box corners are.  You should pass your bounding box positions to your `draw_boxes()` function as a list of tuple pairs, like this:\n\n```python\nbboxes = [((x1, y1), (x2, y2)), ((,),(,)), ...]\n```\nIf you want to investigate the above image more closely, you can download it [here](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/bbox-example-image.jpg).",
              "instructor_notes": ""
            },
            {
              "id": 231868,
              "key": "10230663415",
              "title": "draw_bboxes",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "10230663415",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "draw_bboxes",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "10229883540",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimage = mpimg.imread('bbox-example-image.jpg')\n\n# Define a function that takes an image, a list of bounding boxes, \n# and optional color tuple and line thickness as inputs\n# then draws boxes in that color on the output\n\ndef draw_boxes(img, bboxes, color=(0, 0, 255), thick=6):\n    # make a copy of the image\n    draw_img = np.copy(img)\n    # draw each bounding box on your image copy using cv2.rectangle()\n    # return the image copy with boxes drawn\n    return draw_img # Change this line to return image copy with boxes\n# Add bounding boxes in this format, these are just example coordinates.\nbboxes = [((100, 100), (200, 200)), ((300, 300), (400, 400))]\n\nresult = draw_boxes(image, bboxes)\nplt.imshow(result)",
                    "name": "draw_bboxes.py"
                  },
                  {
                    "text": "# Define a function that takes an image, a list of bounding boxes, \n# and optional color tuple and line thickness as inputs\n# then draws boxes in that color on the output\n\ndef draw_boxes(img, bboxes, color=(0, 0, 255), thick=6):\n    # Make a copy of the image\n    draw_img = np.copy(img)\n    # Iterate through the bounding boxes\n    for bbox in bboxes:\n        # Draw a rectangle given bbox coordinates\n        cv2.rectangle(draw_img, bbox[0], bbox[1], color, thick)\n    # Return the image copy with boxes drawn\n    return draw_img\n\n# Here are the bounding boxes I used\nbboxes = [((275, 572), (380, 510)), ((488, 563), (549, 518)), ((554, 543), (582, 522)), \n          ((601, 555), (646, 522)), ((657, 545), (685, 517)), ((849, 678), (1135, 512))]\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 232482,
          "key": "814c79a8-24cd-4ee6-acbc-6afe9bb5cae0",
          "title": "Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "814c79a8-24cd-4ee6-acbc-6afe9bb5cae0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232483,
              "key": "57535ae8-62b1-448e-83e1-8105c72b9446",
              "title": "Features",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "u3NOabeuMjA",
                "china_cdn_id": "u3NOabeuMjA.mp4"
              }
            }
          ]
        },
        {
          "id": 232484,
          "key": "5a2684ff-b15f-46b0-b789-dffaa851a726",
          "title": "Feature Intuition",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5a2684ff-b15f-46b0-b789-dffaa851a726",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232485,
              "key": "31c6b3a6-473f-494d-82b7-9fe7306adcbc",
              "title": "Feature Intuition",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "31c6b3a6-473f-494d-82b7-9fe7306adcbc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Features describe the characteristics of an object, and with images, it really all comes down to intensity and gradients of intensity, and how these features capture the color and shape of an object. \n\nMatch up the different features (drag and drop the colored boxes to the column on the right) with the characteristic(s) they capture about an object in an image.  "
                },
                "concepts_label": "Features",
                "answers_label": "Characteristics",
                "concepts": [
                  {
                    "text": "Raw pixel intensity",
                    "correct_answer": {
                      "id": "a1482276188103",
                      "text": "Color and shape"
                    }
                  },
                  {
                    "text": "Histogram of pixel intensity",
                    "correct_answer": {
                      "id": "a1482276402909",
                      "text": "Color only"
                    }
                  },
                  {
                    "text": "Gradients of pixel intensity",
                    "correct_answer": {
                      "id": "a1482276404425",
                      "text": "Shape only"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1482276404425",
                    "text": "Shape only"
                  },
                  {
                    "id": "a1482276188103",
                    "text": "Color and shape"
                  },
                  {
                    "id": "a1482276402909",
                    "text": "Color only"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 232486,
          "key": "65d4242e-7d44-4531-9327-3d829e0e72b1",
          "title": "Color Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "65d4242e-7d44-4531-9327-3d829e0e72b1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232487,
              "key": "7f98626c-41ed-411e-bbc8-c9fdbe04059f",
              "title": "Color Features",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "JT4fDW7lsG8",
                "china_cdn_id": "JT4fDW7lsG8.mp4"
              }
            }
          ]
        },
        {
          "id": 231889,
          "key": "9acf11c2-a5a9-4e5a-ba86-1e92246fff99",
          "title": "Template Matching",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9acf11c2-a5a9-4e5a-ba86-1e92246fff99",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 231891,
              "key": "62c39e90-763b-4e6b-b864-b227165d4336",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Template Matching\n===\n",
              "instructor_notes": ""
            },
            {
              "id": 231892,
              "key": "52a7aa75-0b4e-4a84-afb2-037f83fb4761",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/58575221_bbox-example-image/bbox-example-image.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/52a7aa75-0b4e-4a84-afb2-037f83fb4761",
              "caption": "",
              "alt": null,
              "width": 1259,
              "height": 707,
              "instructor_notes": null
            },
            {
              "id": 231977,
              "key": "9eec43cf-e471-43b1-8b38-4bb21d2a2404",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To figure out when template matching works and when it doesn't, let's play around with the OpenCV `cv2.matchTemplate()` function!  In the bounding boxes exercise, I found six cars in the image above.  This time, we're going to play the opposite game.  Assuming we know these six cars are what we're looking for, we can use them as templates and search the image for matches.  \n\n**Let's suppose you want to find the templates shown below in the image shown above (you can download these images [here](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/cutouts.zip) if you like):**",
              "instructor_notes": ""
            },
            {
              "id": 232470,
              "key": "0bfa4b61-f72c-4caa-8466-7d531a0ec509",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/5859ae23_cutouts/cutouts.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0bfa4b61-f72c-4caa-8466-7d531a0ec509",
              "caption": "",
              "alt": null,
              "width": 1778,
              "height": 840,
              "instructor_notes": null
            },
            {
              "id": 231895,
              "key": "02767459-ecb6-431c-806c-c0fef02d8537",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Your goal in this exercise is to write a function that takes in an image and a list of templates, and returns a list of  the best fit location (bounding box) for each of the templates within the image.  OpenCV provides you with the handy function `cv2.matchTemplate()` ([documentation](http://docs.opencv.org/2.4/modules/imgproc/doc/object_detection.html)) to search the image, and `cv2.minMaxLoc()` ([documentation](http://docs.opencv.org/2.4/modules/core/doc/operations_on_arrays.html?highlight=minmaxloc#cv2.minMaxLoc)) to extract the location of the best match.  \n\nYou can choose between \"squared difference\" or \"correlation\" methods in using `cv2.matchTemplate()`, but keep in mind with squared differences you need to locate the global minimum difference to find a match, while for correlation, you're looking for a global maximum.  \n\nFollow along with [this tutorial](http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_template_matching/py_template_matching.html) provided by OpenCV to try some different template matching techniques.  The function you write should work like this:\n\n```python\ndef find_matches(img, template_list):\n    # Iterate over the list of templates\n    # Use cv2.matchTemplate() to search the image for each template\n    # NOTE: You can use any of the cv2.matchTemplate() search methods\n    # Use cv2.minMaxLoc() to extract the location of the best match in each case\n    # Compile a list of bounding box corners as output\n    # Return the list of bounding boxes\n```",
              "instructor_notes": ""
            },
            {
              "id": 232558,
              "key": "8f7e8500-d21f-4ca0-8caf-ed59ab826201",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**However**, the point of this exercise is not to discover why template matching works for vehicle detection, but rather, why it doesn't!  So, after you have a working implementation of the `find_matches()` function, try it on the second image, `temp-matching-example-2.jpg`, which is currently commented out.  \n\nIn the second image, all of the same six cars are visible (just a few seconds later in the video), but you'll find that **none** of the templates find the correct match!  This is because with template matching we can only find very close matches, and changes in size or orientation of a car make it impossible to match with a template.  \n\n**So, just to be clear, you goal here is to:**\n1. Write a function that takes in an image and list of templates and returns a list of bounding boxes.  \n2. Find that your function works well to locate the six example templates taken from the first image.  \n3. Try your code on the second image, and find that template matching breaks easily.\n\nIf you want to run this locally, download [bbox-example-image.jpg](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/bbox-example-image.jpg) and the [cutout images](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/cutouts.zip).",
              "instructor_notes": ""
            },
            {
              "id": 231890,
              "key": "10203378253",
              "title": "template_match",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "10203378253",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "template_match",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "10227174153",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimage = mpimg.imread('bbox-example-image.jpg')\n#image = mpimg.imread('temp-matching-example-2.jpg')\ntemplist = ['cutout1.jpg', 'cutout2.jpg', 'cutout3.jpg',\n            'cutout4.jpg', 'cutout5.jpg', 'cutout6.jpg']\n\n# Here is your draw_boxes function from the previous exercise\ndef draw_boxes(img, bboxes, color=(0, 0, 255), thick=6):\n    # Make a copy of the image\n    imcopy = np.copy(img)\n    # Iterate through the bounding boxes\n    for bbox in bboxes:\n        # Draw a rectangle given bbox coordinates\n        cv2.rectangle(imcopy, bbox[0], bbox[1], color, thick)\n    # Return the image copy with boxes drawn\n    return imcopy\n    \n    \n# Define a function that takes an image and a list of templates as inputs\n# then searches the image and returns the a list of bounding boxes \n# for matched templates\ndef find_matches(img, template_list):\n    # Make a copy of the image to draw on\n    # Define an empty list to take bbox coords\n    bbox_list = []\n    # Iterate through template list\n    # Read in templates one by one\n    # Use cv2.matchTemplate() to search the image\n    #     using whichever of the OpenCV search methods you prefer\n    # Use cv2.minMaxLoc() to extract the location of the best match\n    # Determine bounding box corners for the match\n    # Return the list of bounding boxes\n    return bbox_list\n\nbboxes = find_matches(image, templist)\nresult = draw_boxes(image, bboxes)\nplt.imshow(result)",
                    "name": "template_match.py"
                  },
                  {
                    "text": "# Define a function to search for template matches\n# and return a list of bounding boxes\ndef find_matches(img, template_list):\n    # Define an empty list to take bbox coords\n    bbox_list = []\n    # Define matching method\n    # Other options include: cv2.TM_CCORR_NORMED', 'cv2.TM_CCOEFF', 'cv2.TM_CCORR',\n    #         'cv2.TM_SQDIFF', 'cv2.TM_SQDIFF_NORMED'\n    method = cv2.TM_CCOEFF_NORMED\n    # Iterate through template list\n    for temp in template_list:\n        # Read in templates one by one\n        tmp = mpimg.imread(temp)\n        # Use cv2.matchTemplate() to search the image\n        result = cv2.matchTemplate(img, tmp, method)\n        # Use cv2.minMaxLoc() to extract the location of the best match\n        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\n        # Determine a bounding box for the match\n        w, h = (tmp.shape[1], tmp.shape[0])\n        if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:\n            top_left = min_loc\n        else:\n            top_left = max_loc\n        bottom_right = (top_left[0] + w, top_left[1] + h)\n        # Append bbox position to list\n        bbox_list.append((top_left, bottom_right))\n        # Return the list of bounding boxes\n        \n    return bbox_list\n\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 230993,
          "key": "e9c246ed-fc99-454b-b21a-34c81b2fa62c",
          "title": "Template Matching Quiz",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e9c246ed-fc99-454b-b21a-34c81b2fa62c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232559,
              "key": "e651e454-9644-4267-846b-97e183da27ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Template Matching Quiz\n===\n\nAlright, so the exercise in finding cars has so far been mostly for the purpose of getting you familiarized with searching for objects in an image and drawing bounding boxes where you find them.  But before we move on, one more quiz for intuition on the method of template matching!",
              "instructor_notes": ""
            },
            {
              "id": 232463,
              "key": "f00f6bc3-3d2e-4943-9f56-83c28524f22c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/5859a9eb_10-q-quiz-slide-v2/10-q-quiz-slide-v2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f00f6bc3-3d2e-4943-9f56-83c28524f22c",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 230994,
              "key": "a77271fc-3f57-4721-9b85-02d730e72f0a",
              "title": "Template Matching",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a77271fc-3f57-4721-9b85-02d730e72f0a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Assume your template is the car image on the left marked \"template\".  If the other cars (A-D) were located somewhere in an image, which ones would you find to be a match using template matching?",
                "answers": [
                  {
                    "id": "a1482016013888",
                    "text": "A",
                    "is_correct": false
                  },
                  {
                    "id": "a1482016025098",
                    "text": "B",
                    "is_correct": true
                  },
                  {
                    "id": "a1482016026018",
                    "text": "C",
                    "is_correct": false
                  },
                  {
                    "id": "a1482016026666",
                    "text": "D",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 232488,
          "key": "17ef141c-8e03-4fdf-87a2-6a7b6d6dbbe6",
          "title": "Color Histogram Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "17ef141c-8e03-4fdf-87a2-6a7b6d6dbbe6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232489,
              "key": "21a7575d-570a-46dc-a8f1-d049c765b725",
              "title": "Color Histogram Features",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8ZvNANafMU8",
                "china_cdn_id": "8ZvNANafMU8.mp4"
              }
            }
          ]
        },
        {
          "id": 232359,
          "key": "4f0692c6-e22d-4f28-b5d0-7990a4d8de86",
          "title": "Histograms of Color",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4f0692c6-e22d-4f28-b5d0-7990a4d8de86",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232360,
              "key": "444a37fd-5303-4161-91b0-980bce281fa2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Histograms of Color\n===\n\nYou've looked at using raw pixel intensities as features and now we'll look at histograms of pixel intensity (color histograms) as features.  \n\nI'll use the template shown below from the last exercise as an example.  This is a blown up version of the image, but If you want to try this yourself with the actual cutout image it's [here](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/cutout1.jpg):",
              "instructor_notes": ""
            },
            {
              "id": 232618,
              "key": "cc6f658f-1e49-4232-b717-19e9dffd849c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585b1db8_cutout1/cutout1.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cc6f658f-1e49-4232-b717-19e9dffd849c",
              "caption": "",
              "alt": null,
              "width": 1200,
              "height": 713,
              "instructor_notes": null
            },
            {
              "id": 232616,
              "key": "a376d4aa-2b33-4547-9dfb-b16464f6bdaf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can construct histograms of the R, G, and B channels like this:\n\n```python\nimport matplotlib.image as mpimg\nimport numpy as np\n\n# Read in the image\nimage = mpimg.imread('cutout1.jpg')\n\n# Take histograms in R, G, and B\nrhist = np.histogram(image[:,:,0], bins=32, range=(0, 256))\nghist = np.histogram(image[:,:,1], bins=32, range=(0, 256))\nbhist = np.histogram(image[:,:,2], bins=32, range=(0, 256))\n```\n\nWith `np.histogram()`, you don't actually have to specify the number of bins or the range, but here I've arbitrarily chosen 32 bins and specified `range=(0, 256)` in order to get orderly bin sizes.  `np.histogram()` returns a tuple of two arrays.  In this case, for example, `rhist[0]` contains the counts in each of the bins and `rhist[1]` contains the bin edges (so it is one element longer than `rhist[0]`).  \n\nTo look at a plot of these results, we can compute the bin centers from the bin edges.  Each of the histograms in this case have the same bins, so I'll just use the `rhist` bin edges:\n\n```python\n# Generating bin centers\nbin_edges = rhist[1]\nbin_centers = (bin_edges[1:]  + bin_edges[0:len(bin_edges)-1])/2\n```\n\nAnd then plotting up the results in a bar chart:\n\n```python\n# Plot a figure with all three bar charts\nfig = plt.figure(figsize=(12,3))\nplt.subplot(131)\nplt.bar(bin_centers, rhist[0])\nplt.xlim(0, 256)\nplt.title('R Histogram')\nplt.subplot(132)\nplt.bar(bin_centers, ghist[0])\nplt.xlim(0, 256)\nplt.title('G Histogram')\nplt.subplot(133)\nplt.bar(bin_centers, bhist[0])\nplt.xlim(0, 256)\nplt.title('B Histogram')\n```\n\nWhich gives us this result:",
              "instructor_notes": ""
            },
            {
              "id": 232617,
              "key": "d82b4df1-da97-4cd7-86da-926707094aaa",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585b1c43_rgb-histogram-plot/rgb-histogram-plot.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d82b4df1-da97-4cd7-86da-926707094aaa",
              "caption": "",
              "alt": null,
              "width": 2424,
              "height": 724,
              "instructor_notes": null
            },
            {
              "id": 232619,
              "key": "535990ac-932d-426a-af8e-b932ecf51402",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "These, collectively, are now our feature vector for this particular cutout image.  We can concatenate them in the following way:\n\n```python\nhist_features = np.concatenate((rhist[0], ghist[0], bhist[0]))\n```\n\nHaving a function that does all these steps might be useful for the project so for this next exercise, your goal is to write a function that takes an image and computes the RGB color histogram of features given a particular number of bins and pixels intensity range, and returns the concatenated RGB feature vector, like this:\n\n```python \n# Define a function to compute color histogram features  \ndef color_hist(img, nbins=32, bins_range=(0, 256)):\n    # Compute the histogram of the RGB channels separately\n    # Concatenate the histograms into a single feature vector\n    # Return the feature vector\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 233026,
              "key": "a20667e5-2110-468a-9a36-f4222ab9066c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "a20667e5-2110-468a-9a36-f4222ab9066c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6392557736165376",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimage = mpimg.imread('cutout1.jpg')\n\n# Define a function to compute color histogram features  \ndef color_hist(img, nbins=32, bins_range=(0, 256)):\n    # Compute the histogram of the RGB channels separately\n    rhist = None\n    ghist = None\n    bhist = None\n    # Generating bin centers\n    bin_centers = None\n    # Concatenate the histograms into a single feature vector\n    hist_features = None\n    # Return the individual histograms, bin_centers and feature vector\n    return rhist, ghist, bhist, bin_centers, hist_features\n    \nrh, gh, bh, bincen, feature_vec = color_hist(image, nbins=32, bins_range=(0, 256))\n\n# Plot a figure with all three bar charts\nif rh is not None:\n    fig = plt.figure(figsize=(12,3))\n    plt.subplot(131)\n    plt.bar(bincen, rh[0])\n    plt.xlim(0, 256)\n    plt.title('R Histogram')\n    plt.subplot(132)\n    plt.bar(bincen, gh[0])\n    plt.xlim(0, 256)\n    plt.title('G Histogram')\n    plt.subplot(133)\n    plt.bar(bincen, bh[0])\n    plt.xlim(0, 256)\n    plt.title('B Histogram')\n    fig.tight_layout()\nelse:\n    print('Your function is returning None for at least one variable...')",
                    "name": "color_histogram.py"
                  },
                  {
                    "text": "# Define a function to compute color histogram features  \ndef color_hist(img, nbins=32, bins_range=(0, 256)):\n    # Compute the histogram of the RGB channels separately\n    rhist = np.histogram(img[:,:,0], bins=nbins, range=bins_range)\n    ghist = np.histogram(img[:,:,1], bins=nbins, range=bins_range)\n    bhist = np.histogram(img[:,:,2], bins=nbins, range=bins_range)\n    # Generating bin centers\n    bin_edges = rhist[1]\n    bin_centers = (bin_edges[1:]  + bin_edges[0:len(bin_edges)-1])/2\n    # Concatenate the histograms into a single feature vector\n    hist_features = np.concatenate((rhist[0], ghist[0], bhist[0]))\n    # Return the individual histograms, bin_centers and feature vector\n    return rhist, ghist, bhist, bin_centers, hist_features\n    \n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 278870,
          "key": "276a3e82-a7bb-406e-9dd1-0ee2affeec03",
          "title": "Histogram Comparison",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "276a3e82-a7bb-406e-9dd1-0ee2affeec03",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 278970,
              "key": "860e3383-da10-44c6-837e-3d89f49af1d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Histogram Comparison\n\nLet's look at the color histogram features for two totally different images. The first image is of a red car and the second  a blue car. The red car's color histograms are displayed on the first row and the blue car's are displayed on the second row below. Here we are just looking at 8 bins per RGB channel.\n\nIf we had to, we could differentiate the two images based on the differences in histograms alone. As expected the image of the red car has a greater intensity of total bin values in the **R Histogram 1**  (Red Channel) compared to the blue car's **R Histogram 2**. In contrast the blue car has a greater intensity of total bin values in **B Histogram 2** (Blue Channel) than the red car's **B Histogram 1** features.\n\nDifferentiating images by the intensity and range of color they contain can be helpful for looking at car vs non-car images.",
              "instructor_notes": ""
            },
            {
              "id": 278871,
              "key": "8fddb69c-9838-44b9-8ebe-f38b16333c05",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58bfb1ca_hist-compare/hist-compare.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8fddb69c-9838-44b9-8ebe-f38b16333c05",
              "caption": "",
              "alt": null,
              "width": 1024,
              "height": 767,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 232490,
          "key": "f0d97245-afa4-4bf9-a6b4-9f0fede4f0db",
          "title": "Color Spaces",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0d97245-afa4-4bf9-a6b4-9f0fede4f0db",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232491,
              "key": "ab3aad0c-153d-4e80-bd36-2227e0f9ff70",
              "title": "Color Spaces",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Adunl74VJIY",
                "china_cdn_id": "Adunl74VJIY.mp4"
              }
            }
          ]
        },
        {
          "id": 232834,
          "key": "e8ac94ba-63a2-45c8-b4ff-b8cf88798e29",
          "title": "Explore Color Spaces",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e8ac94ba-63a2-45c8-b4ff-b8cf88798e29",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232883,
              "key": "6d1bff71-87cb-45b7-8307-4a2af8188532",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Explore Color Spaces\n\nYou can study the distribution of color values in an image by plotting each pixel in some color space. Here's a code snippet that you can use to generate 3D plots:\n\n```python\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef plot3d(pixels, colors_rgb,\n        axis_labels=list(\"RGB\"), axis_limits=((0, 255), (0, 255), (0, 255))):\n    \"\"\"Plot pixels in 3D.\"\"\"\n\n    # Create figure and 3D axes\n    fig = plt.figure(figsize=(8, 8))\n    ax = Axes3D(fig)\n\n    # Set axis limits\n    ax.set_xlim(*axis_limits[0])\n    ax.set_ylim(*axis_limits[1])\n    ax.set_zlim(*axis_limits[2])\n\n    # Set axis labels and sizes\n    ax.tick_params(axis='both', which='major', labelsize=14, pad=8)\n    ax.set_xlabel(axis_labels[0], fontsize=16, labelpad=16)\n    ax.set_ylabel(axis_labels[1], fontsize=16, labelpad=16)\n    ax.set_zlabel(axis_labels[2], fontsize=16, labelpad=16)\n\n    # Plot pixel values with colors given in colors_rgb\n    ax.scatter(\n        pixels[:, :, 0].ravel(),\n        pixels[:, :, 1].ravel(),\n        pixels[:, :, 2].ravel(),\n        c=colors_rgb.reshape((-1, 3)), edgecolors='none')\n\n    return ax  # return Axes3D object for further manipulation\n\n\n# Read a color image\nimg = cv2.imread(\"000275.png\")\n\n# Select a small fraction of pixels to plot by subsampling it\nscale = max(img.shape[0], img.shape[1], 64) / 64  # at most 64 rows and columns\nimg_small = cv2.resize(img, (np.int(img.shape[1] / scale), np.int(img.shape[0] / scale)), interpolation=cv2.INTER_NEAREST)\n\n# Convert subsampled image to desired color space(s)\nimg_small_RGB = cv2.cvtColor(img_small, cv2.COLOR_BGR2RGB)  # OpenCV uses BGR, matplotlib likes RGB\nimg_small_HSV = cv2.cvtColor(img_small, cv2.COLOR_BGR2HSV)\nimg_small_rgb = img_small_RGB / 255.  # scaled to [0, 1], only for plotting\n\n# Plot and show\nplot3d(img_small_RGB, img_small_rgb)\nplt.show()\n\nplot3d(img_small_HSV, img_small_rgb, axis_labels=list(\"HSV\"))\nplt.show()\n```",
              "instructor_notes": ""
            },
            {
              "id": 232886,
              "key": "7c2e083f-e976-4738-ad9a-0a7397b56a04",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Analyze video frames\n\nUse this to first explore some video frames, and see if you can locate clusters of colors that correspond to the sky, trees, specific cars, etc. Here are some sample images for you to use (these are taken from the [KITTI Vision Benchmark Suite](http://www.cvlibs.net/datasets/kitti/)):",
              "instructor_notes": ""
            },
            {
              "id": 232897,
              "key": "184f8f70-1475-416b-afb1-62632bcdc626",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c7429_000275/000275.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/184f8f70-1475-416b-afb1-62632bcdc626",
              "caption": "",
              "alt": null,
              "width": 1242,
              "height": 375,
              "instructor_notes": null
            },
            {
              "id": 232898,
              "key": "1a3aa65a-4c70-40de-a04d-dca75576d345",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c7469_001240/001240.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1a3aa65a-4c70-40de-a04d-dca75576d345",
              "caption": "",
              "alt": null,
              "width": 1238,
              "height": 374,
              "instructor_notes": null
            },
            {
              "id": 232899,
              "key": "697df467-824b-4993-a83d-36f9cb62dbef",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c7456_000528/000528.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/697df467-824b-4993-a83d-36f9cb62dbef",
              "caption": "",
              "alt": null,
              "width": 1242,
              "height": 375,
              "instructor_notes": null
            },
            {
              "id": 232919,
              "key": "8a05b3c2-0694-4baf-ba02-b039f953dfcc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Analyze vehicle and non-vehicle images\n\nYou might've noticed that it is hard to distinguish between the class of pixels you are interested in (vehicles, in this case) from the background. So it may be more beneficial to plot pixels from vehicle and non-vehicle images separately. See if you can identify any trends using these samples:",
              "instructor_notes": ""
            },
            {
              "id": 232921,
              "key": "f4980813-101c-4b0a-9216-000eed00d03e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c9929_25/25.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f4980813-101c-4b0a-9216-000eed00d03e",
              "caption": "",
              "alt": null,
              "width": 64,
              "height": 64,
              "instructor_notes": null
            },
            {
              "id": 232922,
              "key": "ad146c13-191e-45a2-ab04-597434c948dd",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c992e_31/31.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ad146c13-191e-45a2-ab04-597434c948dd",
              "caption": "",
              "alt": null,
              "width": 64,
              "height": 64,
              "instructor_notes": null
            },
            {
              "id": 232923,
              "key": "171fea7f-34c1-47e8-a401-8dc50c2bb3d0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c992e_53/53.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/171fea7f-34c1-47e8-a401-8dc50c2bb3d0",
              "caption": "",
              "alt": null,
              "width": 64,
              "height": 64,
              "instructor_notes": null
            },
            {
              "id": 232924,
              "key": "a215037c-feb9-4a25-b842-8ec2c6c3a281",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c99a5_8/8.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a215037c-feb9-4a25-b842-8ec2c6c3a281",
              "caption": "",
              "alt": null,
              "width": 64,
              "height": 64,
              "instructor_notes": null
            },
            {
              "id": 232925,
              "key": "8c2215ed-a5ac-47fd-9f2a-985d58c4219f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c9998_2/2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8c2215ed-a5ac-47fd-9f2a-985d58c4219f",
              "caption": "",
              "alt": null,
              "width": 64,
              "height": 64,
              "instructor_notes": null
            },
            {
              "id": 232926,
              "key": "b08c0bc9-1495-4f63-8ad8-e5d75f12dcc0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c9999_3/3.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b08c0bc9-1495-4f63-8ad8-e5d75f12dcc0",
              "caption": "",
              "alt": null,
              "width": 64,
              "height": 64,
              "instructor_notes": null
            },
            {
              "id": 232927,
              "key": "53080257-c3d3-4422-ae9f-ea5e27c95b5d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Try experimenting with different color spaces such as LUV or HLS to see if you can find a way to consistently separate vehicle images from non-vehicles. It doesn't have to be perfect, but it will help when combined with other kinds of features fed into a classifier.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 232870,
          "key": "404dfd70-937b-468f-a3df-5fb88cc2f765",
          "title": "Spatial Binning of Color",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "404dfd70-937b-468f-a3df-5fb88cc2f765",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232872,
              "key": "77f73439-623a-4757-9b2a-7c15fb5b1c92",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Spatial Binning of Color\n===",
              "instructor_notes": ""
            },
            {
              "id": 232880,
              "key": "54e6a542-754a-47ec-a499-2af9c16589b8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c6ac5_spatial-binning/spatial-binning.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/54e6a542-754a-47ec-a499-2af9c16589b8",
              "caption": "",
              "alt": null,
              "width": 839,
              "height": 327,
              "instructor_notes": null
            },
            {
              "id": 232918,
              "key": "44fbb358-afec-4d85-a49c-565e38c68a7b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You saw earlier in the lesson that template matching is not a particularly robust method for finding vehicles unless you know exactly what your target object looks like.  However, raw pixel values are still quite useful to include in your feature vector in searching for cars.\n\nWhile it could be cumbersome to include three color channels of a full resolution image, you can perform spatial binning on an image and still retain enough information to help in finding vehicles.  \n\nAs you can see in the example above, even going all the way down to 32 x 32 pixel resolution, the car itself is still clearly identifiable by eye, and this means that the relevant features are still preserved at this resolution.  \n\nA convenient function for scaling down the resolution of an image is OpenCV's `cv2.resize()`.  You can use it to scale a color image or a single color channel like this (you can find the original image [here](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/test_img.jpg)):\n\n```python\nimport cv2\nimport matplotlib.image as mpimg\n\nimage = mpimg.imread('test_img.jpg')\nsmall_img = cv2.resize(image, (32, 32))\nprint(small_img.shape)\n(32, 32, 3)\n```\n\nIf you then wanted to convert this to a one dimensional [feature vector](https://en.wikipedia.org/wiki/Feature_vector), you could simply say something like:\n\n```python\nfeature_vec = small_img.ravel()\nprint(feature_vec.shape)\n(3072,)\n```\n\nOk, but 3072 elements is still quite a few features!  Could you get away with even lower resolution?  I'll leave that for you to explore later when you're training your classifier.  \n\nNow that you've played with color spaces a bit, it's probably a good time to write a function that allows you to convert any test image into a feature vector that you can feed your classifier. Your goal in this exercise is to write a function that takes an image, a color space conversion, and the resolution you would like to convert it to, and returns a feature vector.  Something like this:\n\n```python\n# Define a function that takes an image, a color space, \n# and a new image size\n# and returns a feature vector\ndef bin_spatial(img, color_space='RGB', size=(32, 32)):\n    # Convert image to new color space (if specified)\n    # Use cv2.resize().ravel() to create the feature vector\n    # Return the feature vector\n```\n\nYou can download the cutout images in the quiz [here](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/cutouts.zip).",
              "instructor_notes": ""
            },
            {
              "id": 233027,
              "key": "4d23df16-30e9-405c-9078-e326aecd2938",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "4d23df16-30e9-405c-9078-e326aecd2938",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5465909952118784",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\n# Read in an image\n# You can also read cutout2, 3, 4 etc. to see other examples\nimage = mpimg.imread('cutout1.jpg')\n\n# Define a function to compute color histogram features  \n# Pass the color_space flag as 3-letter all caps string\n# like 'HSV' or 'LUV' etc.\n# KEEP IN MIND IF YOU DECIDE TO USE THIS FUNCTION LATER\n# IN YOUR PROJECT THAT IF YOU READ THE IMAGE WITH \n# cv2.imread() INSTEAD YOU START WITH BGR COLOR!\ndef bin_spatial(img, color_space='RGB', size=(32, 32)):\n    # Convert image to new color space (if specified)\n    # Use cv2.resize().ravel() to create the feature vector\n    features = img.ravel() # Remove this line!\n    # Return the feature vector\n    return features\n    \nfeature_vec = bin_spatial(image, color_space='RGB', size=(32, 32))\n\n# Plot features\nplt.plot(feature_vec)\nplt.title('Spatially Binned Features')",
                    "name": "spatial_bin.py"
                  },
                  {
                    "text": "# Define a function to compute color histogram features  \n# Pass the color_space flag as 3-letter all caps string\n# like 'HSV' or 'LUV' etc.\ndef bin_spatial(img, color_space='RGB', size=(32, 32)):\n    # Convert image to new color space (if specified)\n    if color_space != 'RGB':\n        if color_space == 'HSV':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n        elif color_space == 'LUV':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2LUV)\n        elif color_space == 'HLS':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2HLS)\n        elif color_space == 'YUV':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2YUV)\n        elif color_space == 'YCrCb':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb)\n    else: feature_image = np.copy(img)             \n    # Use cv2.resize().ravel() to create the feature vector\n    features = cv2.resize(feature_image, size).ravel() \n    # Return the feature vector\n    return features",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 232492,
          "key": "ece9a8d8-3df0-449c-b0ca-8ee2be6a426b",
          "title": "Gradient Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ece9a8d8-3df0-449c-b0ca-8ee2be6a426b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232493,
              "key": "bd562133-2acf-48aa-8395-7beceb1be9df",
              "title": "Gradient Features",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cvGtDBu8ONQ",
                "china_cdn_id": "cvGtDBu8ONQ.mp4"
              }
            }
          ]
        },
        {
          "id": 232494,
          "key": "3ad77532-b86a-432f-a0ee-deb94e3778b4",
          "title": "HOG Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3ad77532-b86a-432f-a0ee-deb94e3778b4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232495,
              "key": "db9560dd-e3cf-4cdb-be04-692587bcd95c",
              "title": "HOG Features",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Here is a [presentation](https://www.youtube.com/watch?v=7S5qXET179I) on using Histogram of Oriented Gradient (HOG) features for pedestrian detection by Navneet Dalal, the original developer of HOG for object detection.  You can find his original paper on the subject [here](http://lear.inrialpes.fr/people/triggs/pubs/Dalal-cvpr05.pdf).  ",
              "video": {
                "youtube_id": "DNweoAqjwNQ",
                "china_cdn_id": "DNweoAqjwNQ.mp4"
              }
            }
          ]
        },
        {
          "id": 229210,
          "key": "8c5ca570-3888-459b-9189-94cbfb8ef02c",
          "title": "Data Exploration",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8c5ca570-3888-459b-9189-94cbfb8ef02c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232624,
              "key": "f1c494e9-9e32-4bd1-998a-6e00d60290f1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Data Exploration\n===\n\nFor the exercises throughout the rest of this lesson, we'll use a relatively small labeled dataset to try out feature extraction and training a classifier.  Before we get on to extracting HOG features and training a classifier, let's explore the dataset a bit. This dataset is a subset of the data you'll be starting with for the project.  \n\nThere's no need to download anything at this point, but if you want to, you can download this subset of images for [vehicles](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/vehicles_smallset.zip) and [non-vehicles](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/non-vehicles_smallset.zip), or if you prefer you can directly grab the larger project dataset for [vehicles](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/vehicles.zip) and [non-vehicles](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/non-vehicles.zip).  \n\nThese datasets are comprised of images taken from the [GTI vehicle image database](http://www.gti.ssr.upm.es/data/Vehicle_database.html), the [KITTI vision benchmark suite](http://www.cvlibs.net/datasets/kitti/), and examples extracted from the project video itself.  In this exercise, you can explore the data to see what you're working with.  \n\nYou are also welcome and encouraged to explore the recently released [Udacity labeled dataset](https://github.com/udacity/self-driving-car/tree/master/annotations).  Each of the Udacity datasets comes with a `labels.csv` file that gives bounding box corners for each object labeled.",
              "instructor_notes": ""
            },
            {
              "id": 232625,
              "key": "956e41bd-504a-4dc1-a480-eb05f1390bbb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585b3d71_car-not-car-examples/car-not-car-examples.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/956e41bd-504a-4dc1-a480-eb05f1390bbb",
              "caption": "",
              "alt": null,
              "width": 1046,
              "height": 681,
              "instructor_notes": null
            },
            {
              "id": 232626,
              "key": "c77b383b-c3f2-42cc-a986-5cebbb5775db",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here, I've provided you with the code to extract the car/not-car image filenames into two lists.  Write a function that takes in these two lists and returns a dictionary with the keys \"n_cars\", \"n_notcars\", \"image_shape\", and \"data_type\", like this: \n\n```python\n# Define a function to return some characteristics of the dataset \ndef data_look(car_list, notcar_list):\n    data_dict = {}\n    # Define a key in data_dict \"n_cars\" and store the number of car images\n    # Define a key \"n_notcars\" and store the number of notcar images\n    # Read in a test image, either car or notcar\n    # Define a key \"image_shape\" and store the test image shape 3-tuple\n    # Define a key \"data_type\" and store the data type of the test image.\n    # Return data_dict\n    return data_dict\n```",
              "instructor_notes": ""
            },
            {
              "id": 229245,
              "key": "10196702313",
              "title": "car_notcar",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "10196702313",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "car_notcar",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "10195802534",
                "initial_code_files": [
                  {
                    "text": "import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport glob\n#from skimage.feature import hog\n#from skimage import color, exposure\n# images are divided up into vehicles and non-vehicles\n\nimages = glob.glob('*.jpeg')\ncars = []\nnotcars = []\n\nfor image in images:\n    if 'image' in image or 'extra' in image:\n        notcars.append(image)\n    else:\n        cars.append(image)\n        \n# Define a function to return some characteristics of the dataset \ndef data_look(car_list, notcar_list):\n    data_dict = {}\n    # Define a key in data_dict \"n_cars\" and store the number of car images\n    data_dict[\"n_cars\"] = 0\n    # Define a key \"n_notcars\" and store the number of notcar images\n    data_dict[\"n_notcars\"] = 0\n    # Read in a test image, either car or notcar\n    # Define a key \"image_shape\" and store the test image shape 3-tuple\n    data_dict[\"image_shape\"] = (0, 0, 0)\n    # Define a key \"data_type\" and store the data type of the test image.\n    data_dict[\"data_type\"] = None\n    # Return data_dict\n    return data_dict\n    \ndata_info = data_look(cars, notcars)\n\nprint('Your function returned a count of', \n      data_info[\"n_cars\"], ' cars and', \n      data_info[\"n_notcars\"], ' non-cars')\nprint('of size: ',data_info[\"image_shape\"], ' and data type:', \n      data_info[\"data_type\"])\n# Just for fun choose random car / not-car indices and plot example images   \ncar_ind = np.random.randint(0, len(cars))\nnotcar_ind = np.random.randint(0, len(notcars))\n    \n# Read in car / not-car images\ncar_image = mpimg.imread(cars[car_ind])\nnotcar_image = mpimg.imread(notcars[notcar_ind])\n\n\n# Plot the examples\nfig = plt.figure()\nplt.subplot(121)\nplt.imshow(car_image)\nplt.title('Example Car Image')\nplt.subplot(122)\nplt.imshow(notcar_image)\nplt.title('Example Not-car Image')\n",
                    "name": "car_notcar.py"
                  },
                  {
                    "text": "# Define a function to return some characteristics of the dataset \ndef data_look(car_list, notcar_list):\n    data_dict = {}\n    # Define a key in data_dict \"n_cars\" and store the number of car images\n    data_dict[\"n_cars\"] = len(car_list)\n    # Define a key \"n_notcars\" and store the number of notcar images\n    data_dict[\"n_notcars\"] = len(notcar_list)\n    # Read in a test image, either car or notcar\n    example_img = mpimg.imread(car_list[0])\n    # Define a key \"image_shape\" and store the test image shape 3-tuple\n    data_dict[\"image_shape\"] = example_img.shape\n    # Define a key \"data_type\" and store the data type of the test image.\n    data_dict[\"data_type\"] = example_img.dtype\n    # Return data_dict\n    return data_dict",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 232629,
          "key": "d479f43a-7bbb-4de7-9452-f6b991ece599",
          "title": "scikit-image HOG",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d479f43a-7bbb-4de7-9452-f6b991ece599",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232630,
              "key": "f3f25879-9de5-4a54-8edd-0de705563df3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "scikit-image HOG\n===\n\nNow that we've got a dataset let's extract some HOG features!\n\n",
              "instructor_notes": ""
            },
            {
              "id": 232633,
              "key": "071c6a5d-f0d6-47b2-a5d3-8f9f566f8db9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585b4f91_scikit-image-logo/scikit-image-logo.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/071c6a5d-f0d6-47b2-a5d3-8f9f566f8db9",
              "caption": "",
              "alt": null,
              "width": 568,
              "height": 140,
              "instructor_notes": null
            },
            {
              "id": 232634,
              "key": "c7add09f-d3b4-42a1-9a98-7c8ed0960bcf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The [scikit-image](http://scikit-image.org/) package has a built in function to extract Histogram of Oriented Gradient features.  The documentation for this function can be found [here](http://scikit-image.org/docs/dev/api/skimage.feature.html?highlight=feature%20hog#skimage.feature.hog) and a brief explanation of the algorithm and tutorial can be found [here](http://scikit-image.org/docs/dev/auto_examples/features_detection/plot_hog.html).  \n\nThe scikit-image `hog()` function takes in a single color channel or grayscaled image as input, as well as various parameters.  These parameters include `orientations`, `pixels_per_cell` and `cells_per_block`.  \n\nThe number of `orientations` is specified as an integer, and represents the number of orientation bins that the gradient information will be split up into in the histogram.  Typical values are between 6 and 12 bins.  \n\nThe `pixels_per_cell` parameter specifies the cell size over which each gradient histogram is computed.  This paramater is passed as a 2-tuple so you could have different cell sizes in x and y, but cells are commonly chosen to be square.  \n\nThe `cells_per_block` parameter is also passed as a 2-tuple, and specifies the local area over which the histogram counts in a given cell will be normalized.  Block normalization is not necessarily required, but generally leads to a more robust feature set.  \n\nThere is another optional power law or \"gamma\" normalization scheme set by the flag `transform_sqrt`.  This type of normalization may help reduce the effects of shadows or other illumination variation, but will cause an error if your image contains negative values (because it's taking the square root of image values).  ",
              "instructor_notes": ""
            },
            {
              "id": 232637,
              "key": "8b1e0ef6-2e40-47a1-a7f4-fe21cc7db018",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585b6011_hog-visualization/hog-visualization.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8b1e0ef6-2e40-47a1-a7f4-fe21cc7db018",
              "caption": "",
              "alt": null,
              "width": 1866,
              "height": 1324,
              "instructor_notes": null
            },
            {
              "id": 232638,
              "key": "4b3afc98-8e60-462d-b096-8acef688f649",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This is where things get a little confusing though.  Let's say you are computing HOG features for an image like the one shown above that is <span class=\"mathquill\">64\\times64</span> pixels.  If you set `pixels_per_cell=(8, 8)` and `cells_per_block=(2, 2)` and `orientations=9`.   How many elements will you have in your HOG feature vector for the entire image?\n\nYou might guess the number of orientations times the number of cells, or <span class=\"mathquill\">9\\times8\\times8 = 576</span>, but that's not the case if you're using block normalization!  In fact, the HOG features for all cells in each block are computed at each block position and the block steps across and down through the image cell by cell. \n\nSo, the actual number of features in your final feature vector will be the total number of block positions multiplied by the number of cells per block, times the number of orientations, or in the case shown above: <span class=\"mathquill\">7\\times7\\times2\\times2\\times9 = 1764</span>.  ",
              "instructor_notes": ""
            },
            {
              "id": 232639,
              "key": "ea6c5eaf-a4d2-4584-8023-0aad6f892c6e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For the example above, you would call the `hog()` function on a single color channel `img` like this:\n\n```python\nfrom skimage.feature import hog\npix_per_cell = 8\ncell_per_block = 2\norient = 9\n\nhog_features, hog_image = hog(img, orientations=orient,\n                          pixels_per_cell=(pix_per_cell, pix_per_cell), \n                          cells_per_block=(cell_per_block, cell_per_block), \n                          visualise=True, feature_vector=False,\n                          block_norm=\"L2-Hys\")\n```",
              "instructor_notes": ""
            },
            {
              "id": 232778,
              "key": "0739fd84-761c-4300-a8fa-644c8d73b08b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The `visualise=True` flag tells the function to output a visualization of the HOG feature computation as well, which we're calling `hog_image` in this case.  If we take a look at a single color channel for a random car image, and its corresponding HOG visulization, they look like this:",
              "instructor_notes": ""
            },
            {
              "id": 232781,
              "key": "f6cfcf87-ee4f-4c82-b209-438fe42231c8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c12d2_car-and-hog/car-and-hog.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f6cfcf87-ee4f-4c82-b209-438fe42231c8",
              "caption": "",
              "alt": null,
              "width": 1686,
              "height": 902,
              "instructor_notes": null
            },
            {
              "id": 232780,
              "key": "64dbf6cb-115a-402e-af19-645c419afeaf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The HOG visualization is not actually the feature vector, but rather, a representation that shows the dominant gradient direction within each cell with brightness corresponding to the strength of gradients in that cell, much like the \"star\" representation in the last video.  \n\nIf you look at the `hog_features` output, you'll find it's an array of shape <span class=\"mathquill\">7\\times7\\times2\\times2\\times9</span>.  This corresponds to the fact that a grid of <span class=\"mathquill\">7\\times7</span> blocks were sampled, with <span class=\"mathquill\">2\\times2</span> cells in each block and <span class=\"mathquill\">9</span> orientations per cell.  You can unroll this array into a feature vector using `features.ravel()`, which yields, in this case, a one dimensional array of length <span class=\"mathquill\">1764</span>.\n\nAlternatively, you can set the `feature_vector=True` flag when calling the `hog()` function to automatically unroll the features.  In the project, it could be useful to have a function defined that you could pass an image to with specifications for `orientations`, `pixels_per_cell`, and `cells_per_block`, as well as flags set for whether or not you want the feature vector unrolled and/or a visualization image, so let's write it!",
              "instructor_notes": ""
            },
            {
              "id": 233034,
              "key": "6a4c0d0c-0b67-4435-8d02-3b84e0031239",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```python\n# Define a function to return HOG features and visualization\n# Features will always be the first element of the return\n# Image data will be returned as the second element if visualize= True\n# Otherwise there is no second return element\n\ndef get_hog_features(img, orient, pix_per_cell, cell_per_block, vis=True, feature_vec=True):\n\n    # TODO: Complete the function body and returns\n    pass\n\n\n\n```\n\n**Note:** you could also include a keyword to set the `tranform_sqrt` flag but for this exercise you can just leave this at the default value of `transform_sqrt=False`.   ",
              "instructor_notes": ""
            },
            {
              "id": 232788,
              "key": "aa642318-03e8-4b5a-b5b5-a4b0b6a24dbe",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "aa642318-03e8-4b5a-b5b5-a4b0b6a24dbe",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4861050127253504",
                "initial_code_files": [
                  {
                    "text": "import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport glob\nfrom skimage.feature import hog\n\n# Read in our vehicles\ncar_images = glob.glob('*.jpeg')\n        \n# Define a function to return HOG features and visualization\n# Features will always be the first element of the return\n# Image data will be returned as the second element if visualize= True\n# Otherwise there is no second return element\n\ndef get_hog_features(img, orient, pix_per_cell, cell_per_block, vis=True, \n                     feature_vec=True):\n                         \n    # TODO: Complete the function body and returns\n    pass\n\n# Generate a random index to look at a car image\nind = np.random.randint(0, len(car_images))\n# Read in the image\nimage = mpimg.imread(car_images[ind])\ngray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n\n# Call our function with vis=True to see an image output\nfeatures, hog_image = get_hog_features(gray, orient= 9, \n                        pix_per_cell= 8, cell_per_block= 2, \n                        vis=True, feature_vec=False)\n\n\n# Plot the examples\nfig = plt.figure()\nplt.subplot(121)\nplt.imshow(image, cmap='gray')\nplt.title('Example Car Image')\nplt.subplot(122)\nplt.imshow(hog_image, cmap='gray')\nplt.title('HOG Visualization')",
                    "name": "get_hog.py"
                  },
                  {
                    "text": "def get_hog_features(img, orient, pix_per_cell, cell_per_block, vis=True,\n                     feature_vec=True):\n                         \n    \"\"\"\n    Function accepts params and returns HOG features (optionally flattened) and an optional matrix for \n    visualization. Features will always be the first return (flattened if feature_vector= True).\n    A visualization matrix will be the second return if visualize = True.\n    \"\"\"\n    \n    return_list = hog(img, orientations=orient, pixels_per_cell=(pix_per_cell, pix_per_cell),\n                                  cells_per_block=(cell_per_block, cell_per_block),\n                                  block_norm= 'L2-Hys', transform_sqrt=False, \n                                  visualise= vis, feature_vector= feature_vec)\n    \n    # name returns explicitly\n    hog_features = return_list[0]\n    if vis:\n        hog_image = return_list[1]\n        return hog_features, hog_image\n    else:\n        return hog_features",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 232496,
          "key": "086ae6da-f3e1-4897-8e77-31500b7c26c1",
          "title": "Combining Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "086ae6da-f3e1-4897-8e77-31500b7c26c1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232497,
              "key": "4b01efd6-d973-44fe-bb58-8daa412bc32a",
              "title": "Combining Features",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5tQx6J-VzsI",
                "china_cdn_id": "5tQx6J-VzsI.mp4"
              }
            }
          ]
        },
        {
          "id": 232863,
          "key": "cacf86d7-f8eb-46bd-9f09-34a2ff208ce8",
          "title": "Combine and Normalize Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cacf86d7-f8eb-46bd-9f09-34a2ff208ce8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232864,
              "key": "0ee4d55f-c16a-47f2-843b-f6c9f7bc8144",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Combine and Normalize Features\n===",
              "instructor_notes": ""
            },
            {
              "id": 232868,
              "key": "09216464-30a9-438a-83e7-547aec1572a5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585c6731_scaled-features-vis/scaled-features-vis.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/09216464-30a9-438a-83e7-547aec1572a5",
              "caption": "",
              "alt": null,
              "width": 919,
              "height": 341,
              "instructor_notes": null
            },
            {
              "id": 233028,
              "key": "62587a54-022a-4b1d-b857-0f0f863afccb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you've got several feature extraction methods in your toolkit, you're almost ready to train a classifier, but first, as in any machine learning application, you need to normalize your data.  Python's `sklearn` package provides you with the `StandardScaler()` method to accomplish this task.  To read more about how you can choose different normalizations with the `StandardScaler()` method, check out the [documentation](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html).\n\nTo apply `StandardScaler()` you need to first have your data in the right format, as a numpy array where each row is a single feature vector. I will often create a list of feature vectors, and then convert them like this:\n\n```python\nimport numpy as np\nfeature_list = [feature_vec1, feature_vec2, ...]\n# Create an array stack, NOTE: StandardScaler() expects np.float64\nX = np.vstack(feature_list).astype(np.float64)\n```\n\nYou can then fit a scaler to X, and scale it like this:\n\n```python\nfrom sklearn.preprocessing import StandardScaler\n# Fit a per-column scaler\nX_scaler = StandardScaler().fit(X)\n# Apply the scaler to X\nscaled_X = X_scaler.transform(X)\n```\n\nIt's important to note here that when you are using a scaler to train a classifier, you want to *only fit the scaler on the training data*, and then transform both the training and test sets using the scaler. Why? If you provide both the training and test set to the scaler, you are allowing your model a peek into the values contained in the test set, and it's no longer as useful at generalizing to unseen data.\n\nNow, `scaled_X` contains the normalized feature vectors.   In this next exercise, I've provided the feature scaling step for you, but I need you to provide the feature vectors.  I've also provided versions of the `bin_spatial()` and `color_hist()` functions you wrote in previous exercises. \n\nYour goal in this exercise is to write a function that takes in a list of image filenames, reads them one by one, then applies a color conversion (if necessary) and uses `bin_spatial()` and `color_hist()` to generate feature vectors.  Your function should then concatenate those two feature vectors and append the result to a list.  After cycling through all the images, your function should return the list of feature vectors.  Something like this: \n\n```python\n# Define a function to extract features from a list of images\n# Have this function call bin_spatial() and color_hist()\ndef extract_features(imgs, cspace='RGB', spatial_size=(32, 32),\n                        hist_bins=32, hist_range=(0, 256)):\n    # Create a list to append feature vectors to\n    features = []\n    # Iterate through the list of images\n        # Read in each one by one\n        # apply color conversion if other than 'RGB'\n        # Apply bin_spatial() to get spatial color features\n        # Apply color_hist() to get color histogram features\n        # Append the new feature vector to the features list\n    # Return list of feature vectors\n    return features\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 233033,
              "key": "10278182278",
              "title": "normalize_and_shuffle",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "10278182278",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "norm_and_shuffle",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "10283269786",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom sklearn.preprocessing import StandardScaler\nimport glob\n\n# Define a function to compute binned color features  \ndef bin_spatial(img, size=(32, 32)):\n    # Use cv2.resize().ravel() to create the feature vector\n    features = cv2.resize(img, size).ravel() \n    # Return the feature vector\n    return features\n\n# Define a function to compute color histogram features  \ndef color_hist(img, nbins=32, bins_range=(0, 256)):\n    # Compute the histogram of the color channels separately\n    channel1_hist = np.histogram(img[:,:,0], bins=nbins, range=bins_range)\n    channel2_hist = np.histogram(img[:,:,1], bins=nbins, range=bins_range)\n    channel3_hist = np.histogram(img[:,:,2], bins=nbins, range=bins_range)\n    # Concatenate the histograms into a single feature vector\n    hist_features = np.concatenate((channel1_hist[0], channel2_hist[0], channel3_hist[0]))\n    # Return the individual histograms, bin_centers and feature vector\n    return hist_features\n\n###### TODO ###########\n# Define a function to extract features from a list of images\n# Have this function call bin_spatial() and color_hist()\ndef extract_features(imgs, cspace='RGB', spatial_size=(32, 32),\n                        hist_bins=32, hist_range=(0, 256)):\n    # Create a list to append feature vectors to\n    features = []\n    # Iterate through the list of images\n        # Read in each one by one\n        # apply color conversion if other than 'RGB'\n        # Apply bin_spatial() to get spatial color features\n        # Apply color_hist() to get color histogram features\n        # Append the new feature vector to the features list\n    # Return list of feature vectors\n    return features\n\nimages = glob.glob('*.jpeg')\ncars = []\nnotcars = []\nfor image in images:\n    if 'image' in image or 'extra' in image:\n        notcars.append(image)\n    else:\n        cars.append(image)\n        \ncar_features = extract_features(cars, cspace='RGB', spatial_size=(32, 32),\n                        hist_bins=32, hist_range=(0, 256))\nnotcar_features = extract_features(notcars, cspace='RGB', spatial_size=(32, 32),\n                        hist_bins=32, hist_range=(0, 256))\n\nif len(car_features) > 0:\n    # Create an array stack of feature vectors\n    X = np.vstack((car_features, notcar_features)).astype(np.float64)                        \n    # Fit a per-column scaler\n    X_scaler = StandardScaler().fit(X)\n    # Apply the scaler to X\n    scaled_X = X_scaler.transform(X)\n    car_ind = np.random.randint(0, len(cars))\n    # Plot an example of raw and scaled features\n    fig = plt.figure(figsize=(12,4))\n    plt.subplot(131)\n    plt.imshow(mpimg.imread(cars[car_ind]))\n    plt.title('Original Image')\n    plt.subplot(132)\n    plt.plot(X[car_ind])\n    plt.title('Raw Features')\n    plt.subplot(133)\n    plt.plot(scaled_X[car_ind])\n    plt.title('Normalized Features')\n    fig.tight_layout()\nelse: \n    print('Your function only returns empty feature vectors...')",
                    "name": "norm_shuffle.py"
                  },
                  {
                    "text": "# Define a function to extract features from a list of images\n# Have this function call bin_spatial() and color_hist()\ndef extract_features(imgs, cspace='RGB', spatial_size=(32, 32),\n                        hist_bins=32, hist_range=(0, 256)):\n    # Create a list to append feature vectors to\n    features = []\n    # Iterate through the list of images\n    for file in imgs:\n        # Read in each one by one\n        image = mpimg.imread(file)\n        # apply color conversion if other than 'RGB'\n        if cspace != 'RGB':\n            if cspace == 'HSV':\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)\n            elif cspace == 'LUV':\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2LUV)\n            elif cspace == 'HLS':\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HLS)\n            elif cspace == 'YUV':\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YUV)\n        else: feature_image = np.copy(image)      \n        # Apply bin_spatial() to get spatial color features\n        spatial_features = bin_spatial(feature_image, size=spatial_size)\n        # Apply color_hist() also with a color space option now\n        hist_features = color_hist(feature_image, nbins=hist_bins, bins_range=hist_range)\n        # Append the new feature vector to the features list\n        features.append(np.concatenate((spatial_features, hist_features)))\n    # Return list of feature vectors\n    return features\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 232498,
          "key": "e076b291-41e4-40f7-9268-c5054508b77c",
          "title": "Build a Classifier",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e076b291-41e4-40f7-9268-c5054508b77c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232499,
              "key": "ebbf50eb-976c-4496-ac51-2ca013cbad76",
              "title": "Build a Classifier",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YUCFFNC7tw4",
                "china_cdn_id": "YUCFFNC7tw4.mp4"
              }
            }
          ]
        },
        {
          "id": 232500,
          "key": "9a67cfac-5392-4fa9-8ef9-5ac60b22c8f0",
          "title": "Labeled Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9a67cfac-5392-4fa9-8ef9-5ac60b22c8f0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232501,
              "key": "ff70318d-5f36-41ea-8648-493bd331d461",
              "title": "Labeled Data",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "H_i1ctez_Qw",
                "china_cdn_id": "H_i1ctez_Qw.mp4"
              }
            }
          ]
        },
        {
          "id": 232621,
          "key": "c8c13b8b-e6b3-425f-861b-8faecf90562e",
          "title": "Data Preparation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c8c13b8b-e6b3-425f-861b-8faecf90562e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232622,
              "key": "12d07858-a3d2-4b5e-b1ee-4e99f4209645",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Data Preparation\n===",
              "instructor_notes": ""
            },
            {
              "id": 232623,
              "key": "5001ae02-2444-4174-8ec7-86f65d219e50",
              "title": "Data Preprocessing",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5001ae02-2444-4174-8ec7-86f65d219e50",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "In the lessons and projects throughout this program, you've encountered various aspects of data preparation; balanced classes, randomization, train/test splits and others.  Here's a quiz to review why these steps are necessary (drag and drop the colored boxes to the appropriate location in the right-hand column). "
                },
                "concepts_label": "Data Preparation Step",
                "answers_label": "Purpose",
                "concepts": [
                  {
                    "text": "Prepare a balanced dataset, i.e., have as many positive as negative examples, or in the case of multi-class problems, roughly the same number of cases of each class.",
                    "correct_answer": {
                      "id": "a1482372700277",
                      "text": "To avoid having your algorithm simply classify everything as belonging to the majority class."
                    }
                  },
                  {
                    "text": "Random Shuffling of the data",
                    "correct_answer": {
                      "id": "a1482372998733",
                      "text": "To avoid problems due to ordering of the data"
                    }
                  },
                  {
                    "text": "Splitting the data into a training and testing set",
                    "correct_answer": {
                      "id": "a1482373025291",
                      "text": "To estimate generalization of the model to new data"
                    }
                  },
                  {
                    "text": "Normalization of features, typically to zero mean and unit variance",
                    "correct_answer": {
                      "id": "a1482520382147",
                      "text": "To avoid individual features or sets of features dominating the response of your classifier"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1482372700277",
                    "text": "To avoid having your algorithm simply classify everything as belonging to the majority class."
                  },
                  {
                    "id": "a1482372998733",
                    "text": "To avoid problems due to ordering of the data"
                  },
                  {
                    "id": "a1482520382147",
                    "text": "To avoid individual features or sets of features dominating the response of your classifier"
                  },
                  {
                    "id": "a1482373025291",
                    "text": "To estimate generalization of the model to new data"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 232502,
          "key": "eba01010-d093-4b48-84ea-dbae249c6d9c",
          "title": "Train a Classifier",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eba01010-d093-4b48-84ea-dbae249c6d9c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232503,
              "key": "564604c3-9bf8-45ab-b6be-f9bc61d01373",
              "title": "Train a Classifier",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EBEN6KLQm8A",
                "china_cdn_id": "EBEN6KLQm8A.mp4"
              }
            }
          ]
        },
        {
          "id": 279103,
          "key": "1a96426f-9ea1-4ca0-bb41-9b2bafbaea3e",
          "title": "Parameter Tuning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1a96426f-9ea1-4ca0-bb41-9b2bafbaea3e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 279108,
              "key": "5438df97-3b82-40cf-92f0-5d96111517d7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Parameter Tuning\n\n### SVM Hyperparameters\n\nIn the SVM lesson, Katie mentioned optimizing the Gamma and C parameters.   \n\nSuccessfully tuning your algorithm involves searching for a kernel, a gamma value and a C value that minimize prediction error. To tune your SVM vehicle detection model, you can use one of scikit-learn's parameter tuning algorithms.\n\nWhen tuning SVM, remember that you can only tune the C parameter with a linear kernel. For a non-linear kernel, you can tune C and gamma.",
              "instructor_notes": ""
            },
            {
              "id": 279122,
              "key": "74507d87-c5db-4ba2-98e1-e051a174175e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Parameter Tuning in Scikit-learn\n\nScikit-learn includes two algorithms for carrying out an automatic parameter search:\n- [GridSearchCV](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV)\n- [RandomizedSearchCV](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html#sklearn.model_selection.RandomizedSearchCV)\n\nGridSearchCV exhaustively works through multiple parameter combinations, cross-validating as it goes. The beauty is that it can work through many combinations in only a couple extra lines of code. \n\nFor example, if I input the values C:[0.1, 1, 10] and gamma:[0.1, 1, 10], gridSearchCV will train and cross-validate every possible combination of (C, gamma): (0.1, 0.1), (0.1, 1), (0.1, 10), (1, .1), (1, 1), etc. \n\nRandomizedSearchCV works similarly to GridSearchCV except RandomizedSearchCV takes a random sample of parameter combinations. RandomizedSearchCV is faster than GridSearchCV since RandomizedSearchCV uses a subset of the parameter combinations.",
              "instructor_notes": ""
            },
            {
              "id": 279123,
              "key": "173c625d-6fbe-4eae-a192-0a6d12273425",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Cross-validation with GridSearchCV\n\nGridSearchCV uses 3-fold cross validation to determine the best performing parameter set. GridSearchCV will take in a training set and divide the training set into three equal partitions. The algorithm will train on two partitions and then validate using the third partition. Then GridSearchCV chooses a different partition for validation and trains with the other two partitions. Finally, GridSearchCV uses the last remaining partition for cross-validation and trains with the other two partitions. \n\nBy default, GridSearchCV uses accuracy as an error metric by averaging the accuracy for each partition. So for every possible parameter combination, GridSearchCV calculates an accuracy score. Then GridSearchCV will choose the parameter combination that performed the best.",
              "instructor_notes": ""
            },
            {
              "id": 279124,
              "key": "4aaea5eb-e884-4103-91ed-34bb00d766e7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Scikit-learn Cross Validation Example\n\nHere's an example from the sklearn [documentation](http://scikit-learn.org/stable/modules/generated/sklearn.grid_search.GridSearchCV.html) for implementing GridSearchCV:\n\n`parameters = {'kernel':('linear', 'rbf'), 'C':[1, 10]}`<br>\n`svr = svm.SVC()`<br>\n`clf = grid_search.GridSearchCV(svr, parameters)`<br>\n`clf.fit(iris.data, iris.target)`\n\nLet's break this down line by line.<br><br>\n`parameters = {'kernel':('linear', 'rbf'), 'C':[1, 10]}` <br> A dictionary of the parameters, and the possible values they may take.  In this case, they're playing around with the kernel (possible choices are 'linear' and 'rbf'), and C (possible choices are 1 and 10).\n\nThen a 'grid' of all the following combinations of values for (kernel, C) are automatically generated:\n\n\n| ('rbf', 1) | ('rbf', 10)|\n|-\n| ('linear', 1) | ('linear', 10) |\n\nEach is used to train an SVM, and the performance is then assessed using cross-validation.\n\n`svr = svm.SVC()` <br>\nThis looks kind of like creating a classifier, just like we've been doing since the first lesson.  But note that the \"clf\" isn't made until the next line--this is just saying what kind of algorithm to use.  Another way to think about this is that the \"classifier\" isn't just the algorithm in this case, it's algorithm plus parameter values.  Note that there's no monkeying around with the kernel or C; all that is handled in the next line.\n\n`clf = grid_search.GridSearchCV(svr, parameters)` <br>\nThis is where the first bit of magic happens; the classifier is being created.  We pass the algorithm (<i>svr</i>) and the dictionary of parameters to try (<i>parameters</i>) and it generates a grid of parameter combinations to try.<br>\n\n`clf.fit(iris.data, iris.target)` <br> And the second bit of magic.  The fit function now tries all the parameter combinations, and returns a fitted classifier that's automatically tuned to the optimal parameter combination.  You can now access the parameter values via `clf.best_params_`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 229474,
          "key": "be308636-742b-416a-8fcc-c6071865a11f",
          "title": "Color Classify",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "be308636-742b-416a-8fcc-c6071865a11f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 233100,
              "key": "6aaf7a44-94b1-4cbe-8659-4a8c302cbfad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Color Classify\n===",
              "instructor_notes": ""
            },
            {
              "id": 233101,
              "key": "03406b62-b868-4389-9dcf-ba1b4e63fa28",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/5862dd38_car-color-and-hist/car-color-and-hist.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/03406b62-b868-4389-9dcf-ba1b4e63fa28",
              "caption": "",
              "alt": null,
              "width": 767,
              "height": 612,
              "instructor_notes": null
            },
            {
              "id": 233098,
              "key": "e1a525f7-e9ab-47cd-94bc-054b72289b19",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now we'll try training a classifier on our dataset.  First, we'll see how well it does just using spatially binned color and color histograms.  \n\nTo do this, we'll use the functions you defined in previous exercises, namely, `bin_spatial()`, `color_hist()`, and `extract_features()`.  We'll then read in our car and non-car images, and extract the color features for each.\n\nAll that remains is to define a labels vector, shuffle and split the data into training and testing sets, scale the feature vectors to zero mean and unit variance, and finally, define a classifier and train it!\n\nOur labels vector `y` in this case will just be a binary vector indicating whether each feature vector in our dataset corresponds to a car or non-car (1's for cars, 0's for non-cars).  Given lists of car and non-car features (the output of `extract_features()`) we can define a labels vector like this:\n\n```python\nimport numpy as np\n# Define a labels vector based on features lists\ny = np.hstack((np.ones(len(car_features)), \n              np.zeros(len(notcar_features))))\n```\n\nNext, we'll stack our feature vectors like before:\n\n```python\n# Create an array stack of feature vectors\nX = np.vstack((car_features, notcar_features)).astype(np.float64)\n```\n\nAnd now we're ready to shuffle and split the data into training and testing sets.  To do this we'll use the Scikit-Learn `train_test_split()` function, but it's worth noting that recently, this function moved from the `sklearn.cross_validation` package (in `sklearn` version <=0.17) to the `sklearn.model_selection` package  (in `sklearn` version >=0.18).\n\nIn the quiz editor we're still running `sklearn` v0.17, so we'll import it like this:\n```python\nfrom sklearn.cross_validation import train_test_split\n# But, if you are using scikit-learn >= 0.18 then use this:\n# from sklearn.model_selection import train_test_split\n```\n\n`train_test_split()` performs both the shuffle and split of the data and you'll call it like this (here choosing to initialize the shuffle with a different random state each time):\n```python\n# Split up data into randomized training and test sets\nrand_state = np.random.randint(0, 100)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=rand_state)\n```\n\nNow that we have split into training and test sets, we can scale our features. It's important to do the scaling after splitting the data, otherwise you are allowing the scaler to peer into your test data!\n\n```python\nfrom sklearn.preprocessing import StandardScaler\n# Fit a per-column scaler only on the training data\nX_scaler = StandardScaler().fit(X_train)\n# Apply the scaler to both X_train and X_test\nscaled_X_train = X_scaler.transform(X_train)\nscaled_X_test = X_scaler.transform(X_test)\n```\n#### Warning: when dealing with image data that was extracted from video, you may be dealing with sequences of images where your target object (vehicles in this case) appear almost identical in a whole series of images.  In such a case, even a randomized train-test split will be subject to overfitting because images in the training set may be nearly identical to images in the test set.  For the subset of images used in the next several quizzes, this is not a problem, but to optimize your classifier for the project, you may need to worry about time-series of images!\n---\nNow, you're ready to define and train a classifier!  Here we'll try a Linear Support Vector Machine.  To define and train your classifier it takes just a few lines of code:\n```python\nfrom sklearn.svm import LinearSVC\n# Use a linear SVC (support vector classifier)\nsvc = LinearSVC()\n# Train the SVC\nsvc.fit(scaled_X_train, y_train)\n```\n\nThen you can check the accuracy of your classifier on the test dataset like this: \n\n```python\nprint('Test Accuracy of SVC = ', svc.score(scaled_X_test, y_test))\n```\n Or you can make predictions on a subset of the test data and compare directly with ground truth:\n\n```python\nprint('My SVC predicts: ', svc.predict(scaled_X_test[0:10].reshape(1, -1)))\nprint('For labels: ', y_test[0:10])\n```\n\nPlay with the parameter values `spatial` and `histbin` in the exercise below to see how the classifier accuracy and training time vary with the feature vector input.",
              "instructor_notes": ""
            },
            {
              "id": 229502,
              "key": "736142f7-b24b-44e7-b000-c978dbd691ca",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "736142f7-b24b-44e7-b000-c978dbd691ca",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5107293252354048",
                "initial_code_files": [
                  {
                    "text": "import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport glob\nimport time\nfrom sklearn.svm import LinearSVC\nfrom sklearn.preprocessing import StandardScaler\n# NOTE: the next import is only valid \n# for scikit-learn version <= 0.17\n# if you are using scikit-learn >= 0.18 then use this:\n# from sklearn.model_selection import train_test_split\nfrom sklearn.cross_validation import train_test_split\n\n# Define a function to compute binned color features  \ndef bin_spatial(img, size=(32, 32)):\n    # Use cv2.resize().ravel() to create the feature vector\n    features = cv2.resize(img, size).ravel() \n    # Return the feature vector\n    return features\n\n# Define a function to compute color histogram features  \ndef color_hist(img, nbins=32, bins_range=(0, 256)):\n    # Compute the histogram of the color channels separately\n    channel1_hist = np.histogram(img[:,:,0], bins=nbins, range=bins_range)\n    channel2_hist = np.histogram(img[:,:,1], bins=nbins, range=bins_range)\n    channel3_hist = np.histogram(img[:,:,2], bins=nbins, range=bins_range)\n    # Concatenate the histograms into a single feature vector\n    hist_features = np.concatenate((channel1_hist[0], channel2_hist[0], channel3_hist[0]))\n    # Return the individual histograms, bin_centers and feature vector\n    return hist_features\n\n# Define a function to extract features from a list of images\n# Have this function call bin_spatial() and color_hist()\ndef extract_features(imgs, cspace='RGB', spatial_size=(32, 32),\n                        hist_bins=32, hist_range=(0, 256)):\n    # Create a list to append feature vectors to\n    features = []\n    # Iterate through the list of images\n    for file in imgs:\n        # Read in each one by one\n        image = mpimg.imread(file)\n        # apply color conversion if other than 'RGB'\n        if cspace != 'RGB':\n            if cspace == 'HSV':\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)\n            elif cspace == 'LUV':\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2LUV)\n            elif cspace == 'HLS':\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HLS)\n            elif cspace == 'YUV':\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YUV)\n        else: feature_image = np.copy(image)      \n        # Apply bin_spatial() to get spatial color features\n        spatial_features = bin_spatial(feature_image, size=spatial_size)\n        # Apply color_hist() also with a color space option now\n        hist_features = color_hist(feature_image, nbins=hist_bins, bins_range=hist_range)\n        # Append the new feature vector to the features list\n        features.append(np.concatenate((spatial_features, hist_features)))\n    # Return list of feature vectors\n    return features\n\n\n# Read in car and non-car images\nimages = glob.glob('*.jpeg')\ncars = []\nnotcars = []\nfor image in images:\n    if 'image' in image or 'extra' in image:\n        notcars.append(image)\n    else:\n        cars.append(image)\n\n# TODO play with these values to see how your classifier\n# performs under different binning scenarios\nspatial = 32\nhistbin = 32\n\ncar_features = extract_features(cars, cspace='RGB', spatial_size=(spatial, spatial),\n                        hist_bins=histbin, hist_range=(0, 256))\nnotcar_features = extract_features(notcars, cspace='RGB', spatial_size=(spatial, spatial),\n                        hist_bins=histbin, hist_range=(0, 256))\n\n# Create an array stack of feature vectors\nX = np.vstack((car_features, notcar_features)).astype(np.float64)\n\n# Define the labels vector\ny = np.hstack((np.ones(len(car_features)), np.zeros(len(notcar_features))))\n\n# Split up data into randomized training and test sets\nrand_state = np.random.randint(0, 100)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=rand_state)\n    \n# Fit a per-column scaler only on the training data\nX_scaler = StandardScaler().fit(X_train)\n# Apply the scaler to X_train and X_test\nX_train = X_scaler.transform(X_train)\nX_test = X_scaler.transform(X_test)\n\nprint('Using spatial binning of:',spatial,\n    'and', histbin,'histogram bins')\nprint('Feature vector length:', len(X_train[0]))\n# Use a linear SVC \nsvc = LinearSVC()\n# Check the training time for the SVC\nt=time.time()\nsvc.fit(X_train, y_train)\nt2 = time.time()\nprint(round(t2-t, 2), 'Seconds to train SVC...')\n# Check the score of the SVC\nprint('Test Accuracy of SVC = ', round(svc.score(X_test, y_test), 4))\n# Check the prediction time for a single sample\nt=time.time()\nn_predict = 10\nprint('My SVC predicts: ', svc.predict(X_test[0:n_predict]))\nprint('For these',n_predict, 'labels: ', y_test[0:n_predict])\nt2 = time.time()\nprint(round(t2-t, 5), 'Seconds to predict', n_predict,'labels with SVC')",
                    "name": "car_features.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 229537,
          "key": "7355e459-55d0-4f2d-923c-4810c4360267",
          "title": "HOG Classify",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7355e459-55d0-4f2d-923c-4810c4360267",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 233103,
              "key": "10f4ceed-37b6-430d-8a68-f6d792509a46",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "HOG Classify\n===\n\nAlright, so classification by color features alone is pretty effective!  Now let's try classifying with HOG features and see how well we can do.  ",
              "instructor_notes": ""
            },
            {
              "id": 233104,
              "key": "66e956db-3860-4b6e-bda4-1c1dc9b23dcb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/5862ea51_car-and-hog/car-and-hog.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/66e956db-3860-4b6e-bda4-1c1dc9b23dcb",
              "caption": "",
              "alt": null,
              "width": 1686,
              "height": 902,
              "instructor_notes": null
            },
            {
              "id": 233102,
              "key": "d8d26f69-57c8-4adf-b943-8b4fc9077310",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n### NOTE: if you copy the code from the exercise below onto your local machine, but are running `sklearn` version >= 0.18 you will need to change from calling: \n\n```python\nfrom sklearn.cross_validation import train_test_split\n```\n### to: \n```python\nfrom sklearn.model_selection import train_test_split\n```\n\nIn the exercise below, you're given all the code to extract HOG features and train a linear SVM.  There is no right or wrong answer, but your mission, should you choose to accept it, is to play with the parameters `colorspace`, `orient`, `pix_per_cell`, `cell_per_block`, and `hog_channel` to get a feel for what combination of parameters give the best results.\n\n**Note:** `hog_channel` can take values of 0, 1, 2, or \"ALL\", meaning that you extract HOG features from the first, second, third, or all color channels respectively.  ",
              "instructor_notes": ""
            },
            {
              "id": 229540,
              "key": "d72091b8-6450-4b92-a554-a9cc488cf389",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "d72091b8-6450-4b92-a554-a9cc488cf389",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5212495523479552",
                "initial_code_files": [
                  {
                    "text": "import matplotlib.image as mpimg\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport cv2\r\nimport glob\r\nimport time\r\nfrom sklearn.svm import LinearSVC\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom skimage.feature import hog\r\n# NOTE: the next import is only valid for scikit-learn version <= 0.17\r\n# for scikit-learn >= 0.18 use:\r\n# from sklearn.model_selection import train_test_split\r\nfrom sklearn.cross_validation import train_test_split\r\n\r\n# Define a function to return HOG features and visualization\r\ndef get_hog_features(img, orient, pix_per_cell, cell_per_block, \r\n                        vis=False, feature_vec=True):\r\n    # Call with two outputs if vis==True\r\n    if vis == True:\r\n        features, hog_image = hog(img, orientations=orient, pixels_per_cell=(pix_per_cell, pix_per_cell),\r\n                                  cells_per_block=(cell_per_block, cell_per_block), block_norm= 'L2-Hys',\r\n                                  transform_sqrt=True, \r\n                                  visualise=vis, feature_vector=feature_vec)\r\n        return features, hog_image\r\n    # Otherwise call with one output\r\n    else:      \r\n        features = hog(img, orientations=orient, pixels_per_cell=(pix_per_cell, pix_per_cell),\r\n                       cells_per_block=(cell_per_block, cell_per_block), block_norm= 'L2-Hys',\r\n                       transform_sqrt=True, \r\n                       visualise=vis, feature_vector=feature_vec)\r\n        return features\r\n\r\n# Define a function to extract features from a list of images\r\n# Have this function call bin_spatial() and color_hist()\r\ndef extract_features(imgs, cspace='RGB', orient=9, \r\n                        pix_per_cell=8, cell_per_block=2, hog_channel=0):\r\n    # Create a list to append feature vectors to\r\n    features = []\r\n    # Iterate through the list of images\r\n    for file in imgs:\r\n        # Read in each one by one\r\n        image = mpimg.imread(file)\r\n        # apply color conversion if other than 'RGB'\r\n        if cspace != 'RGB':\r\n            if cspace == 'HSV':\r\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)\r\n            elif cspace == 'LUV':\r\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2LUV)\r\n            elif cspace == 'HLS':\r\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HLS)\r\n            elif cspace == 'YUV':\r\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YUV)\r\n            elif cspace == 'YCrCb':\r\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YCrCb)\r\n        else: feature_image = np.copy(image)      \r\n\r\n        # Call get_hog_features() with vis=False, feature_vec=True\r\n        if hog_channel == 'ALL':\r\n            hog_features = []\r\n            for channel in range(feature_image.shape[2]):\r\n                hog_features.append(get_hog_features(feature_image[:,:,channel], \r\n                                    orient, pix_per_cell, cell_per_block, \r\n                                    vis=False, feature_vec=True))\r\n            hog_features = np.ravel(hog_features)        \r\n        else:\r\n            hog_features = get_hog_features(feature_image[:,:,hog_channel], orient, \r\n                        pix_per_cell, cell_per_block, vis=False, feature_vec=True)\r\n        # Append the new feature vector to the features list\r\n        features.append(hog_features)\r\n    # Return list of feature vectors\r\n    return features\r\n\r\n\r\n# Divide up into cars and notcars\r\nimages = glob.glob('*.jpeg')\r\ncars = []\r\nnotcars = []\r\nfor image in images:\r\n    if 'image' in image or 'extra' in image:\r\n        notcars.append(image)\r\n    else:\r\n        cars.append(image)\r\n\r\n# Reduce the sample size because HOG features are slow to compute\r\n# The quiz evaluator times out after 13s of CPU time\r\nsample_size = 500\r\ncars = cars[0:sample_size]\r\nnotcars = notcars[0:sample_size]\r\n\r\n### TODO: Tweak these parameters and see how the results change.\r\ncolorspace = 'RGB' # Can be RGB, HSV, LUV, HLS, YUV, YCrCb\r\norient = 9\r\npix_per_cell = 8\r\ncell_per_block = 2\r\nhog_channel = 0 # Can be 0, 1, 2, or \"ALL\"\r\n\r\nt=time.time()\r\ncar_features = extract_features(cars, cspace=colorspace, orient=orient, \r\n                        pix_per_cell=pix_per_cell, cell_per_block=cell_per_block, \r\n                        hog_channel=hog_channel)\r\nnotcar_features = extract_features(notcars, cspace=colorspace, orient=orient, \r\n                        pix_per_cell=pix_per_cell, cell_per_block=cell_per_block, \r\n                        hog_channel=hog_channel)\r\nt2 = time.time()\r\nprint(round(t2-t, 2), 'Seconds to extract HOG features...')\r\n\r\n# Create an array stack of feature vectors\r\nX = np.vstack((car_features, notcar_features)).astype(np.float64)\r\n\r\n# Define the labels vector\r\ny = np.hstack((np.ones(len(car_features)), np.zeros(len(notcar_features))))\r\n\r\n# Split up data into randomized training and test sets\r\nrand_state = np.random.randint(0, 100)\r\nX_train, X_test, y_train, y_test = train_test_split(\r\n    X, y, test_size=0.2, random_state=rand_state)\r\n    \r\n# Fit a per-column scaler\r\nX_scaler = StandardScaler().fit(X_train)\r\n# Apply the scaler to X\r\nX_train = X_scaler.transform(X_train)\r\nX_test = X_scaler.transform(X_test)\r\n\r\nprint('Using:',orient,'orientations',pix_per_cell,\r\n    'pixels per cell and', cell_per_block,'cells per block')\r\nprint('Feature vector length:', len(X_train[0]))\r\n# Use a linear SVC \r\nsvc = LinearSVC()\r\n# Check the training time for the SVC\r\nt=time.time()\r\nsvc.fit(X_train, y_train)\r\nt2 = time.time()\r\nprint(round(t2-t, 2), 'Seconds to train SVC...')\r\n# Check the score of the SVC\r\nprint('Test Accuracy of SVC = ', round(svc.score(X_test, y_test), 4))\r\n# Check the prediction time for a single sample\r\nt=time.time()\r\nn_predict = 10\r\nprint('My SVC predicts: ', svc.predict(X_test[0:n_predict]))\r\nprint('For these',n_predict, 'labels: ', y_test[0:n_predict])\r\nt2 = time.time()\r\nprint(round(t2-t, 5), 'Seconds to predict', n_predict,'labels with SVC')",
                    "name": "hog_classify.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 232504,
          "key": "169c67e2-32dd-4df2-b338-0eca85ef18d6",
          "title": "Sliding Windows",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "169c67e2-32dd-4df2-b338-0eca85ef18d6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232505,
              "key": "d8bc9cd7-1106-42d6-9ce5-da7a771386bd",
              "title": "Sliding Windows",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HMtd9EQooCk",
                "china_cdn_id": "HMtd9EQooCk.mp4"
              }
            }
          ]
        },
        {
          "id": 233008,
          "key": "96b0bcb6-691c-443f-b126-060c781c4e55",
          "title": "How many windows?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "96b0bcb6-691c-443f-b126-060c781c4e55",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 233009,
              "key": "3e37af41-c90a-4c12-8f71-847afc825839",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "How many windows?\n===",
              "instructor_notes": ""
            },
            {
              "id": 233010,
              "key": "6ae44fcb-2b1f-48e2-bec2-21fdcc352eda",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585d79e7_car-identified/car-identified.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6ae44fcb-2b1f-48e2-bec2-21fdcc352eda",
              "caption": "",
              "alt": null,
              "width": 813,
              "height": 458,
              "instructor_notes": null
            },
            {
              "id": 233011,
              "key": "73b3015b-890e-449c-8062-cfb2b15bc896",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To implement a sliding window search, you need to decide what size window you want to search, where in the image you want to start and stop your search, and how much you want windows to overlap.  So, let's try an example to see how many windows we would be searching given a particular image size, window size, and overlap.\n\nSuppose you have an image that is 256 x 256 pixels and you want to search windows of a size 128 x 128 pixels each with an overlap of 50% between adjacent windows in both the vertical and horizontal dimensions.  Your sliding window search would then look like this:",
              "instructor_notes": ""
            },
            {
              "id": 233013,
              "key": "7707ca51-fba8-4cf1-a1c7-25a1aaa452e0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585d80c2_sliding-window/sliding-window.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7707ca51-fba8-4cf1-a1c7-25a1aaa452e0",
              "caption": "",
              "alt": null,
              "width": 870,
              "height": 870,
              "instructor_notes": null
            },
            {
              "id": 233014,
              "key": "8ebb8cae-05ff-46d3-89c2-c063b033000a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So, you searched 9 windows total in this case.  Let's try a quick quiz!",
              "instructor_notes": ""
            },
            {
              "id": 233012,
              "key": "becd2d5a-ab64-403d-a0fd-1c149c88dfcc",
              "title": "sliding Window Search",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "becd2d5a-ab64-403d-a0fd-1c149c88dfcc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Suppose you have an image that is 1280 x 960 pixels and you want to search the entire image using 64 x 64 pixel windows with 50% overlap between windows in both the vertical and horizontal directions.  How many windows would you be searching total?",
                "answers": [
                  {
                    "id": "a1482521659631",
                    "text": "300",
                    "is_correct": false
                  },
                  {
                    "id": "a1482521807185",
                    "text": "4096",
                    "is_correct": false
                  },
                  {
                    "id": "a1482521807833",
                    "text": "1131",
                    "is_correct": true
                  },
                  {
                    "id": "a1482521808529",
                    "text": "1,228,800",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 550911,
              "key": "09d58fc1-badd-47a9-9e34-b84ffa4e455a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div id=\"spoiler_1\" style=\"display:none\">\n- ** x:** The first window occupies 64 pixels, then moves over by 32 pixels to cover the remaining (1280 - 64) pixel span. 1 + (1280 - 64)/32 = 39\n- ** y:** The first window occupies 64 pixels and then moves over by 32 pixels to cover the remaining span of (960 - 64) pixels. 1 + (960/32) = 29 \n\nNote that the denominator originates from 64 * 0.5, since we have 50% overlap.\n\n**39 * 29 = 1131**\n\n## General Formula:\n- **windows_x** = 1 + (image_width - window_width)/(window_width * overlap_proportion)\n- **windows_y** = 1 + (image_height - window_height)/(window_height * overlap_proportion)\n- **total_windows** = windows_x * windows_y\n</div>\n<button title=\"Click to show/hide content\" type=\"button\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}\">Show Solution</button>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 233015,
          "key": "8e39c07e-afd5-4ba5-9204-8b44aa39285c",
          "title": "Sliding Window Implementation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8e39c07e-afd5-4ba5-9204-8b44aa39285c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 233019,
              "key": "4fc6ae1e-57c1-4103-b14d-4db332787995",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Sliding Window Implementation\n===\n",
              "instructor_notes": ""
            },
            {
              "id": 233018,
              "key": "42913ac8-e782-413a-8781-870c3ba442d2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/585d9293_sliding-window/sliding-window.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/42913ac8-e782-413a-8781-870c3ba442d2",
              "caption": "",
              "alt": null,
              "width": 870,
              "height": 870,
              "instructor_notes": null
            },
            {
              "id": 233016,
              "key": "54ed88af-c733-484c-9eee-9d541d1a11db",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the last exercise, you saw how the number of windows scales with image size, window size, and overlap.  In the project it will be useful to have a function to perform a sliding window search on an image, so let's write one!  This will just be the first iteration, where you don't actually need to do anything besides plot a rectangle at each window position.  \n\nSo, your goal here is to write a function that takes in an image, start and stop positions in both x and y (imagine a bounding box for the entire search region), window size (x and y dimensions),  and overlap fraction (also for both x and y).  Your function should return a list of bounding boxes for the search windows, which will then be passed to draw `draw_boxes()` function.  \n\nYou can download the image in the below quiz [here](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/bbox-example-image.jpg) for use outside the classroom.",
              "instructor_notes": ""
            },
            {
              "id": 233021,
              "key": "0b8969dd-b540-44e9-9d93-a29deefb6f9b",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "0b8969dd-b540-44e9-9d93-a29deefb6f9b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5996791867768832",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimage = mpimg.imread('bbox-example-image.jpg')\n\n# Here is your draw_boxes function from the previous exercise\ndef draw_boxes(img, bboxes, color=(0, 0, 255), thick=6):\n    # Make a copy of the image\n    imcopy = np.copy(img)\n    # Iterate through the bounding boxes\n    for bbox in bboxes:\n        # Draw a rectangle given bbox coordinates\n        cv2.rectangle(imcopy, bbox[0], bbox[1], color, thick)\n    # Return the image copy with boxes drawn\n    return imcopy\n    \n    \n# Define a function that takes an image,\n# start and stop positions in both x and y, \n# window size (x and y dimensions),  \n# and overlap fraction (for both x and y)\ndef slide_window(img, x_start_stop=[None, None], y_start_stop=[None, None], \n                    xy_window=(64, 64), xy_overlap=(0.5, 0.5)):\n    # If x and/or y start/stop positions not defined, set to image size\n    # Compute the span of the region to be searched    \n    # Compute the number of pixels per step in x/y\n    # Compute the number of windows in x/y\n    # Initialize a list to append window positions to\n    window_list = []\n    # Loop through finding x and y window positions\n    #     Note: you could vectorize this step, but in practice\n    #     you'll be considering windows one by one with your\n    #     classifier, so looping makes sense\n        # Calculate each window position\n        # Append window position to list\n    # Return the list of windows\n    return window_list\n\nwindows = slide_window(image, x_start_stop=[None, None], y_start_stop=[None, None], \n                    xy_window=(128, 128), xy_overlap=(0.5, 0.5))\n                       \nwindow_img = draw_boxes(image, windows, color=(0, 0, 255), thick=6)                    \nplt.imshow(window_img)",
                    "name": "sliding_window.py"
                  },
                  {
                    "text": "# Define a function that takes an image,\n# start and stop positions in both x and y, \n# window size (x and y dimensions),  \n# and overlap fraction (for both x and y)\ndef slide_window(img, x_start_stop=[None, None], y_start_stop=[None, None], \n                    xy_window=(64, 64), xy_overlap=(0.5, 0.5)):\n    # If x and/or y start/stop positions not defined, set to image size\n    if x_start_stop[0] == None:\n        x_start_stop[0] = 0\n    if x_start_stop[1] == None:\n        x_start_stop[1] = img.shape[1]\n    if y_start_stop[0] == None:\n        y_start_stop[0] = 0\n    if y_start_stop[1] == None:\n        y_start_stop[1] = img.shape[0]\n    # Compute the span of the region to be searched    \n    xspan = x_start_stop[1] - x_start_stop[0]\n    yspan = y_start_stop[1] - y_start_stop[0]\n    # Compute the number of pixels per step in x/y\n    nx_pix_per_step = np.int(xy_window[0]*(1 - xy_overlap[0]))\n    ny_pix_per_step = np.int(xy_window[1]*(1 - xy_overlap[1]))\n    # Compute the number of windows in x/y\n    nx_buffer = np.int(xy_window[0]*(xy_overlap[0]))\n    ny_buffer = np.int(xy_window[1]*(xy_overlap[1]))\n    nx_windows = np.int((xspan-nx_buffer)/nx_pix_per_step) \n    ny_windows = np.int((yspan-ny_buffer)/ny_pix_per_step) \n    # Initialize a list to append window positions to\n    window_list = []\n    # Loop through finding x and y window positions\n    # Note: you could vectorize this step, but in practice\n    # you'll be considering windows one by one with your\n    # classifier, so looping makes sense\n    for ys in range(ny_windows):\n        for xs in range(nx_windows):\n            # Calculate window position\n            startx = xs*nx_pix_per_step + x_start_stop[0]\n            endx = startx + xy_window[0]\n            starty = ys*ny_pix_per_step + y_start_stop[0]\n            endy = starty + xy_window[1]\n            # Append window position to list\n            window_list.append(((startx, starty), (endx, endy)))\n    # Return the list of windows\n    return window_list\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 232506,
          "key": "4fc7adb8-c90c-4ac9-befd-0de118d5b4f2",
          "title": "Multi-scale Windows",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4fc7adb8-c90c-4ac9-befd-0de118d5b4f2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232507,
              "key": "5404ac54-c95f-4b60-8cc6-45b60d6a4c66",
              "title": "Multi-scale Windows",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uiPNkPggWLE",
                "china_cdn_id": "uiPNkPggWLE.mp4"
              }
            }
          ]
        },
        {
          "id": 233105,
          "key": "40ac880a-7ccc-4145-a864-6b0b99ea31e9",
          "title": "Search and Classify",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "40ac880a-7ccc-4145-a864-6b0b99ea31e9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 233106,
              "key": "dbbcce2e-9bd3-43c6-8cdc-cf8bd0e255d2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Search and Classify\n===",
              "instructor_notes": ""
            },
            {
              "id": 233107,
              "key": "b3632d8f-fe36-4e52-b8e6-9747b91a29cb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/5862f0a0_bbox-example-image/bbox-example-image.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b3632d8f-fe36-4e52-b8e6-9747b91a29cb",
              "caption": "",
              "alt": null,
              "width": 1280,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 233108,
              "key": "3797f6bb-7861-443c-b31f-d2466ce272ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now you're able to run a sliding window search on an image and you've trained a classifier... time to combine both steps and search for cars!  \n\nYou already have all the tools you need to do this from the previous exercises.  Just train your classifier, then run your sliding window search, extract features, and predict whether each window contains a car or not.  You'll probably find some false positives, but soon we'll deal with removing them.\n\nIn the `lesson_functions.py` tab on the quiz editor, you'll find all the functions we've defined so far in the lesson, including `get_hog_features()`, `bin_spatial()`, `color_hist()`, `extract_features()`, `slide_window()`, and `draw_boxes()`.  These are now all imported for use in the quiz with this command:\n\n```python\nfrom lesson_functions import *\n```\n\nTwo new functions are defined: `single_img_features()` and `search_windows()`.  You can use these to search over all the windows defined by your `slide_windows()`, extract features at each window position, and predict with your classifier on each set of features.  \n\nWe have limited the sample size to 500 each of car and not-car training images for the classifier to avoid quiz evaluator timeout, but if you search a very large number of windows or create huge feature vectors, you still may run into timeout issues.  If you want to explore more, download the data and try the code on your local machine.  \n\nYou can download the subset of data used in this lesson for [vehicles](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/vehicles_smallset.zip) and [non-vehicles](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/non-vehicles_smallset.zip), or if you prefer, you can directly grab the larger project dataset for [vehicles](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/vehicles.zip) and [non-vehicles](https://s3.amazonaws.com/udacity-sdc/Vehicle_Tracking/non-vehicles.zip).  \n\n**In this exercise, experiment with different color and gradient feature sets, different search window sizes and overlap to get an idea of how your classifier performs with different training features.  Getting false positives in the skies and treetops?  Try restricting your search area on the image with `y_start_stop` in the `slide_window()` function.  What combination of features works best?**\n",
              "instructor_notes": ""
            },
            {
              "id": 259386,
              "key": "0d7b33d7-bd0a-4086-85ba-245134e91439",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "0d7b33d7-bd0a-4086-85ba-245134e91439",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4817192714633216",
                "initial_code_files": [
                  {
                    "text": "import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport glob\nimport time\nfrom sklearn.svm import LinearSVC\nfrom sklearn.preprocessing import StandardScaler\nfrom skimage.feature import hog\nfrom lesson_functions import *\n# NOTE: the next import is only valid for scikit-learn version <= 0.17\n# for scikit-learn >= 0.18 use:\n# from sklearn.model_selection import train_test_split\nfrom sklearn.cross_validation import train_test_split\n\n# Define a function to extract features from a single image window\n# This function is very similar to extract_features()\n# just for a single image rather than list of images\ndef single_img_features(img, color_space='RGB', spatial_size=(32, 32),\n                        hist_bins=32, orient=9, \n                        pix_per_cell=8, cell_per_block=2, hog_channel=0,\n                        spatial_feat=True, hist_feat=True, hog_feat=True):    \n    #1) Define an empty list to receive features\n    img_features = []\n    #2) Apply color conversion if other than 'RGB'\n    if color_space != 'RGB':\n        if color_space == 'HSV':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n        elif color_space == 'LUV':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2LUV)\n        elif color_space == 'HLS':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2HLS)\n        elif color_space == 'YUV':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2YUV)\n        elif color_space == 'YCrCb':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb)\n    else: feature_image = np.copy(img)      \n    #3) Compute spatial features if flag is set\n    if spatial_feat == True:\n        spatial_features = bin_spatial(feature_image, size=spatial_size)\n        #4) Append features to list\n        img_features.append(spatial_features)\n    #5) Compute histogram features if flag is set\n    if hist_feat == True:\n        hist_features = color_hist(feature_image, nbins=hist_bins)\n        #6) Append features to list\n        img_features.append(hist_features)\n    #7) Compute HOG features if flag is set\n    if hog_feat == True:\n        if hog_channel == 'ALL':\n            hog_features = []\n            for channel in range(feature_image.shape[2]):\n                hog_features.extend(get_hog_features(feature_image[:,:,channel], \n                                    orient, pix_per_cell, cell_per_block, \n                                    vis=False, feature_vec=True))      \n        else:\n            hog_features = get_hog_features(feature_image[:,:,hog_channel], orient, \n                        pix_per_cell, cell_per_block, vis=False, feature_vec=True)\n        #8) Append features to list\n        img_features.append(hog_features)\n\n    #9) Return concatenated array of features\n    return np.concatenate(img_features)\n\n# Define a function you will pass an image \n# and the list of windows to be searched (output of slide_windows())\ndef search_windows(img, windows, clf, scaler, color_space='RGB', \n                    spatial_size=(32, 32), hist_bins=32, \n                    hist_range=(0, 256), orient=9, \n                    pix_per_cell=8, cell_per_block=2, \n                    hog_channel=0, spatial_feat=True, \n                    hist_feat=True, hog_feat=True):\n\n    #1) Create an empty list to receive positive detection windows\n    on_windows = []\n    #2) Iterate over all windows in the list\n    for window in windows:\n        #3) Extract the test window from original image\n        test_img = cv2.resize(img[window[0][1]:window[1][1], window[0][0]:window[1][0]], (64, 64))      \n        #4) Extract features for that window using single_img_features()\n        features = single_img_features(test_img, color_space=color_space, \n                            spatial_size=spatial_size, hist_bins=hist_bins, \n                            orient=orient, pix_per_cell=pix_per_cell, \n                            cell_per_block=cell_per_block, \n                            hog_channel=hog_channel, spatial_feat=spatial_feat, \n                            hist_feat=hist_feat, hog_feat=hog_feat)\n        #5) Scale extracted features to be fed to classifier\n        test_features = scaler.transform(np.array(features).reshape(1, -1))\n        #6) Predict using your classifier\n        prediction = clf.predict(test_features)\n        #7) If positive (prediction == 1) then save the window\n        if prediction == 1:\n            on_windows.append(window)\n    #8) Return windows for positive detections\n    return on_windows\n    \n    \n# Read in cars and notcars\nimages = glob.glob('*.jpeg')\ncars = []\nnotcars = []\nfor image in images:\n    if 'image' in image or 'extra' in image:\n        notcars.append(image)\n    else:\n        cars.append(image)\n\n# Reduce the sample size because\n# The quiz evaluator times out after 13s of CPU time\nsample_size = 500\ncars = cars[0:sample_size]\nnotcars = notcars[0:sample_size]\n\n### TODO: Tweak these parameters and see how the results change.\ncolor_space = 'RGB' # Can be RGB, HSV, LUV, HLS, YUV, YCrCb\norient = 9  # HOG orientations\npix_per_cell = 8 # HOG pixels per cell\ncell_per_block = 2 # HOG cells per block\nhog_channel = 0 # Can be 0, 1, 2, or \"ALL\"\nspatial_size = (16, 16) # Spatial binning dimensions\nhist_bins = 16    # Number of histogram bins\nspatial_feat = True # Spatial features on or off\nhist_feat = True # Histogram features on or off\nhog_feat = True # HOG features on or off\ny_start_stop = [None, None] # Min and max in y to search in slide_window()\n\ncar_features = extract_features(cars, color_space=color_space, \n                        spatial_size=spatial_size, hist_bins=hist_bins, \n                        orient=orient, pix_per_cell=pix_per_cell, \n                        cell_per_block=cell_per_block, \n                        hog_channel=hog_channel, spatial_feat=spatial_feat, \n                        hist_feat=hist_feat, hog_feat=hog_feat)\nnotcar_features = extract_features(notcars, color_space=color_space, \n                        spatial_size=spatial_size, hist_bins=hist_bins, \n                        orient=orient, pix_per_cell=pix_per_cell, \n                        cell_per_block=cell_per_block, \n                        hog_channel=hog_channel, spatial_feat=spatial_feat, \n                        hist_feat=hist_feat, hog_feat=hog_feat)\n\n# Create an array stack of feature vectors\nX = np.vstack((car_features, notcar_features)).astype(np.float64)\n\n# Define the labels vector\ny = np.hstack((np.ones(len(car_features)), np.zeros(len(notcar_features))))\n\n# Split up data into randomized training and test sets\nrand_state = np.random.randint(0, 100)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=rand_state)\n    \n# Fit a per-column scaler\nX_scaler = StandardScaler().fit(X_train)\n# Apply the scaler to X\nX_train = X_scaler.transform(X_train)\nX_test = X_scaler.transform(X_test)\n\nprint('Using:',orient,'orientations',pix_per_cell,\n    'pixels per cell and', cell_per_block,'cells per block')\nprint('Feature vector length:', len(X_train[0]))\n# Use a linear SVC \nsvc = LinearSVC()\n# Check the training time for the SVC\nt=time.time()\nsvc.fit(X_train, y_train)\nt2 = time.time()\nprint(round(t2-t, 2), 'Seconds to train SVC...')\n# Check the score of the SVC\nprint('Test Accuracy of SVC = ', round(svc.score(X_test, y_test), 4))\n# Check the prediction time for a single sample\nt=time.time()\n\nimage = mpimg.imread('bbox-example-image.jpg')\ndraw_image = np.copy(image)\n\n# Uncomment the following line if you extracted training\n# data from .png images (scaled 0 to 1 by mpimg) and the\n# image you are searching is a .jpg (scaled 0 to 255)\n#image = image.astype(np.float32)/255\n\nwindows = slide_window(image, x_start_stop=[None, None], y_start_stop=y_start_stop, \n                    xy_window=(96, 96), xy_overlap=(0.5, 0.5))\n\nhot_windows = search_windows(image, windows, svc, X_scaler, color_space=color_space, \n                        spatial_size=spatial_size, hist_bins=hist_bins, \n                        orient=orient, pix_per_cell=pix_per_cell, \n                        cell_per_block=cell_per_block, \n                        hog_channel=hog_channel, spatial_feat=spatial_feat, \n                        hist_feat=hist_feat, hog_feat=hog_feat)                       \n\nwindow_img = draw_boxes(draw_image, hot_windows, color=(0, 0, 255), thick=6)                    \n\nplt.imshow(window_img)\n\n\n",
                    "name": "search_classify.py"
                  },
                  {
                    "text": "# Define a function to extract features from a single image window\n# This function is very similar to extract_features()\n# just for a single image rather than list of images\ndef single_img_features(img, color_space='RGB', spatial_size=(32, 32),\n                        hist_bins=32, orient=9, \n                        pix_per_cell=8, cell_per_block=2, hog_channel=0,\n                        spatial_feat=True, hist_feat=True, hog_feat=True):    \n    #1) Define an empty list to receive features\n    img_features = []\n    #2) Apply color conversion if other than 'RGB'\n    if color_space != 'RGB':\n        if color_space == 'HSV':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n        elif color_space == 'LUV':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2LUV)\n        elif color_space == 'HLS':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2HLS)\n        elif color_space == 'YUV':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2YUV)\n        elif color_space == 'YCrCb':\n            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb)\n    else: feature_image = np.copy(img)      \n    #3) Compute spatial features if flag is set\n    if spatial_feat == True:\n        spatial_features = bin_spatial(feature_image, size=spatial_size)\n        #4) Append features to list\n        img_features.append(spatial_features)\n    #5) Compute histogram features if flag is set\n    if hist_feat == True:\n        hist_features = color_hist(feature_image, nbins=hist_bins)\n        #6) Append features to list\n        img_features.append(hist_features)\n    #7) Compute HOG features if flag is set\n    if hog_feat == True:\n        if hog_channel == 'ALL':\n            hog_features = []\n            for channel in range(feature_image.shape[2]):\n                hog_features.extend(get_hog_features(feature_image[:,:,channel], \n                                    orient, pix_per_cell, cell_per_block, \n                                    vis=False, feature_vec=True))      \n        else:\n            hog_features = get_hog_features(feature_image[:,:,hog_channel], orient, \n                        pix_per_cell, cell_per_block, vis=False, feature_vec=True)\n        #8) Append features to list\n        img_features.append(hog_features)\n\n    #9) Return concatenated array of features\n    return np.concatenate(img_features)\n\n# Define a function you will pass an image \n# and the list of windows to be searched (output of slide_windows())\ndef search_windows(img, windows, clf, scaler, color_space='RGB', \n                    spatial_size=(32, 32), hist_bins=32, \n                    hist_range=(0, 256), orient=9, \n                    pix_per_cell=8, cell_per_block=2, \n                    hog_channel=0, spatial_feat=True, \n                    hist_feat=True, hog_feat=True):\n\n    #1) Create an empty list to receive positive detection windows\n    on_windows = []\n    #2) Iterate over all windows in the list\n    for window in windows:\n        #3) Extract the test window from original image\n        test_img = cv2.resize(img[window[0][1]:window[1][1], window[0][0]:window[1][0]], (64, 64))      \n        #4) Extract features for that window using single_img_features()\n        features = single_img_features(test_img, color_space=color_space, \n                            spatial_size=spatial_size, hist_bins=hist_bins, \n                            orient=orient, pix_per_cell=pix_per_cell, \n                            cell_per_block=cell_per_block, \n                            hog_channel=hog_channel, spatial_feat=spatial_feat, \n                            hist_feat=hist_feat, hog_feat=hog_feat)\n        #5) Scale extracted features to be fed to classifier\n        test_features = scaler.transform(np.array(features).reshape(1, -1))\n        #6) Predict using your classifier\n        prediction = clf.predict(test_features)\n        #7) If positive (prediction == 1) then save the window\n        if prediction == 1:\n            on_windows.append(window)\n    #8) Return windows for positive detections\n    return on_windows\n    ",
                    "name": "solution.py"
                  },
                  {
                    "text": "import matplotlib.image as mpimg\r\nimport numpy as np\r\nimport cv2\r\nfrom skimage.feature import hog\r\n# Define a function to return HOG features and visualization\r\ndef get_hog_features(img, orient, pix_per_cell, cell_per_block, \r\n                        vis=False, feature_vec=True):\r\n    # Call with two outputs if vis==True\r\n    if vis == True:\r\n        features, hog_image = hog(img, orientations=orient, \r\n                                  pixels_per_cell=(pix_per_cell, pix_per_cell),\r\n                                  block_norm= 'L2-Hys',\r\n                                  cells_per_block=(cell_per_block, cell_per_block), \r\n                                  transform_sqrt=True, \r\n                                  visualise=vis, feature_vector=feature_vec)\r\n        return features, hog_image\r\n    # Otherwise call with one output\r\n    else:      \r\n        features = hog(img, orientations=orient, \r\n                       pixels_per_cell=(pix_per_cell, pix_per_cell),\r\n                       cells_per_block=(cell_per_block, cell_per_block), \r\n                       block_norm= 'L2-Hys',\r\n                       transform_sqrt=True, \r\n                       visualise=vis, feature_vector=feature_vec)\r\n        return features\r\n\r\n# Define a function to compute binned color features  \r\ndef bin_spatial(img, size=(32, 32)):\r\n    # Use cv2.resize().ravel() to create the feature vector\r\n    features = cv2.resize(img, size).ravel() \r\n    # Return the feature vector\r\n    return features\r\n\r\n# Define a function to compute color histogram features \r\n# NEED TO CHANGE bins_range if reading .png files with mpimg!\r\ndef color_hist(img, nbins=32, bins_range=(0, 256)):\r\n    # Compute the histogram of the color channels separately\r\n    channel1_hist = np.histogram(img[:,:,0], bins=nbins, range=bins_range)\r\n    channel2_hist = np.histogram(img[:,:,1], bins=nbins, range=bins_range)\r\n    channel3_hist = np.histogram(img[:,:,2], bins=nbins, range=bins_range)\r\n    # Concatenate the histograms into a single feature vector\r\n    hist_features = np.concatenate((channel1_hist[0], channel2_hist[0], channel3_hist[0]))\r\n    # Return the individual histograms, bin_centers and feature vector\r\n    return hist_features\r\n\r\n# Define a function to extract features from a list of images\r\n# Have this function call bin_spatial() and color_hist()\r\ndef extract_features(imgs, color_space='RGB', spatial_size=(32, 32),\r\n                        hist_bins=32, orient=9, \r\n                        pix_per_cell=8, cell_per_block=2, hog_channel=0,\r\n                        spatial_feat=True, hist_feat=True, hog_feat=True):\r\n    # Create a list to append feature vectors to\r\n    features = []\r\n    # Iterate through the list of images\r\n    for file in imgs:\r\n        file_features = []\r\n        # Read in each one by one\r\n        image = mpimg.imread(file)\r\n        # apply color conversion if other than 'RGB'\r\n        if color_space != 'RGB':\r\n            if color_space == 'HSV':\r\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)\r\n            elif color_space == 'LUV':\r\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2LUV)\r\n            elif color_space == 'HLS':\r\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HLS)\r\n            elif color_space == 'YUV':\r\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YUV)\r\n            elif color_space == 'YCrCb':\r\n                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YCrCb)\r\n        else: feature_image = np.copy(image)      \r\n\r\n        if spatial_feat == True:\r\n            spatial_features = bin_spatial(feature_image, size=spatial_size)\r\n            file_features.append(spatial_features)\r\n        if hist_feat == True:\r\n            # Apply color_hist()\r\n            hist_features = color_hist(feature_image, nbins=hist_bins)\r\n            file_features.append(hist_features)\r\n        if hog_feat == True:\r\n        # Call get_hog_features() with vis=False, feature_vec=True\r\n            if hog_channel == 'ALL':\r\n                hog_features = []\r\n                for channel in range(feature_image.shape[2]):\r\n                    hog_features.append(get_hog_features(feature_image[:,:,channel], \r\n                                        orient, pix_per_cell, cell_per_block, \r\n                                        vis=False, feature_vec=True))\r\n                hog_features = np.ravel(hog_features)        \r\n            else:\r\n                hog_features = get_hog_features(feature_image[:,:,hog_channel], orient, \r\n                            pix_per_cell, cell_per_block, vis=False, feature_vec=True)\r\n            # Append the new feature vector to the features list\r\n            file_features.append(hog_features)\r\n        features.append(np.concatenate(file_features))\r\n    # Return list of feature vectors\r\n    return features\r\n    \r\n# Define a function that takes an image,\r\n# start and stop positions in both x and y, \r\n# window size (x and y dimensions),  \r\n# and overlap fraction (for both x and y)\r\ndef slide_window(img, x_start_stop=[None, None], y_start_stop=[None, None], \r\n                    xy_window=(64, 64), xy_overlap=(0.5, 0.5)):\r\n    # If x and/or y start/stop positions not defined, set to image size\r\n    if x_start_stop[0] == None:\r\n        x_start_stop[0] = 0\r\n    if x_start_stop[1] == None:\r\n        x_start_stop[1] = img.shape[1]\r\n    if y_start_stop[0] == None:\r\n        y_start_stop[0] = 0\r\n    if y_start_stop[1] == None:\r\n        y_start_stop[1] = img.shape[0]\r\n    # Compute the span of the region to be searched    \r\n    xspan = x_start_stop[1] - x_start_stop[0]\r\n    yspan = y_start_stop[1] - y_start_stop[0]\r\n    # Compute the number of pixels per step in x/y\r\n    nx_pix_per_step = np.int(xy_window[0]*(1 - xy_overlap[0]))\r\n    ny_pix_per_step = np.int(xy_window[1]*(1 - xy_overlap[1]))\r\n    # Compute the number of windows in x/y\r\n    nx_buffer = np.int(xy_window[0]*(xy_overlap[0]))\r\n    ny_buffer = np.int(xy_window[1]*(xy_overlap[1]))\r\n    nx_windows = np.int((xspan-nx_buffer)/nx_pix_per_step) \r\n    ny_windows = np.int((yspan-ny_buffer)/ny_pix_per_step) \r\n    # Initialize a list to append window positions to\r\n    window_list = []\r\n    # Loop through finding x and y window positions\r\n    # Note: you could vectorize this step, but in practice\r\n    # you'll be considering windows one by one with your\r\n    # classifier, so looping makes sense\r\n    for ys in range(ny_windows):\r\n        for xs in range(nx_windows):\r\n            # Calculate window position\r\n            startx = xs*nx_pix_per_step + x_start_stop[0]\r\n            endx = startx + xy_window[0]\r\n            starty = ys*ny_pix_per_step + y_start_stop[0]\r\n            endy = starty + xy_window[1]\r\n            \r\n            # Append window position to list\r\n            window_list.append(((startx, starty), (endx, endy)))\r\n    # Return the list of windows\r\n    return window_list\r\n\r\n# Define a function to draw bounding boxes\r\ndef draw_boxes(img, bboxes, color=(0, 0, 255), thick=6):\r\n    # Make a copy of the image\r\n    imcopy = np.copy(img)\r\n    # Iterate through the bounding boxes\r\n    for bbox in bboxes:\r\n        # Draw a rectangle given bbox coordinates\r\n        cv2.rectangle(imcopy, bbox[0], bbox[1], color, thick)\r\n    # Return the image copy with boxes drawn\r\n    return imcopy\r\n",
                    "name": "lesson_functions.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 265046,
          "key": "c3e815c7-1794-4854-8842-5d7b96276642",
          "title": "Hog Sub-sampling Window Search",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c3e815c7-1794-4854-8842-5d7b96276642",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 265047,
              "key": "7f022407-dd30-4736-b608-3c7d2cc7ca30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Hog Sub-sampling Window Search\n\nNow lets explore a more efficient method for doing the sliding window approach, one that allows us to only have to extract the Hog features once, . The code below defines a single function `find_cars` that's able to both extract features and make predictions.\n\n The `find_cars` only has to extract hog features once, for each of a small set of predetermined window sizes (defined by a scale argument), and then can be sub-sampled to get all of its overlaying windows. Each window is defined by a scaling factor that impacts the window size.  The scale factor can be set on different regions of the image (e.g. small near the horizon, larger in the center).  \n\nFor our example are using a 64 x 64 base window.  If we define pixels per cell as 8 x 8, then a scale of 1 would retain a window that's 8 x 8 cells (8 cells to cover 64 pixels in either direction).  An overlap of each window can be defined in terms of the cell distance, using `cells_per_step`. This means that a `cells_per_step = 2` would result in a search window overlap of 75% (2 is 25% of 8, so we move 25% each time, leaving 75% overlap with the previous window). Any value of scale that is larger or smaller than one will scale the base image accordingly, resulting in corresponding change in the number of cells per window.  Its possible to run this same function multiple times for different scale values to generate multiple-scaled search windows.",
              "instructor_notes": ""
            },
            {
              "id": 267220,
              "key": "345a4a56-9475-4f1f-bb81-dc8acd979662",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a8b3a1_hog-sub/hog-sub.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/345a4a56-9475-4f1f-bb81-dc8acd979662",
              "caption": "",
              "alt": null,
              "width": 1280,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 552675,
              "key": "dc6c711e-1991-4f22-9ecc-1605e2737361",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Note in the code below, we load a pre-trained svc model that has been serialized (stored in a pickle file), and then retrieve attributes from loaded svc model.\n\nIf you'd like to use this code on your own machine outside of the classroom, you can download the [svc model](https://s3-us-west-1.amazonaws.com/udacity-selfdrivingcar/files/Vehicle_Detection_Images/svc_pickle.p) and [test image](https://s3-us-west-1.amazonaws.com/udacity-selfdrivingcar/files/Vehicle_Detection_Images/test_image.jpg).",
              "instructor_notes": ""
            },
            {
              "id": 265048,
              "key": "ae616d13-716d-476b-af4a-62f8114257f1",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "ae616d13-716d-476b-af4a-62f8114257f1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5157296830283776",
                "initial_code_files": [
                  {
                    "text": "import matplotlib.image as mpimg\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport pickle\r\nimport cv2\r\nfrom lesson_functions import *\r\n\r\n# load a pe-trained svc model from a serialized (pickle) file\r\ndist_pickle = pickle.load( open(\"svc_pickle.p\", \"rb\" ) )\r\n\r\n# get attributes of our svc object\r\nsvc = dist_pickle[\"svc\"]\r\nX_scaler = dist_pickle[\"scaler\"]\r\norient = dist_pickle[\"orient\"]\r\npix_per_cell = dist_pickle[\"pix_per_cell\"]\r\ncell_per_block = dist_pickle[\"cell_per_block\"]\r\nspatial_size = dist_pickle[\"spatial_size\"]\r\nhist_bins = dist_pickle[\"hist_bins\"]\r\n\r\nimg = mpimg.imread('test_image.jpg')\r\n\r\n# Define a single function that can extract features using hog sub-sampling and make predictions\r\ndef find_cars(img, ystart, ystop, scale, svc, X_scaler, orient, pix_per_cell, cell_per_block, spatial_size, hist_bins):\r\n    \r\n    draw_img = np.copy(img)\r\n    img = img.astype(np.float32)/255\r\n    \r\n    img_tosearch = img[ystart:ystop,:,:]\r\n    ctrans_tosearch = convert_color(img_tosearch, conv='RGB2YCrCb')\r\n    if scale != 1:\r\n        imshape = ctrans_tosearch.shape\r\n        ctrans_tosearch = cv2.resize(ctrans_tosearch, (np.int(imshape[1]/scale), np.int(imshape[0]/scale)))\r\n        \r\n    ch1 = ctrans_tosearch[:,:,0]\r\n    ch2 = ctrans_tosearch[:,:,1]\r\n    ch3 = ctrans_tosearch[:,:,2]\r\n\r\n    # Define blocks and steps as above\r\n    nxblocks = (ch1.shape[1] // pix_per_cell) - cell_per_block + 1\r\n    nyblocks = (ch1.shape[0] // pix_per_cell) - cell_per_block + 1 \r\n    nfeat_per_block = orient*cell_per_block**2\r\n    \r\n    # 64 was the orginal sampling rate, with 8 cells and 8 pix per cell\r\n    window = 64\r\n    nblocks_per_window = (window // pix_per_cell) - cell_per_block + 1\r\n    cells_per_step = 2  # Instead of overlap, define how many cells to step\r\n    nxsteps = (nxblocks - nblocks_per_window) // cells_per_step + 1\r\n    nysteps = (nyblocks - nblocks_per_window) // cells_per_step + 1\r\n    \r\n    # Compute individual channel HOG features for the entire image\r\n    hog1 = get_hog_features(ch1, orient, pix_per_cell, cell_per_block, feature_vec=False)\r\n    hog2 = get_hog_features(ch2, orient, pix_per_cell, cell_per_block, feature_vec=False)\r\n    hog3 = get_hog_features(ch3, orient, pix_per_cell, cell_per_block, feature_vec=False)\r\n    \r\n    for xb in range(nxsteps):\r\n        for yb in range(nysteps):\r\n            ypos = yb*cells_per_step\r\n            xpos = xb*cells_per_step\r\n            # Extract HOG for this patch\r\n            hog_feat1 = hog1[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() \r\n            hog_feat2 = hog2[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() \r\n            hog_feat3 = hog3[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() \r\n            hog_features = np.hstack((hog_feat1, hog_feat2, hog_feat3))\r\n\r\n            xleft = xpos*pix_per_cell\r\n            ytop = ypos*pix_per_cell\r\n\r\n            # Extract the image patch\r\n            subimg = cv2.resize(ctrans_tosearch[ytop:ytop+window, xleft:xleft+window], (64,64))\r\n          \r\n            # Get color features\r\n            spatial_features = bin_spatial(subimg, size=spatial_size)\r\n            hist_features = color_hist(subimg, nbins=hist_bins)\r\n\r\n            # Scale features and make a prediction\r\n            test_features = X_scaler.transform(np.hstack((spatial_features, hist_features, hog_features)).reshape(1, -1))    \r\n            #test_features = X_scaler.transform(np.hstack((shape_feat, hist_feat)).reshape(1, -1))    \r\n            test_prediction = svc.predict(test_features)\r\n            \r\n            if test_prediction == 1:\r\n                xbox_left = np.int(xleft*scale)\r\n                ytop_draw = np.int(ytop*scale)\r\n                win_draw = np.int(window*scale)\r\n                cv2.rectangle(draw_img,(xbox_left, ytop_draw+ystart),(xbox_left+win_draw,ytop_draw+win_draw+ystart),(0,0,255),6) \r\n                \r\n    return draw_img\r\n    \r\nystart = 400\r\nystop = 656\r\nscale = 1.5\r\n    \r\nout_img = find_cars(img, ystart, ystop, scale, svc, X_scaler, orient, pix_per_cell, cell_per_block, spatial_size, hist_bins)\r\n\r\nplt.imshow(out_img)",
                    "name": "hog_subsample.py"
                  },
                  {
                    "text": "import numpy as np\nimport cv2\nfrom skimage.feature import hog\n\ndef convert_color(img, conv='RGB2YCrCb'):\n    if conv == 'RGB2YCrCb':\n        return cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb)\n    if conv == 'BGR2YCrCb':\n        return cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb)\n    if conv == 'RGB2LUV':\n        return cv2.cvtColor(img, cv2.COLOR_RGB2LUV)\n\ndef get_hog_features(img, orient, pix_per_cell, cell_per_block, \n                        vis=False, feature_vec=True):\n    # Call with two outputs if vis==True\n    if vis == True:\n        features, hog_image = hog(img, orientations=orient, \n                                  pixels_per_cell=(pix_per_cell, pix_per_cell),\n                                  cells_per_block=(cell_per_block, cell_per_block),\n                                  block_norm= 'L2-Hys',\n                                  transform_sqrt=False, \n                                  visualise=vis, feature_vector=feature_vec)\n        return features, hog_image\n    # Otherwise call with one output\n    else:      \n        features = hog(img, orientations=orient, \n                       pixels_per_cell=(pix_per_cell, pix_per_cell),\n                       cells_per_block=(cell_per_block, cell_per_block),\n                       block_norm= 'L2-Hys',\n                       transform_sqrt=False, \n                       visualise=vis, feature_vector=feature_vec)\n        return features\n\ndef bin_spatial(img, size=(32, 32)):\n    color1 = cv2.resize(img[:,:,0], size).ravel()\n    color2 = cv2.resize(img[:,:,1], size).ravel()\n    color3 = cv2.resize(img[:,:,2], size).ravel()\n    return np.hstack((color1, color2, color3))\n                        \ndef color_hist(img, nbins=32):    #bins_range=(0, 256)\n    # Compute the histogram of the color channels separately\n    channel1_hist = np.histogram(img[:,:,0], bins=nbins)\n    channel2_hist = np.histogram(img[:,:,1], bins=nbins)\n    channel3_hist = np.histogram(img[:,:,2], bins=nbins)\n    # Concatenate the histograms into a single feature vector\n    hist_features = np.concatenate((channel1_hist[0], channel2_hist[0], channel3_hist[0]))\n    # Return the individual histograms, bin_centers and feature vector\n    return hist_features\n\n",
                    "name": "lesson_functions.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 232508,
          "key": "f2516a53-ad84-47aa-87f1-6541b159f113",
          "title": "False Positives",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f2516a53-ad84-47aa-87f1-6541b159f113",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232509,
              "key": "e3b6ca37-1cb1-4521-b2eb-81a6eefeaac8",
              "title": "False Positives",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rihCsPhUSPk",
                "china_cdn_id": "rihCsPhUSPk.mp4"
              }
            }
          ]
        },
        {
          "id": 262397,
          "key": "de41bff0-ad52-493f-8ef4-5506a279b812",
          "title": "Multiple Detections & False Positives",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "de41bff0-ad52-493f-8ef4-5506a279b812",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 262398,
              "key": "3fc3aed8-92d2-4420-a6b4-683e33c2ac49",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Multiple Detections & False Positives\n===\n\nHere are six consecutive frames from the project video and I'm showing all the bounding boxes for where my classifier reported positive detections.  You can see that overlapping detections exist for each of the two vehicles, and in two of the frames, I find a false positive detection on the guardrail to the left.  In this exercise, you'll build a heat-map from these detections in order to combine overlapping detections and remove false positives.",
              "instructor_notes": ""
            },
            {
              "id": 262400,
              "key": "5445bf04-3e20-4d8a-bcc9-d25b32096c56",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588e7242_screen-shot-2017-01-29-at-2.52.00-pm/screen-shot-2017-01-29-at-2.52.00-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5445bf04-3e20-4d8a-bcc9-d25b32096c56",
              "caption": "",
              "alt": null,
              "width": 793,
              "height": 769,
              "instructor_notes": null
            },
            {
              "id": 262401,
              "key": "63c260a5-f674-46e5-85e8-c83de59b3f35",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To make a heat-map, you're simply going to add \"heat\" (+=1) for all pixels within windows where a positive detection is reported by your classifier.  The individual heat-maps for the above images look like this:",
              "instructor_notes": ""
            },
            {
              "id": 262414,
              "key": "c5d8ebfa-9ca4-4585-a3a0-9c8883e9368d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588eaef6_screen-shot-2017-01-29-at-7.11.18-pm/screen-shot-2017-01-29-at-7.11.18-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c5d8ebfa-9ca4-4585-a3a0-9c8883e9368d",
              "caption": "",
              "alt": null,
              "width": 790,
              "height": 772,
              "instructor_notes": null
            },
            {
              "id": 262404,
              "key": "69b3bdbb-7f64-4395-b619-044be9253e65",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the exercise below, you are provided with a list of bounding boxes for the detections in the images shown above.  Rather than consider heat-maps for each individual image, you'll write a function that adds \"heat\" to a map for a list of bounding boxes.\n\n```python\ndef add_heat(heatmap, bbox_list):\n    # Iterate through list of bboxes\n    for box in bbox_list:\n        # Add += 1 for all pixels inside each bbox\n        # Assuming each \"box\" takes the form ((x1, y1), (x2, y2))\n        heatmap[box[0][1]:box[1][1], box[0][0]:box[1][0]] += 1\n    \n    # Return updated heatmap\n    return heatmap\n```\n\nIf your classifier is working well, then the \"hot\" parts of the map are where the cars are, and by imposing a threshold, you can reject areas affected by false positives.  So let's write a function to threshold the map as well.\n\n```python\ndef apply_threshold(heatmap, threshold):\n    # Zero out pixels below the threshold\n    heatmap[heatmap <= threshold] = 0\n    # Return thresholded map\n    return heatmap\n\n```\n\nIn practice, you will want to integrate a heat map over several frames of video, such that areas of multiple detections get \"hot\", while transient false positives stay \"cool\".  You can then simply threshold your heatmap to remove false positives.\n\nOnce you have a thresholded heat-map, there are many ways you could go about trying to figure out how many cars you have in each frame and which pixels belong to which cars, but one of the most straightforward solutions is to use the `label()` function from `scipy.ndimage.measurements`.  You'll use it like this:\n\n```python\nfrom scipy.ndimage.measurements import label\nlabels = label(heatmap)\n```\n\nNow `labels` is a 2-tuple, where the first item is an array the size of the `heatmap` input image and the second element is the number of labels (cars) found.  \n\nIn the above series of images the same false positive window appeared twice, so if I set a threshold of 2 (meaning set all values <= 2 to 0) and then run the `labels()` function.  I get a result that 2 cars were identified (the two islands in the heat-map) and the labeled image where pixels are set to 0 for background, 1 for car number 1, and 2 for car number 2.\n\n```python\nheatmap = threshold(heatmap, 2)\nlabels = label(heatmap)\nprint(labels[1], 'cars found')\nplt.imshow(labels[0], cmap='gray')\n```\n2 cars found",
              "instructor_notes": ""
            },
            {
              "id": 262405,
              "key": "269c3cc1-532a-4c67-b402-a83f68e3b5a1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588e95cb_screen-shot-2017-01-29-at-5.23.31-pm/screen-shot-2017-01-29-at-5.23.31-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/269c3cc1-532a-4c67-b402-a83f68e3b5a1",
              "caption": "",
              "alt": null,
              "width": 543,
              "height": 314,
              "instructor_notes": null
            },
            {
              "id": 262411,
              "key": "49271210-bc98-477f-b8b6-526e6b927df6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Next, you can take your `labels` image and put bounding boxes around the labeled regions.  You could do this in the following manner:\n\n```python\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\n\ndef draw_labeled_bboxes(img, labels):\n    # Iterate through all detected cars\n    for car_number in range(1, labels[1]+1):\n        # Find pixels with each car_number label value\n        nonzero = (labels[0] == car_number).nonzero()\n        # Identify x and y values of those pixels\n        nonzeroy = np.array(nonzero[0])\n        nonzerox = np.array(nonzero[1])\n        # Define a bounding box based on min/max x and y\n        bbox = ((np.min(nonzerox), np.min(nonzeroy)), (np.max(nonzerox), np.max(nonzeroy)))\n        # Draw the box on the image\n        cv2.rectangle(img, bbox[0], bbox[1], (0,0,255), 6)\n    # Return the image\n    return img\n\n# Read in the last image above\nimage = mpimg.imread('img105.jpg')\n# Draw bounding boxes on a copy of the image\ndraw_img = draw_labeled_bboxes(np.copy(image), labels)\n# Display the image\nplt.imshow(draw_img)\n```\n\n** And the output looks like this:**",
              "instructor_notes": ""
            },
            {
              "id": 262412,
              "key": "5dda09a4-e1f6-4d58-a911-372e28d66c0c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588eacf1_screen-shot-2017-01-29-at-6.53.54-pm/screen-shot-2017-01-29-at-6.53.54-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5dda09a4-e1f6-4d58-a911-372e28d66c0c",
              "caption": "",
              "alt": null,
              "width": 854,
              "height": 508,
              "instructor_notes": null
            },
            {
              "id": 613566,
              "key": "04b420bb-9859-412b-a3c7-9ba367607d59",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you'd like to use this quiz code on your own machine outside of the classroom, you can download the [bounding boxes](https://s3-us-west-1.amazonaws.com/udacity-selfdrivingcar/files/Vehicle_Detection_Images/bbox_items/bbox_pickle.p) and [test image](https://s3-us-west-1.amazonaws.com/udacity-selfdrivingcar/files/Vehicle_Detection_Images/bbox_items/test_image.jpg).",
              "instructor_notes": ""
            },
            {
              "id": 262403,
              "key": "288fa32f-166b-46c7-a6e2-4d06313ae2dd",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "288fa32f-166b-46c7-a6e2-4d06313ae2dd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6310546501664768",
                "initial_code_files": [
                  {
                    "text": "import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pickle\nimport cv2\nfrom scipy.ndimage.measurements import label\n\n# Read in a pickle file with bboxes saved\n# Each item in the \"all_bboxes\" list will contain a \n# list of boxes for one of the images shown above\nbox_list = pickle.load( open( \"bbox_pickle.p\", \"rb\" ))\n\n# Read in image similar to one shown above \nimage = mpimg.imread('test_image.jpg')\nheat = np.zeros_like(image[:,:,0]).astype(np.float)\n\ndef add_heat(heatmap, bbox_list):\n    # Iterate through list of bboxes\n    for box in bbox_list:\n        # Add += 1 for all pixels inside each bbox\n        # Assuming each \"box\" takes the form ((x1, y1), (x2, y2))\n        heatmap[box[0][1]:box[1][1], box[0][0]:box[1][0]] += 1\n\n    # Return updated heatmap\n    return heatmap# Iterate through list of bboxes\n    \ndef apply_threshold(heatmap, threshold):\n    # Zero out pixels below the threshold\n    heatmap[heatmap <= threshold] = 0\n    # Return thresholded map\n    return heatmap\n\ndef draw_labeled_bboxes(img, labels):\n    # Iterate through all detected cars\n    for car_number in range(1, labels[1]+1):\n        # Find pixels with each car_number label value\n        nonzero = (labels[0] == car_number).nonzero()\n        # Identify x and y values of those pixels\n        nonzeroy = np.array(nonzero[0])\n        nonzerox = np.array(nonzero[1])\n        # Define a bounding box based on min/max x and y\n        bbox = ((np.min(nonzerox), np.min(nonzeroy)), (np.max(nonzerox), np.max(nonzeroy)))\n        # Draw the box on the image\n        cv2.rectangle(img, bbox[0], bbox[1], (0,0,255), 6)\n    # Return the image\n    return img\n\n# Add heat to each box in box list\nheat = add_heat(heat,box_list)\n    \n# Apply threshold to help remove false positives\nheat = apply_threshold(heat,1)\n\n# Visualize the heatmap when displaying    \nheatmap = np.clip(heat, 0, 255)\n\n# Find final boxes from heatmap using label function\nlabels = label(heatmap)\ndraw_img = draw_labeled_bboxes(np.copy(image), labels)\n\nfig = plt.figure()\nplt.subplot(121)\nplt.imshow(draw_img)\nplt.title('Car Positions')\nplt.subplot(122)\nplt.imshow(heatmap, cmap='hot')\nplt.title('Heat Map')\nfig.tight_layout()\n",
                    "name": "false_positives.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 232515,
          "key": "25dfc755-6f49-42f8-b617-f3c145c12f5e",
          "title": "Tracking Pipeline",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "25dfc755-6f49-42f8-b617-f3c145c12f5e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232517,
              "key": "032919de-277b-4cbf-bc52-b2d73b87af98",
              "title": "Tracking Pipeline",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ioaSZFCn3iI",
                "china_cdn_id": "ioaSZFCn3iI.mp4"
              }
            }
          ]
        },
        {
          "id": 232520,
          "key": "5b455624-ec3a-4600-9e29-368d7f12a3d0",
          "title": "Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5b455624-ec3a-4600-9e29-368d7f12a3d0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232521,
              "key": "3a031526-b59b-4115-b308-a7516745917c",
              "title": "Summary of Vehicle Detection and Tracking",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3ceKmVDQfFQ",
                "china_cdn_id": "3ceKmVDQfFQ.mp4"
              }
            }
          ]
        },
        {
          "id": 232522,
          "key": "62cc8f1d-84ac-4215-a7ab-997bd289ea49",
          "title": "Traditional vs. Deep Learning Approach",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "62cc8f1d-84ac-4215-a7ab-997bd289ea49",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232523,
              "key": "7b4e1a96-573f-45c1-a744-346ae8f7d361",
              "title": "Traditional vs. Deep Learning Approach",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_IFdaC0lWhI",
                "china_cdn_id": "_IFdaC0lWhI.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}