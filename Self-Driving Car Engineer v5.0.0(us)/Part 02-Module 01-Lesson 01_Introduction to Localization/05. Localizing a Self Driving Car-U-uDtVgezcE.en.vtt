WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:04.229
Now assume there is
a car that is totally lost,

00:00:04.230 --> 00:00:08.220
which means you, as
a driver or as a car,

00:00:08.220 --> 00:00:10.670
have no clue where you are.

00:00:10.669 --> 00:00:15.780
Now you assume that you have a
global map of the environment.

00:00:15.779 --> 00:00:18.179
In this example,
you can see a map

00:00:18.179 --> 00:00:21.300
of the environment around
the [INAUDIBLE] office

00:00:21.300 --> 00:00:22.830
in [INAUDIBLE].

00:00:22.829 --> 00:00:25.949
Now, generally
speaking, localization

00:00:25.949 --> 00:00:31.559
answers a question, where
is our car in a given

00:00:31.559 --> 00:00:34.530
map with a high accuracy?

00:00:34.530 --> 00:00:39.120
And high accuracy means between
three and 10 centimeters.

00:00:39.119 --> 00:00:42.359
In a traditional way, we use
global navigation satellite

00:00:42.359 --> 00:00:46.429
systems to find the car,
with respect to the map.

00:00:46.429 --> 00:00:49.799
But GPS is not precise enough.

00:00:49.799 --> 00:00:53.489
Most of the time,
GPS has an accuracy

00:00:53.490 --> 00:00:57.060
of the worth of a lane--
about one to three meters.

00:00:57.060 --> 00:01:03.480
But sometimes it can be as
broad as 10 to 50 meters.

00:01:03.479 --> 00:01:07.890
Clearly this is not reliable
enough for a self-driving car.

00:01:07.890 --> 00:01:10.349
So you can't trust GPS.

00:01:10.349 --> 00:01:14.369
And you have to find another
technique to localize yourself

00:01:14.370 --> 00:01:16.770
inside a given map.

00:01:16.769 --> 00:01:19.539
It is common practice to
use the onboard sensor

00:01:19.540 --> 00:01:23.310
data, along with our global
map, to solve the localization

00:01:23.310 --> 00:01:24.540
issue.

00:01:24.540 --> 00:01:26.880
So with the onboard
sensors it is

00:01:26.879 --> 00:01:30.599
possible to measure distances
to static obstacles,

00:01:30.599 --> 00:01:34.289
like trees, poles, or walls.

00:01:34.290 --> 00:01:37.260
We measure these
distances, and the bearing

00:01:37.260 --> 00:01:39.630
of these static
objects in the local

00:01:39.629 --> 00:01:43.109
coordinate system of our car.

00:01:43.109 --> 00:01:46.439
Now when you're lucky,
the same obstacles

00:01:46.439 --> 00:01:48.929
that were observed by
the onboard sensors

00:01:48.930 --> 00:01:51.810
are also part of the map.

00:01:51.810 --> 00:01:57.450
And, of course, the map has its
own global coordinate system.

00:01:57.450 --> 00:02:00.150
To estimate where the
car is in the map,

00:02:00.150 --> 00:02:03.300
you have to match
the observations

00:02:03.299 --> 00:02:06.459
with the map information.

00:02:06.459 --> 00:02:09.239
And when you do it
correctly, this results

00:02:09.240 --> 00:02:12.457
in a transformation between
both coordinate systems--

00:02:12.456 --> 00:02:17.370
the local car coordinate system
and the global coordinate

00:02:17.370 --> 00:02:20.069
system of the map.

00:02:20.069 --> 00:02:23.099
This transformation
should be as accurate

00:02:23.099 --> 00:02:27.479
as possible-- let's say within
a range of 10 centimeters

00:02:27.479 --> 00:02:28.789
or less.

00:02:28.789 --> 00:02:31.900
If you are able to estimate
this transformation,

00:02:31.900 --> 00:02:34.780
you solve the
localization issue.

00:02:34.780 --> 00:02:38.110
So after this example,
we can summarize.

00:02:38.110 --> 00:02:40.630
First, localization
answers the question

00:02:40.629 --> 00:02:44.769
of where the car is in a given
map within an accuracy of 10

00:02:44.770 --> 00:02:46.870
centimeters or less.

00:02:46.870 --> 00:02:50.740
And second, onboard
sensors are used

00:02:50.740 --> 00:02:54.129
to estimate the transformation
between local measurements

00:02:54.129 --> 00:02:56.280
and a given map.

