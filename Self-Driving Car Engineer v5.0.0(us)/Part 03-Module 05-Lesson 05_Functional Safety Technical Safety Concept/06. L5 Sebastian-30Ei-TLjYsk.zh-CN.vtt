WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.390
确实 我们经常会采集大量数据

00:00:02.390 --> 00:00:05.490
此外 我们经常做的另一件事情是回归测试

00:00:05.490 --> 00:00:06.915
现在 也许大家不太清楚该名称背后的内涵

00:00:06.915 --> 00:00:08.035
但是 我们要做的工作是很明白的

00:00:08.035 --> 00:00:13.619
那就是 在故障发生时 采集相关数据集

00:00:13.619 --> 00:00:16.689
然后我们修正与这些数据相关联的错误

00:00:16.690 --> 00:00:18.010
我们会采用一些方法来处理这些故障数据

00:00:18.010 --> 00:00:21.179
我们会编写软件 使用这些数据来重现故障

00:00:21.179 --> 00:00:24.809
模拟真实车辆在真实环境中行驶的情形

00:00:24.809 --> 00:00:28.329
然后我们希望在模拟环境中的修正可以解决实际中的对应问题

00:00:28.329 --> 00:00:31.409
但是 事后我们会继续保留这些数据而不是丢弃它们

00:00:31.410 --> 00:00:33.810
原因是 我们会继续用这些数据来做测试

00:00:33.810 --> 00:00:35.370
我们的测试数据不仅包括最新的数据

00:00:35.369 --> 00:00:37.399
也包括那些过往数据

00:00:37.399 --> 00:00:38.734
因为 当我们说

00:00:38.734 --> 00:00:40.760
“好了 这个问题已经解决” 的时候

00:00:40.761 --> 00:00:41.970
可能会有另一个问题存在

00:00:41.969 --> 00:00:44.164
那就是 我们的修正可能不小心导致一个新的问题出现

00:00:44.164 --> 00:00:46.993
经常出现的一种情况是

00:00:46.993 --> 00:00:50.225
我们解决了新问题 但是运行以前的数据却通不过了

00:00:50.225 --> 00:00:52.609
对我们来说 理解这些是非常重要的

00:00:52.609 --> 00:00:55.659
一开始 我们只是把老数据用于老的模拟上

00:00:55.659 --> 00:00:57.474
而且那时候我们也没有真正去模拟场景

00:00:57.475 --> 00:01:00.225
但是 某个时刻 我们突然意识到把旧数据用于测试的重要性

00:01:00.225 --> 00:01:02.630
因此 我们不得不从头开始进行所有的测试

00:01:02.630 --> 00:01:07.140
这样做下来 我们就可以对软件做出尽量小的修改

00:01:07.140 --> 00:01:09.974
避免对原有功能造成影响

00:01:09.974 --> 00:01:13.039
前提是 我们使用过往数据对软件进行了所有测试

