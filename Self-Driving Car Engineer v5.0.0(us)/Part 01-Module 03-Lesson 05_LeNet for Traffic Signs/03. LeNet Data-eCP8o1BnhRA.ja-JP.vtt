WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:01.980
最初のコードセルで MNIST データセットをロードします

00:00:01.980 --> 00:00:05.515
これは TensorFlow と共にプリインストールされます

00:00:05.514 --> 00:00:09.160
その後 トレーニング 検証 テストセットを保存します

00:00:09.160 --> 00:00:11.910
次に 各セットの画像の数が

00:00:11.910 --> 00:00:15.265
同じセットのラベルの数と一致することを確認します

00:00:15.265 --> 00:00:16.740
次に 1 つの画像の形状を出力して

00:00:16.739 --> 00:00:20.339
そのデータの次元を把握します

00:00:20.339 --> 00:00:23.429
最後に 各セットのサイズを出力します

00:00:23.429 --> 00:00:24.850
このコードを実行すると

00:00:24.850 --> 00:00:28.500
トレーニングセットの画像数 55,000 が表示されます

00:00:28.500 --> 00:00:34.130
評価セットの画像数は 5,000 で テストセットの画像数は 10,000 です

00:00:34.130 --> 00:00:37.570
次のコードセルでは 28x28 の

00:00:37.570 --> 00:00:43.259
MNIST 画像を LeNet で処理可能な 32x32 の画像に変換しました

00:00:43.259 --> 00:00:48.439
これを行うために画像処理ソフトウェアを使用して各画像を拡大しました

00:00:48.439 --> 00:00:52.159
ただし 画像のエッジ周囲にゼロを埋め込んでいます

00:00:52.159 --> 00:00:55.234
このほうが高速でうまく動作します

00:00:55.234 --> 00:00:58.950
完成すると 画像の形状は 32x32x1 になります

00:00:58.950 --> 00:01:02.710
これは LeNet への入力そのものです

00:01:02.710 --> 00:01:05.310
使用するデータを視覚化することは常に得策です

00:01:05.310 --> 00:01:08.790
すべてが実際に 想定したようになっていることを確認できます

00:01:08.790 --> 00:01:11.920
この場合 ランダムな画像を 1 つ

00:01:11.920 --> 00:01:15.969
トレーニングセットから選び matplotlib によって視覚化します

00:01:15.969 --> 00:01:19.170
次に その画像のラベルも出力します

00:01:19.170 --> 00:01:24.105
幸いにもこのラベルは画像と一致します  1 と 1 です

00:01:24.105 --> 00:01:26.410
次のセルでデータを前処理します

00:01:26.409 --> 00:01:30.489
この場合 トレーニングセットをシャッフルするという意味です

00:01:30.489 --> 00:01:33.670
トレーニングデータのシャフルは重要です  そうしないと

00:01:33.670 --> 00:01:37.000
データの順序がネットワークの学習結果に大きく影響することがあります

