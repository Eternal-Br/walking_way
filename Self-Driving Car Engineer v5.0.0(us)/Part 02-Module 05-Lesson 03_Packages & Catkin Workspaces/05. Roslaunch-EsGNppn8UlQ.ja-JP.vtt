WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:04.360
ここまでに 優れた rosrun コマンドを使用して複数のノードを起動してきました

00:00:04.360 --> 00:00:05.580
以前触れたように

00:00:05.580 --> 00:00:08.429
ROS システムは通常 多くの実行ノードから構成されています

00:00:08.429 --> 00:00:11.435
すべてのノードを手動で実行するのは大変な手間がかかります

00:00:11.435 --> 00:00:14.314
roslaunch コマンドはそうした面倒を解決してくれます

00:00:14.314 --> 00:00:18.105
roslaunch コマンドを使用すると 1 つの簡単なコマンドで複数のノードを起動する

00:00:18.105 --> 00:00:20.429
パラメータサーバのデフォルト値を設定する

00:00:20.428 --> 00:00:23.564
停止(死んでいる)しているプロセスを自動実行することができます

00:00:23.565 --> 00:00:25.559
roslaunch を使用するには まずワークスペースを構築し

00:00:25.559 --> 00:00:27.960
このワークスペースをソースにする必要があります

00:00:27.960 --> 00:00:30.054
思い出してください ワークスペースを構築するには

00:00:30.053 --> 00:00:33.515
ワークスペースのルート内から catkin_make コマンドを使用します

00:00:33.515 --> 00:00:35.535
ワークスペースのルートに移動しましょう

00:00:35.534 --> 00:00:38.173
それから構築コマンド catkin_make を発行します

00:00:38.173 --> 00:00:39.945
ワークスペースが構築されたら

00:00:39.945 --> 00:00:41.670
その setup スクリプトを使います

00:00:41.670 --> 00:00:43.048
setup スクリプトは ワークスペースのルート内に

00:00:43.048 --> 00:00:46.094
新しく作成されたディレクトリ devel 内にあります

00:00:46.094 --> 00:00:50.399
OPT Ros ディレクトリ内の setup.bash スクリプトと同じ方法で

00:00:50.399 --> 00:00:54.390
ワークスペースの setup.bash は 環境変数のセットアップを行います

00:00:54.390 --> 00:00:57.435
これは 使用する catkin ワークスペースから提供されるすべてのパッケージ

00:00:57.435 --> 00:01:01.618
ライブラリ その他リソースをシステムによって検出させるものです

00:01:01.618 --> 00:01:03.270
では 先へ進めてこれをソースしましょう

00:01:03.270 --> 00:01:04.896
ソースしたワークスペースで

00:01:04.896 --> 00:01:06.495
simple_arm を起動します

00:01:06.495 --> 00:01:08.775
これを行うにはコマンド roslaunch を使用します

00:01:08.775 --> 00:01:13.534
その後にパッケージ名　simple_arm  その次に起動ファイル名を続けて指定します

00:01:13.534 --> 00:01:17.534
ここはタブ完了の robot_spawn.launch を使用します

00:01:17.534 --> 00:01:19.349
素晴らしいご覧のとおりですlaunch ファイルと simple_arm パッケージを

00:01:19.349 --> 00:01:21.870
使用して arm を起動しました

00:01:21.870 --> 00:01:23.640
いくつかのことが起こりました

00:01:23.640 --> 00:01:25.108
すぐにわかるのは

00:01:25.108 --> 00:01:28.134
シミュレーション内で実行するロボットアームがあることです

00:01:28.135 --> 00:01:30.174
このシミュレーターは Gazebo といいます

00:01:30.174 --> 00:01:33.174
このプログラム内ではこれを引き続き使用していきます

00:01:33.174 --> 00:01:34.840
これを実世界として代用し

00:01:34.840 --> 00:01:37.560
各種の力やトルク 時間の経過

00:01:37.560 --> 00:01:38.864
衝突などのオブジェクト間の

00:01:38.864 --> 00:01:42.540
相互作用をシミュレートします

00:01:42.540 --> 00:01:46.855
ここでシミュレートするロボットは 簡単な 2 自由度制御系ロボットアームです

00:01:46.855 --> 00:01:50.575
見えにくいかもしれませんが アームの先端には小さな黒いボールがついています

00:01:50.575 --> 00:01:52.109
このボールはカメラを表します

00:01:52.109 --> 00:01:55.674
Gazeboでは多様なセンサーもシミュレートできます

00:01:55.674 --> 00:01:57.814
実行されているのは Gazebo だけではありません

00:01:57.813 --> 00:02:00.193
コンソールウィンドウに切り替えて上にスクロールすると

00:02:00.194 --> 00:02:01.950
roslaunch から起動したすべてのノードと

00:02:01.950 --> 00:02:04.439
設定したすべてのパラメーターの

00:02:04.438 --> 00:02:07.509
概要が簡単にまとめられています

00:02:07.510 --> 00:02:09.879
launch ファイルについてすべての詳細を紹介したりはしませんが

00:02:09.878 --> 00:02:12.459
内容の確認はお勧めします

00:02:12.460 --> 00:02:15.854
このファイルは simple_arm パッケージ内の launch ディレクトリにあります

00:02:15.854 --> 00:02:18.084
さて ワークスペースを作成し パッケージを追加し

00:02:18.084 --> 00:02:20.365
あれこれを構築し起動する方法を説明しました

00:02:20.365 --> 00:02:21.865
これで次のステップに進む準備ができました

00:02:21.865 --> 00:02:25.935
シミュレーション内でアームが振り子のように揺れている理由を解き明かしましょう

00:02:25.935 --> 00:02:28.539
次のセクションで詳しく説明しますが

00:02:28.538 --> 00:02:31.478
その前に自分でも考えてみてください

00:02:31.479 --> 00:02:35.000
ヒントを出しますROS マスターコンソールのログメッセージをチェックしましょう

