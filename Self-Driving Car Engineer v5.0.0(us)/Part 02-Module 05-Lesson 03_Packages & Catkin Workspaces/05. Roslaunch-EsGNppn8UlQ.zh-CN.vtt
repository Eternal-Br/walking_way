WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.360
迄今为止 你都在使用传统的 rosrun 命令启动节点

00:00:04.360 --> 00:00:05.580
我前面讲过

00:00:05.580 --> 00:00:08.429
ROS 系统通常包括很多运行中的节点

00:00:08.429 --> 00:00:11.435
但手动运行所有节点可能非常麻烦

00:00:11.435 --> 00:00:14.314
这时候 我们就需要 roslaunch 命令来救场了

00:00:14.314 --> 00:00:18.105
Roslaunch 允许你使用一个命令启动多个节点

00:00:18.105 --> 00:00:20.429
在参数服务器中设置默认参数

00:00:20.428 --> 00:00:23.564
自动回应已经关闭的进程等等

00:00:23.565 --> 00:00:25.559
要使用 roslaunch 你首先必须

00:00:25.559 --> 00:00:27.960
确保你已经搭建并提供了工作空间

00:00:27.960 --> 00:00:30.054
记住 要搭建工作空间

00:00:30.053 --> 00:00:33.515
你必须在工作空间根目录下使用 catkin_make 命令

00:00:33.515 --> 00:00:35.535
现在 我们移动到工作空间根目录

00:00:35.534 --> 00:00:38.173
我们输入搭建命令 catkin_make

00:00:38.173 --> 00:00:39.945
工作空间搭建完成后

00:00:39.945 --> 00:00:41.670
你就可以编写设置脚本了

00:00:41.670 --> 00:00:43.048
设置脚本

00:00:43.048 --> 00:00:46.094
位于工作空间根目录下创建的 devel 目录下

00:00:46.094 --> 00:00:50.399
和 OPT Ros 目录下的 setup.bash 脚本一样

00:00:50.399 --> 00:00:54.390
Setup.bash 里的工作空间负责设置环境变量

00:00:54.390 --> 00:00:57.435
方便系统找到你的 catkin 工作空间提供的

00:00:57.435 --> 00:01:01.618
所有包、库和其他资源

00:01:01.618 --> 00:01:03.270
现在 我们开始编写

00:01:03.270 --> 00:01:04.896
工作空间完成后

00:01:04.896 --> 00:01:06.495
你就可以启动简单的机器臂了

00:01:06.495 --> 00:01:08.775
具体操作为 使用命令 roslaunch

00:01:08.775 --> 00:01:13.534
后面是包名称 rossimple_arm 然后是启动文件名称

00:01:13.534 --> 00:01:17.534
这里 我只需使用 tab completion robot_spawn.launch

00:01:17.534 --> 00:01:19.349
太棒了 就这样 我已经启动了机器臂

00:01:19.349 --> 00:01:21.870
借助启动文件和简单机器臂包

00:01:21.870 --> 00:01:23.640
刚刚发生了几件事情

00:01:23.640 --> 00:01:25.108
或许最明显的是

00:01:25.108 --> 00:01:28.134
现在 我在仿真中有一个机器臂正在运行

00:01:28.135 --> 00:01:30.174
仿真器叫做 gazebo

00:01:30.174 --> 00:01:33.174
你会在本学位中多次使用它

00:01:33.174 --> 00:01:34.840
它是我们在真实世界的替代品

00:01:34.840 --> 00:01:37.560
负责仿真力和扭矩

00:01:37.560 --> 00:01:38.864
时间流逝

00:01:38.864 --> 00:01:42.540
以及物体之间的互动 如撞击

00:01:42.540 --> 00:01:46.855
我在这里仿真的机器人是一个简单的两度的自由机器手臂

00:01:46.855 --> 00:01:50.575
机器臂的莫额为有一个黑色小球 可能很难看清楚

00:01:50.575 --> 00:01:52.109
这个球代表摄像头

00:01:52.109 --> 00:01:55.674
Gazebo 也可以仿真很多不同传感器

00:01:55.674 --> 00:01:57.814
但正在运行的不仅仅是 gazebo

00:01:57.813 --> 00:02:00.193
如果你切换到控制台窗口并向上滚动

00:02:00.194 --> 00:02:01.950
你可以看到 roslaunch 提供了

00:02:01.950 --> 00:02:04.439
所有已启动节点的一个简短摘要

00:02:04.438 --> 00:02:07.509
以及所有已设置参数的小结

00:02:07.510 --> 00:02:09.879
我不会花时间讨论启动文件的

00:02:09.878 --> 00:02:12.459
所有细节 但我觉得你们应该检查一下

00:02:12.460 --> 00:02:15.854
它位于简单机器臂包的 launch 目录下

00:02:15.854 --> 00:02:18.084
现在 你已经知道了如何创建一个工作空间

00:02:18.084 --> 00:02:20.365
添加一个包 搭建并启动所有东西

00:02:20.365 --> 00:02:21.865
接下来 我们学习后续步骤

00:02:21.865 --> 00:02:25.935
找出为什么机器臂在仿真中转动比较松弛的原因

00:02:25.935 --> 00:02:28.539
我会在下一节详细介绍

00:02:28.538 --> 00:02:31.478
但我仍然鼓励你在听我讲解前自己发现原因

00:02:31.479 --> 00:02:35.000
小提示： 在 ros 主控制台上检查日志消息

