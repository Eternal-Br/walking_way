WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.009
Designing cost functions is difficult and getting them

00:00:03.009 --> 00:00:06.945
all to cooperate to produce reasonable vehicle behavior is hard.

00:00:06.945 --> 00:00:09.990
Some of the difficulties associated with cost functions design

00:00:09.990 --> 00:00:13.775
include solving new problems without unsolving old ones.

00:00:13.775 --> 00:00:15.810
When you're working on a self-driving car,

00:00:15.810 --> 00:00:18.179
you may find that the vehicle is behaving reasonably

00:00:18.179 --> 00:00:21.050
well except for some particular situations.

00:00:21.050 --> 00:00:25.019
Maybe it's not being aggressive enough about making left turns at traffic lights.

00:00:25.019 --> 00:00:27.254
So, in an effort to solve this problem,

00:00:27.254 --> 00:00:28.875
you either add new cost functions,

00:00:28.875 --> 00:00:31.815
tweak existing ones, or modify the weights.

00:00:31.815 --> 00:00:33.134
But every time you do,

00:00:33.134 --> 00:00:34.649
there's a chance that you will introduce

00:00:34.649 --> 00:00:37.140
some breaking change into something that already works.

00:00:37.140 --> 00:00:41.505
In practice, we solve this through regression testing,

00:00:41.505 --> 00:00:43.980
where we define some set of situations,

00:00:43.979 --> 00:00:46.944
each of which has an expected behavior.

00:00:46.945 --> 00:00:49.005
Then, whenever we make a change,

00:00:49.005 --> 00:00:50.880
we simulate the vehicle in all of

00:00:50.880 --> 00:00:55.455
our test cases and make sure that it still behaves as expected.

00:00:55.454 --> 00:00:57.734
We won't say more about testing here,

00:00:57.734 --> 00:01:03.174
but it is an important part of developing software in a safety-critical application.

00:01:03.174 --> 00:01:08.179
The next difficulty is balancing costs of drastically different magnitudes.

00:01:08.180 --> 00:01:11.460
Because, yes, we want to get to our destination efficiently,

00:01:11.459 --> 00:01:14.354
but if we are in a situation where safety is an issue,

00:01:14.355 --> 00:01:18.305
we want to solve that problem and not think about efficiency at all.

00:01:18.305 --> 00:01:20.880
One way to do that is to have weights which

00:01:20.879 --> 00:01:24.049
reflect the type of problem the cost function addresses.

00:01:24.049 --> 00:01:25.875
So we want to most heavily penalize

00:01:25.875 --> 00:01:29.185
any behavior which simply isn't possible due to physics,

00:01:29.185 --> 00:01:32.640
then we want to think about safety, legality, comfort.

00:01:32.640 --> 00:01:36.079
And only once those are satisfied do we want to think about efficiency.

00:01:36.079 --> 00:01:37.679
But we also may want to adjust

00:01:37.680 --> 00:01:41.050
the relative importance of these weights depending on situation.

00:01:41.049 --> 00:01:42.929
If a light turns red, for example,

00:01:42.930 --> 00:01:45.490
legality becomes a much more relevant concern

00:01:45.489 --> 00:01:48.384
than when we engage in normal highway driving.

00:01:48.385 --> 00:01:51.225
And this leads us to our last difficulty,

00:01:51.224 --> 00:01:54.609
reasoning about individual cost functions.

00:01:54.609 --> 00:01:59.400
Ideally, each cost function will serve a very specific responsibility,

00:01:59.400 --> 00:02:04.890
which is something we didn't do in our earlier example of a speed cost function.

00:02:04.890 --> 00:02:08.460
We were trying to balance our desire to drive quickly,

00:02:08.460 --> 00:02:10.125
which has to do with efficiency,

00:02:10.125 --> 00:02:14.810
with our desire to not exceed the speed limit, which is legality.

00:02:14.810 --> 00:02:16.920
In practice, we might want to define

00:02:16.919 --> 00:02:21.099
several cost functions associated with vehicle speed.

00:02:21.099 --> 00:02:25.659
In which case we might have a binary cost function which just checks to see if we are

00:02:25.659 --> 00:02:27.969
breaking the speed limit and the continuous

00:02:27.969 --> 00:02:31.060
cost function which pulls us towards our target speed.

00:02:31.060 --> 00:02:34.465
By assigning each cost function to a very specific role,

00:02:34.465 --> 00:02:38.444
like safety versus legality versus efficiency,

00:02:38.444 --> 00:02:45.204
we can then standardize the output of all cost functions to be between -1 and 1.

00:02:45.205 --> 00:02:48.260
Additionally, it's helpful to parametrize whenever possible.

00:02:48.259 --> 00:02:51.429
This allows us to use some parameter optimization technique like

00:02:51.430 --> 00:02:53.560
gradient descent along with our set of

00:02:53.560 --> 00:02:57.310
regression tests to programmatically tweak our cost functions.

00:02:57.310 --> 00:03:00.090
Finally, thinking in terms of vehicle state is helpful.

00:03:00.090 --> 00:03:02.064
The things we can indirectly control about

00:03:02.064 --> 00:03:05.710
our vehicle are its position, velocity, and acceleration.

00:03:05.710 --> 00:03:10.170
It can be helpful to keep these in mind when coming up with cost functions.

00:03:10.169 --> 00:03:11.979
Let's walk through an example.

00:03:11.979 --> 00:03:16.927
Say we want to think about the following classes of cost functions.

00:03:16.927 --> 00:03:18.044
And to make it easier,

00:03:18.044 --> 00:03:19.549
to keep everything straight,

00:03:19.550 --> 00:03:25.207
let's think in terms of position, velocity, and acceleration.

00:03:25.206 --> 00:03:27.750
The binary "Are we exceeding the speed?"

00:03:27.750 --> 00:03:30.096
cost function would go here,

00:03:30.096 --> 00:03:34.004
then the cost function that wanted to keep us close to the speed limit would go here.

00:03:34.004 --> 00:03:38.069
And now, instead of being that weird discontinuous graph we made earlier,

00:03:38.069 --> 00:03:41.044
this could just be some parabola like this.

00:03:41.044 --> 00:03:45.044
And even though the cost of this is low even for speeds that exceed the speed limit,

00:03:45.044 --> 00:03:49.799
that's OK because we have our binary cost function which would prevent that behavior.

00:03:49.800 --> 00:03:51.735
Continuing to think about speed,

00:03:51.735 --> 00:03:54.210
we also might want to try to drive at

00:03:54.210 --> 00:03:57.060
a speed that's close to the average speed of traffic,

00:03:57.060 --> 00:04:01.826
for safety reasons, even if that speed is above or below the speed limit.

00:04:01.826 --> 00:04:03.974
And that would go here.

00:04:03.974 --> 00:04:05.444
In the position column,

00:04:05.444 --> 00:04:09.329
we'd have an obvious feasibility concern which is collision avoidance.

00:04:09.330 --> 00:04:12.330
We can't drive somewhere if there is already a car there.

00:04:12.330 --> 00:04:14.340
Then, for safety reasons,

00:04:14.340 --> 00:04:15.719
we would want the buffer distance,

00:04:15.719 --> 00:04:18.149
which tries to keep us far from other vehicles,

00:04:18.149 --> 00:04:21.089
and the cost function which checks to make sure we are driving on

00:04:21.089 --> 00:04:25.369
the road near the center of our lane and in a lane that's close to our goal lane.

00:04:25.370 --> 00:04:29.350
For acceleration, we'd first want to

00:04:29.350 --> 00:04:33.472
make sure we only consider behaviors that the car can execute,

00:04:33.471 --> 00:04:36.849
and then we'd want to avoid having any rapid changes in

00:04:36.850 --> 00:04:41.350
acceleration because those are perceived as uncomfortable.

00:04:41.350 --> 00:04:46.235
This is also known as jerk which you'll learn more about in the next lesson.

00:04:46.235 --> 00:04:48.910
Consider a merge onto a highway, for example.

00:04:48.910 --> 00:04:51.550
This is a potentially dangerous situation where we really

00:04:51.550 --> 00:04:54.737
want to get up to traffic speed as quickly as possible.

00:04:54.737 --> 00:04:58.485
So this cost function may become more relevant than it normally is.

00:04:58.485 --> 00:05:01.840
But we also want to make sure that we yield if there isn't really a gap,

00:05:01.839 --> 00:05:06.699
so we want to make sure this cost function and this one are weighted sufficiently high.

00:05:06.699 --> 00:05:12.329
And we can compare these merge priorities to a different situation.

00:05:12.329 --> 00:05:17.629
For example, a car approaching a green light that suddenly turns yellow.

00:05:17.629 --> 00:05:21.790
In this situation, we'd probably want to boost the weights associated with

00:05:21.790 --> 00:05:24.685
legality and would probably need to add

00:05:24.685 --> 00:05:28.420
a whole new cost function for obeying traffic rules.

00:05:28.420 --> 00:05:31.750
Now that doesn't fall neatly into the position,

00:05:31.750 --> 00:05:34.637
velocity, or acceleration classes,

00:05:34.637 --> 00:05:36.610
so I'll just put it over here.

00:05:36.610 --> 00:05:42.870
If this is all starting to feel like it's getting pretty complex, well, you're right.

00:05:42.870 --> 00:05:47.819
It's pretty hard to avoid this exploding complexity when using finite state machines.

00:05:47.819 --> 00:05:50.569
Partially that's because of the finite state machine itself,

00:05:50.569 --> 00:05:53.189
but we're also trying to solve a very hard problem and

00:05:53.189 --> 00:05:57.219
some complexity is unavoidable no matter what solution approach you take.

