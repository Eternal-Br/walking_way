WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.034
In the very beginning of the lesson you have already seen this diagram.

00:00:04.034 --> 00:00:07.620
By now you might be able to guess why the Behavior Module

00:00:07.620 --> 00:00:12.555
updates on a lower frequency than for example the Trajectory Module.

00:00:12.555 --> 00:00:15.570
This is due to the fact that the high level decisions made in

00:00:15.570 --> 00:00:20.955
the behavior module spend a longer time horizon and just don't change as frequently.

00:00:20.955 --> 00:00:23.970
But the Trajectory Module does still count on

00:00:23.970 --> 00:00:27.990
our decisions and it's important that the over all system architecture

00:00:27.990 --> 00:00:31.440
doesn't allow for a comparatively slow module like

00:00:31.440 --> 00:00:37.125
the behavior planner to clog up the proper functioning of the other faster components.

00:00:37.125 --> 00:00:40.280
Let's take a second to talk about what's known as

00:00:40.280 --> 00:00:44.860
a scheduling problem and how it can be handled in the self-driving car.

00:00:44.860 --> 00:00:50.770
This diagram shows what happens during two processing cycles of the Behavior Module.

00:00:50.770 --> 00:00:55.585
As you can see, the Prediction Module updates with a higher frequency than Behavior.

00:00:55.585 --> 00:00:58.570
Trajectory is even higher. And so on.

00:00:58.570 --> 00:01:05.125
But focus your attention on what happens after behavior has completed its first cycle.

00:01:05.125 --> 00:01:07.225
To begin its second cycle,

00:01:07.225 --> 00:01:11.305
the behavior module needs data from prediction and localization.

00:01:11.305 --> 00:01:15.160
For localization, it's easy in theory since at

00:01:15.160 --> 00:01:19.885
this instant it will have some fresh data and behavior could just use that.

00:01:19.885 --> 00:01:22.270
But what about for prediction.

00:01:22.270 --> 00:01:26.020
It's actually right in the middle of an update cycle at this instant.

00:01:26.020 --> 00:01:29.685
Should behavior just wait until prediction is done?

00:01:29.685 --> 00:01:35.155
No. If we start waiting then we block up the pipeline for downstream components.

00:01:35.155 --> 00:01:40.420
The answer is to use data from here and accept that it's a little stale.

00:01:40.420 --> 00:01:43.315
When you implement your path planner for the final project,

00:01:43.315 --> 00:01:46.510
we will provide you with the code that handles all of this.

00:01:46.510 --> 00:01:50.000
But it's worth mentioning that this is how it's done.

