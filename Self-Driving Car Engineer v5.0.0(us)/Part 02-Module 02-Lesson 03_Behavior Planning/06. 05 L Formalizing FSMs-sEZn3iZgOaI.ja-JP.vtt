WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:04.544
すべての価格が 20 セントの自動販売機を考えてみましょう

00:00:04.544 --> 00:00:07.290
この自動販売機は 5 セント貨と 10 セント貨のみ受け付け

00:00:07.290 --> 00:00:10.240
それより大きくても小さくてもダメです

00:00:10.240 --> 00:00:11.849
そしてこの自動販売機の状態は 投入された

00:00:11.849 --> 00:00:14.984
お金の額によってモデル化できます

00:00:14.984 --> 00:00:17.355
開始状態は 0 セントでしょう

00:00:17.355 --> 00:00:20.140
この状態から 2 つのことが起こり得ます

00:00:20.140 --> 00:00:21.390
5 セント貨を入れて

00:00:21.390 --> 00:00:23.940
状態を 5 セントにするか 10 セント貨を入れて

00:00:23.940 --> 00:00:26.700
状態を 10 セントにするかです

00:00:26.699 --> 00:00:30.509
残りの遷移がかなり簡単なのは 15 セントの状態で誰かが

00:00:30.510 --> 00:00:34.465
10 セント貨を入れたらどうするかについて考えるまでです

00:00:34.465 --> 00:00:35.985
それを単に 20 と数えることもできます

00:00:35.984 --> 00:00:39.450
でもこの販売機はちょうどの代金がいるとしましょう

00:00:39.450 --> 00:00:41.490
そこで 10 セント貨が落ちて 販売機下部の

00:00:41.490 --> 00:00:43.785
小さいトレイから出てくるようにします

00:00:43.784 --> 00:00:47.619
おわかりのように 有限状態機械は概念的に非常に簡単です

00:00:47.619 --> 00:00:48.899
ではなぜこの話をするのでしょう

00:00:48.899 --> 00:00:51.000
これらには長所と短所があります

00:00:51.000 --> 00:00:52.244
長所から見ていきましょう

00:00:52.244 --> 00:00:55.765
まず 有限状態機械は推論するのが非常に簡単です

00:00:55.765 --> 00:00:58.230
これらは基本的に自己文書的です

00:00:58.229 --> 00:01:01.884
システムの論理状態を物理状態に直接マッピングするからです

00:01:01.884 --> 00:01:03.989
5 セント貨が自動販売機に入ると

00:01:03.990 --> 00:01:07.765
状態は現在よりも 5 セント多くなる状態に変わります

00:01:07.765 --> 00:01:09.329
次に メンテナンス可能です

00:01:09.329 --> 00:01:12.299
この販売機を手直しして すべての価格が 25 セントになるようにする場合

00:01:12.299 --> 00:01:15.759
状態をもう 1 つだけ追加するのは大したことではありません

00:01:15.760 --> 00:01:18.960
これは 有限状態機械の短所につながります

00:01:18.959 --> 00:01:21.974
主な短所は 簡単に悪用されてしまうことです

00:01:21.974 --> 00:01:25.049
うまく開始するように設計されていない

00:01:25.049 --> 00:01:28.244
または問題が変わった場合

00:01:28.245 --> 00:01:29.454
このように思うことが簡単に出てきます 「考えていなかった

00:01:29.454 --> 00:01:34.469
別の状態を追加してみよう 」こういったことがいい加減なコードとロジックにつながります

00:01:34.469 --> 00:01:37.679
つまり実際 有限状態機械は 状態ベースが大きくなっていくにつれ

00:01:37.680 --> 00:01:40.860
維持が非常に難しくなる場合があることを意味しています

