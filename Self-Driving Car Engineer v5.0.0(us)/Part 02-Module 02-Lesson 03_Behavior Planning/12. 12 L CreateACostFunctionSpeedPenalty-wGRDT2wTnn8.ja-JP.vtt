WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:03.299
遷移が起きてほしいときに遷移させるのに重要になることは

00:00:03.299 --> 00:00:06.674
適正なコスト関数の設計です

00:00:06.674 --> 00:00:10.285
ペナルティを与え 良いことには報酬を与える必要があります

00:00:10.285 --> 00:00:12.390
コスト関数の設計について皆さんが考える可能性のある

00:00:12.390 --> 00:00:15.880
1 つ方法の例を見ていこうと思います

00:00:15.880 --> 00:00:20.810
車のスピードのコスト関数を設計する方法を考えてみましょう

00:00:20.809 --> 00:00:24.704
早く目的地に着きたい

00:00:24.704 --> 00:00:26.039
と思う一方で

00:00:26.039 --> 00:00:28.089
法律に違反したくはありません

00:00:28.089 --> 00:00:34.234
制御しなければならない必須の量は 車の希望する速度です

00:00:34.234 --> 00:00:36.519
有益な速度もあれば

00:00:36.520 --> 00:00:38.480
違法な速度もあります

00:00:38.479 --> 00:00:43.509
このグラフを埋めて各速度にコストを割り当ててみましょう

00:00:43.509 --> 00:00:45.384
簡潔にするために すべてのコスト関数の出力が

00:00:45.384 --> 00:00:51.140
0 と 1 の間であると仮定しましょう

00:00:51.140 --> 00:00:56.465
後ほど重みを調整して各コスト関数の重要性を調整します

00:00:56.465 --> 00:01:00.200
道路の速度制限がここにあるとします

00:01:00.200 --> 00:01:04.045
この速度制限をはるかに超えている場合

00:01:04.045 --> 00:01:06.579
最大コストとすべきです

00:01:06.579 --> 00:01:08.694
そして バッファを持たせるために

00:01:08.694 --> 00:01:11.289
速度制限をわずかに下回る

00:01:11.290 --> 00:01:15.145
理想的なゼロコスト速度の設定が必要かもしれません

00:01:15.144 --> 00:01:20.679
次に まったく動かないことに対してどのくらいペナルティを課すかを考えます

00:01:20.680 --> 00:01:23.095
動かないことは明らかに良くないことですが

00:01:23.094 --> 00:01:25.944
速度制限を破るほど悪くはありません

00:01:25.944 --> 00:01:28.334
ですから ここに置きます

00:01:28.334 --> 00:01:30.109
簡単にするために

00:01:30.109 --> 00:01:34.539
0 と目標速度との間に線形コストがあると言ってもよいでしょう

00:01:34.540 --> 00:01:37.345
法律に違反することは 2 択のことなので

00:01:37.344 --> 00:01:43.185
速度制限以上のあらゆる速度は最大限のコストを持つことにしましょう

00:01:43.185 --> 00:01:47.010
そして再度 これらのポイントを線形関数で任意に結び

00:01:47.010 --> 00:01:53.439
速度制限を超えるすべてに対し最大コストをフラットにすることができます

00:01:53.439 --> 00:01:57.349
実際 正しい振る舞いが得られるまでこれらの量を後で調整できるよう

00:01:57.349 --> 00:02:02.414
これらの量のいくつかをパラメーター化する必要があるかもしれません

00:02:02.415 --> 00:02:06.290
まず ゼロ速度の場合の Stop Cost というパラメーターと

00:02:06.290 --> 00:02:09.564
おそらく時速数マイルになる buffer velocity

00:02:09.564 --> 00:02:13.995
というパラメーターを定義します

00:02:13.995 --> 00:02:18.694
すると 全体のコスト関数は 3 つの領域を持ちます

00:02:18.694 --> 00:02:21.114
目標速度未満で進む場合には

00:02:21.115 --> 00:02:23.465
コスト関数はこのようになるでしょう

00:02:23.465 --> 00:02:25.390
速度制限を超える場合には

00:02:25.389 --> 00:02:27.194
コストは 1 のみです

00:02:27.194 --> 00:02:29.079
間にある場合には

00:02:29.080 --> 00:02:32.050
コストはこのようになるでしょう素晴らしい

