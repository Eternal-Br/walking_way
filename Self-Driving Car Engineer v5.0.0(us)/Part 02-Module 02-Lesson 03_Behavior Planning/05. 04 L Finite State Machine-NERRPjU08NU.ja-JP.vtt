WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:04.884
以前の管理では ナビゲーターは次に行うことについてさまざまな提案をしました

00:00:04.884 --> 00:00:08.160
提供された手順は 車線変更 車線に沿って行く

00:00:08.160 --> 00:00:10.949
曲がるなどでした

00:00:10.949 --> 00:00:13.529
でも ナビゲーターからそんなに多くの提案は

00:00:13.529 --> 00:00:16.384
あまり期待されてなかったと思います

00:00:16.385 --> 00:00:20.580
このレッスンでは Finite State Machine と呼ばれるものを使用した動作プランニングへのアプローチを

00:00:20.579 --> 00:00:24.914
学習して 動作プランニングの問題を解決します

00:00:24.914 --> 00:00:29.814
Finite State Machine は 個別の状態の限定セットをもとに決断を行います

00:00:29.815 --> 00:00:31.515
この例 5 を見ていきましょう

00:00:31.515 --> 00:00:35.435
初期化すると Finite State Machine は開始状態になります

00:00:35.435 --> 00:00:37.170
それを S0 と呼びましょう

00:00:37.170 --> 00:00:39.840
finite state machine のいずれの状態ペアは

00:00:39.840 --> 00:00:42.880
1 つ以上の遷移で接続されます

00:00:42.880 --> 00:00:46.335
また 同じ状態に戻る遷移もあります

00:00:46.335 --> 00:00:48.300
これをセルフ遷移といいます

00:00:48.299 --> 00:00:50.625
すべての遷移が可能なわけではありません

00:00:50.625 --> 00:00:54.030
たとえば S4 は他のどの状態にも遷移しません

00:00:54.030 --> 00:00:58.260
finite state machines の用語では これは許可している状態といいます

00:00:58.259 --> 00:01:02.744
非許可状態の場合は 大抵複数の潜在的な代替え状態があります

00:01:02.744 --> 00:01:05.459
次に遷移する状態を決めるには

00:01:05.459 --> 00:01:09.059
Finite State Machine は何かしらの入力を扱い 状態の遷移関数を使用して

00:01:09.060 --> 00:01:13.109
次に進む状態を決定する必要があります

00:01:13.109 --> 00:01:15.719
遷移関数と自動運転車に関連した状態について

00:01:15.719 --> 00:01:19.379
あとでお話ししますが

00:01:19.379 --> 00:01:23.549
まず Finite State Machine がどういうものなのかを

00:01:23.549 --> 00:01:25.170
サンプル例を用いて形式化しようと思います

