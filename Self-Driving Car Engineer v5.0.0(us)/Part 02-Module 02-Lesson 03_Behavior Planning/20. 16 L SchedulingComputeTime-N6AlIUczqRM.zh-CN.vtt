WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.035
在本课程一开始 大家已经见过这张图了

00:00:04.035 --> 00:00:07.620
但是现在大家也许已经能猜出来

00:00:07.620 --> 00:00:12.554
为何行为模块相比其他模块具有较低更新频率 比如与轨迹模块相比

00:00:12.554 --> 00:00:15.570
这是因为在行为模块中 高层次的决策需要消耗更多时间

00:00:15.570 --> 00:00:20.954
而且 这种决策并不会频繁变更

00:00:20.954 --> 00:00:23.969
但是轨迹模块仍然要依赖于

00:00:23.969 --> 00:00:27.989
我们做出的决策 此外 重要的是

00:00:27.989 --> 00:00:31.439
我们的整体系统架构不允许存在一个相对较慢的模块

00:00:31.440 --> 00:00:37.125
比如 行为规划器 因为这会阻塞其他较快模块的正确运行

00:00:37.125 --> 00:00:40.280
我们花一点时间来讨论所谓的调度问题

00:00:40.280 --> 00:00:44.859
以及在无人驾驶车上是如何解决此问题的

00:00:44.859 --> 00:00:50.769
这张图展示了行为模块的两个处理循环之间发生的事情 

00:00:50.770 --> 00:00:55.585
正如大家所见 预测模块比行为模块更新更加频繁

00:00:55.585 --> 00:00:58.570
轨迹模块比预测模块更新得还要快

00:00:58.570 --> 00:01:05.125
但是 大家注意看 当行为模块完成第一次循环后发生的事情

00:01:05.125 --> 00:01:07.224
为了开始第二次循环

00:01:07.224 --> 00:01:11.304
行为模块需要从预测模块和定位模块获取数据

00:01:11.305 --> 00:01:15.160
对于定位模块 理论上没什么问题

00:01:15.159 --> 00:01:19.884
定位模块此刻将包含一些最新更新数据 行为模块可以直接使用

00:01:19.885 --> 00:01:22.270
但是预测模块则不然

00:01:22.269 --> 00:01:26.019
此刻 预测模块仍然处于更新循环过程中

00:01:26.019 --> 00:01:29.685
这时候 行为模块会等待预测模块完成循环吗？

00:01:29.685 --> 00:01:35.155
答案是 否 因为如果行为模块等待 那么它将阻塞整个循环管线 影响下游模块

00:01:35.155 --> 00:01:40.420
正确做法是使用现有数据 并接受这些数据并非最新数据的事实

00:01:40.420 --> 00:01:43.314
当大家在我们的最终项目中实现你们自己的行为规划器时

00:01:43.314 --> 00:01:46.509
我们会提供相关代码给大家 来处理这种问题

00:01:46.510 --> 00:01:50.000
但是 这里还是有必要对此作出解释

