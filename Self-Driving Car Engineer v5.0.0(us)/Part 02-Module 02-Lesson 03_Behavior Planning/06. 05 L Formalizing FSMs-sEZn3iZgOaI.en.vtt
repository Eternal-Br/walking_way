WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.544
Let's consider a simple vending machine where everything costs 20 cents.

00:00:04.544 --> 00:00:07.290
And let's say that this vending machine only takes

00:00:07.290 --> 00:00:10.240
nickels and dimes but nothing larger or smaller.

00:00:10.240 --> 00:00:11.849
Then we can model the state of

00:00:11.849 --> 00:00:14.984
this vending machine by the amount of money that's been deposited.

00:00:14.984 --> 00:00:17.355
The start state would be zero cents.

00:00:17.355 --> 00:00:20.140
And from this date there are two things that can happen.

00:00:20.140 --> 00:00:21.390
We could put in a nickel,

00:00:21.390 --> 00:00:23.940
which would make the state five cents or we

00:00:23.940 --> 00:00:26.700
could put in a dime to take the state to 10 cents.

00:00:26.699 --> 00:00:30.509
The rest of the transitions are fairly straightforward until we think about

00:00:30.510 --> 00:00:34.465
what to do if we are in the 15 cent state and someone puts in a dime.

00:00:34.465 --> 00:00:35.985
We could just count that as 20.

00:00:35.984 --> 00:00:39.450
But let's say that this machine requires exact change so that

00:00:39.450 --> 00:00:41.490
a dime would just fall through and come

00:00:41.490 --> 00:00:43.785
out of the little tray at the bottom of the machine.

00:00:43.784 --> 00:00:47.619
As you can see, finite state machines are pretty straightforward conceptually.

00:00:47.619 --> 00:00:48.899
So why talk about them?

00:00:48.899 --> 00:00:51.000
They have their strengths and weaknesses.

00:00:51.000 --> 00:00:52.244
Let's start with our strengths.

00:00:52.244 --> 00:00:55.765
First, finite state machines are very easy to reason about.

00:00:55.765 --> 00:00:58.230
They are basically self-documenting because they map

00:00:58.229 --> 00:01:01.884
the logical state of a system directly to the physical state.

00:01:01.884 --> 00:01:03.989
When a nickel goes into the vending machine

00:01:03.990 --> 00:01:07.765
the state changes to the state that is five cents bigger than the current one.

00:01:07.765 --> 00:01:09.329
Next, they are maintainable.

00:01:09.329 --> 00:01:12.299
If we wanted to tweak this machine so that everything costs

00:01:12.299 --> 00:01:15.759
a quarter it would be pretty trivial to just add one more state.

00:01:15.760 --> 00:01:18.960
Which brings us to the weaknesses of the finite state machine.

00:01:18.959 --> 00:01:21.974
The primary one being that they are easily abused.

00:01:21.974 --> 00:01:25.049
If they aren't designed well to begin with or if the problem

00:01:25.049 --> 00:01:28.244
changes you can easily find yourself saying things like,

00:01:28.245 --> 00:01:29.454
I hadn't considered that.

00:01:29.454 --> 00:01:34.469
Let's just add another state and this can lead to some sloppy code and sloppy logic.

00:01:34.469 --> 00:01:37.679
Which in practice means that finite state machines can be

00:01:37.680 --> 00:01:40.860
very difficult to maintain as the states base gets bigger.

