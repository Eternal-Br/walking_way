WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:02.865
ここでもう一度マルコフ仮定が役に立ちます

00:00:02.865 --> 00:00:05.804
これを xt とタグ付けしたと仮定すると

00:00:05.804 --> 00:00:10.199
車両が何を観察し それが x_t の前にどう動いたかは問題ではありません

00:00:10.199 --> 00:00:14.139
これらの値は 既に x_t を推定するために使用されました

00:00:14.140 --> 00:00:17.515
この t はこれらの値から得たベネフィットではありません

00:00:17.515 --> 00:00:20.550
つまり t は前回の観測値またはコントロールすべてから

00:00:20.550 --> 00:00:24.539
独立していると考えられます

00:00:24.539 --> 00:00:28.129
マルコフ仮定の使用例は次のようになります

00:00:28.129 --> 00:00:34.004
事後分布は z_t の p として簡略化し

00:00:34.005 --> 00:00:38.219
x_t とマップにのみ依存するようにできます

00:00:38.219 --> 00:00:40.993
この観測モデルをより詳しく見てみましょう

00:00:40.993 --> 00:00:46.534
t は複数の観測値のベクトルであるか その可能性があることを覚えていますか

00:00:46.534 --> 00:00:49.949
これは 観測モデルをこの方法で書き直すということです

00:00:49.950 --> 00:00:54.425
それぞれの範囲値 z_t_1 から z_t_K のノイズ動作は

00:00:54.424 --> 00:01:00.099
独立していると仮定します

00:01:00.100 --> 00:01:03.460
これは同時に すべての観測値も独立していることを示します

00:01:03.460 --> 00:01:08.010
よって観測モデルは 各単一範囲の測定におけるそれぞれの

00:01:08.010 --> 00:01:13.719
確率分布にわたる積として表すことができます

00:01:13.719 --> 00:01:15.114
ここで問題は

00:01:15.114 --> 00:01:19.629
範囲の測定を強制する観測モデルをどのように定義するか です

00:01:19.629 --> 00:01:22.674
一般に 観測モデルは多様で複数あります

00:01:22.674 --> 00:01:27.575
ライダー カメラ レーダー 超音波センサーなど

00:01:27.575 --> 00:01:30.875
異なるセンサーがあるからです

00:01:30.875 --> 00:01:35.599
それぞれのセンサーには 特定のノイズ動作やパフォーマンスがあります

00:01:35.599 --> 00:01:39.099
さらに 観測モデルはマップの種類に依存します

00:01:39.099 --> 00:01:43.669
密集した 2D または 3D のグリッドマップや スパース(疎)な特徴点ベースのマップを使用できます 

00:01:43.670 --> 00:01:45.308
センサーが

00:01:45.308 --> 00:01:48.190
運転方向にある最も近いオブジェクト n までの距離を測定する

00:01:48.189 --> 00:01:52.125
と仮定した 1 次元の例を考えます

00:01:52.125 --> 00:01:54.454
右側に示すとおり

00:01:54.454 --> 00:02:02.185
車両は最初のオブジェクトまで 19 m 2 番目のオブジェクトまで 37 m と測定しました

00:02:02.185 --> 00:02:06.135
前述のとおり オブジェクトはマップ上のランドマークを表します

00:02:06.135 --> 00:02:09.289
ここで 観測ノイズは 1 m の標準偏差のある

00:02:09.289 --> 00:02:12.974
ガウス分布としてモデル化されると仮定します

00:02:12.974 --> 00:02:18.264
また センサーは 0～100 m の範囲を測定可能であるという仮定です

00:02:18.264 --> 00:02:20.839
観測モデルを実装するには

00:02:20.840 --> 00:02:27.925
与えられた xt とマップを使用して いわゆる疑似距離を推定します

00:02:27.925 --> 00:02:32.945
これらの擬似距離は正しい距離値を表しており、仮定として、

00:02:32.944 --> 00:02:35.840
あなたの車は特定の位置 xt、

00:02:35.840 --> 00:02:37.405
そして、地図上に表れます

00:02:37.405 --> 00:02:41.870
たとえば 車が位置 20 にあり

00:02:41.870 --> 00:02:45.335
最初のランドマークまで 5 m

00:02:45.335 --> 00:02:47.210
2 番目まで 11 m

00:02:47.210 --> 00:02:49.370
3 番目まで 39 m

00:02:49.370 --> 00:02:52.974
最後までは 57 m と観測したと仮定します

00:02:52.974 --> 00:02:55.424
実際の観測と比較すると

00:02:55.424 --> 00:02:58.465
この位置になる可能性はとても低いと思いませんか

00:02:58.465 --> 00:03:02.180
観測から判断するとむしろ 40 あたりの位置に一致しそうです

00:03:02.180 --> 00:03:03.189
この例に基づき

00:03:03.189 --> 00:03:05.645
単一範囲の測定における観測モデルは

00:03:05.645 --> 00:03:09.575
この正規分布の確率によって定義されます

00:03:09.574 --> 00:03:16.389
正規分布は z-star_t_K とシグマの平均値によって定義されます

00:03:16.389 --> 00:03:20.314
これらの見識により 観測モデルを C++ で実装することが可能になります

00:03:20.314 --> 00:03:22.234
コーディングに戻る前に

00:03:22.235 --> 00:03:26.440
ベースローカライゼーション理論をまとめておきましょう

