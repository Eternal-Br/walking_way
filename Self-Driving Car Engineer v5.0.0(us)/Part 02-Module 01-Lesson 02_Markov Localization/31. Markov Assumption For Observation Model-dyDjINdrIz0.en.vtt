WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.865
Here, the Markov Assumption will help us again.

00:00:02.865 --> 00:00:05.804
Since you assume you're now this tagged x_t,

00:00:05.804 --> 00:00:10.199
it doesn't really matter what the car observes and how it moves before x_t.

00:00:10.199 --> 00:00:14.139
These values were already used to estimate x_t,

00:00:14.140 --> 00:00:17.515
and that t will not benefit from these values.

00:00:17.515 --> 00:00:20.550
This means, we assume that that t is independent

00:00:20.550 --> 00:00:24.539
of all previous observations and the controls.

00:00:24.539 --> 00:00:28.129
Again, this is an example of the use of the Markov Assumption.

00:00:28.129 --> 00:00:34.004
And I can simplify our posterior distribution to p of z_t,

00:00:34.005 --> 00:00:38.219
only depends on x_t and the map.

00:00:38.219 --> 00:00:40.993
Let's take a closer look to the observation model.

00:00:40.993 --> 00:00:46.534
Do you remember that that t is or could be a vector of multiple observations?

00:00:46.534 --> 00:00:49.949
This means, we rewrite the observation model in this way.

00:00:49.950 --> 00:00:54.425
Now we assume that the noise behavior of the individual range values

00:00:54.424 --> 00:01:00.099
z_t_1 to z_t_K is independent.

00:01:00.100 --> 00:01:03.460
This also means that all observations are independent.

00:01:03.460 --> 00:01:08.010
And it allows us to represent a observation model as a product

00:01:08.010 --> 00:01:13.719
of the individual probability distributions of each single range measurement.

00:01:13.719 --> 00:01:15.114
Now the question is,

00:01:15.114 --> 00:01:19.629
how we should define the observation model forcing a range measurement?

00:01:19.629 --> 00:01:22.674
In general, there are a lot of different observation models,

00:01:22.674 --> 00:01:27.575
because we have a lot of different sensors like lidars,

00:01:27.575 --> 00:01:30.875
cameras, radars, or ultransonic sensors.

00:01:30.875 --> 00:01:35.599
And each sensor has a specific noise behavior and performance.

00:01:35.599 --> 00:01:39.099
The observation model also depends on the type of the map.

00:01:39.099 --> 00:01:43.669
You can have dense 2D or 3D grid maps or sparse feature-based maps.

00:01:43.670 --> 00:01:45.308
In our 1D example,

00:01:45.308 --> 00:01:48.190
we assume that our sensor measures that

00:01:48.189 --> 00:01:52.125
range to the n closest objects in driving direction.

00:01:52.125 --> 00:01:54.454
As shown on the right side,

00:01:54.454 --> 00:02:02.185
the car measures 90 meters to the first and 37 meters to the second object.

00:02:02.185 --> 00:02:06.135
As stated before, the objects represents the landmarks in our map.

00:02:06.135 --> 00:02:09.289
Here, we assume the observation noise can be modeled

00:02:09.289 --> 00:02:12.974
as a Gaussian with a standard deviation of one meter.

00:02:12.974 --> 00:02:18.264
We also assume that our sensor can measure in a range between zero and 100 meters.

00:02:18.264 --> 00:02:20.839
To implement observation model,

00:02:20.840 --> 00:02:27.925
you use a given x_t and the given map to estimate so called pseudo ranges.

00:02:27.925 --> 00:02:32.945
These pseudo ranges represent a true range values and as assumption,

00:02:32.944 --> 00:02:35.840
your car would stand at the specific position,

00:02:35.840 --> 00:02:37.405
x_t, and the map.

00:02:37.405 --> 00:02:41.870
For example, assume your car is standing here at position 20,

00:02:41.870 --> 00:02:45.335
and would observe five meters to the first,

00:02:45.335 --> 00:02:47.210
11 meters to the second,

00:02:47.210 --> 00:02:49.370
39 metres to the third,

00:02:49.370 --> 00:02:52.974
and 57 meters to the last landmark.

00:02:52.974 --> 00:02:55.424
Compared to the real observations,

00:02:55.424 --> 00:02:58.465
this position seems very unlikely, right?

00:02:58.465 --> 00:03:02.180
So observation would rather fit to a position around 40.

00:03:02.180 --> 00:03:03.189
Based on this example,

00:03:03.189 --> 00:03:05.645
the observation model for a single range measurement is

00:03:05.645 --> 00:03:09.575
defined by the probability of the following normal distribution,

00:03:09.574 --> 00:03:16.389
defined by the mean z-star_t_K and our sigma.

00:03:16.389 --> 00:03:20.314
These insights allows you to implement observation model in C++.

00:03:20.314 --> 00:03:22.234
But before you go back to the coding part,

00:03:22.235 --> 00:03:26.440
I would like to finalize the theory of the base localization further.

