WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.375
现在 我们来到了非常、非常重要的一步 我来说一下为什么

00:00:04.375 --> 00:00:09.785
首先 我把这里的第二项这么改写一下

00:00:09.785 --> 00:00:14.580
我把 Xt-1 分成

00:00:14.580 --> 00:00:17.760
Zt-1 和

00:00:17.760 --> 00:00:22.160
Z1:t-2

00:00:22.160 --> 00:00:26.984
把这个和刚开始的这个公式对比

00:00:26.984 --> 00:00:30.945
你可以看到 这里的这一项

00:00:30.945 --> 00:00:35.414
就是前一个时间步 t-1 的信仰

00:00:35.414 --> 00:00:41.259
现在 我们在积分内部使用 bel(Xt-1)

00:00:41.259 --> 00:00:42.809
神奇的是

00:00:42.810 --> 00:00:45.539
我们得到了一个递归的更新公式

00:00:45.539 --> 00:00:48.125
你使用这个公式 根据前面的时间步

00:00:48.125 --> 00:00:52.769
估算它的状态 从而预测当前状态

00:00:52.770 --> 00:00:56.715
这是递归贝叶斯滤波器中的最重要步骤之一

00:00:56.715 --> 00:01:02.405
因为我们独立于整个观察和控制历史

00:01:02.405 --> 00:01:04.019
因此 在图形结构里

00:01:04.019 --> 00:01:09.024
我使用 bel(Xt-1) 替代这部分

00:01:09.025 --> 00:01:13.575
最后 你可以替代使用所有 Xi 上的总和来替换

00:01:13.575 --> 00:01:18.945
这个积分 因为在本例中有一个离散的定位场景

00:01:18.944 --> 00:01:23.824
顺便说一下 你之前在Sebastian 的课上已经看到过这个公式

00:01:23.825 --> 00:01:27.585
使用之前的信仰 Xt-1 和转换模型来

00:01:27.584 --> 00:01:33.239
预测Xt 的过程 在技术上被称作卷积

00:01:33.239 --> 00:01:39.099
现在 你已经知道了全部的数学背景 以及如何推演这个模型

00:01:39.099 --> 00:01:41.280
如果你再看看这个公式

00:01:41.280 --> 00:01:44.400
你会发现 在 Xt 处的信仰等于0

00:01:44.400 --> 00:01:49.305
必须使用有意义的假设初始化

00:01:49.305 --> 00:01:53.820
它取决于你在定位场景中你如何设置信仰

00:01:53.819 --> 00:01:57.139
换句话说 如何初始化你的滤波器

00:01:57.140 --> 00:02:03.120
例如 你可以使用 GPS 来大致估算你的位置

00:02:03.120 --> 00:02:05.378
我们总结一下

00:02:05.378 --> 00:02:07.519
你再次学习了如何在应用

00:02:07.519 --> 00:02:13.483
全概率的公式的时候包括新的变量 Xt-1

00:02:13.483 --> 00:02:16.365
你还了解了马尔可夫假设

00:02:16.365 --> 00:02:20.030
这个假设对概率推理非常重要

00:02:20.030 --> 00:02:25.620
最后 你学习了如何推演递归滤波器结构

00:02:25.620 --> 00:02:29.159
接下来 你要在 C++ 中实现一个运动模型

00:02:29.159 --> 00:02:32.250
你还需要学习如何初始化定位器

00:02:32.250 --> 00:02:36.780
也就是确定刚开始对于状态的信仰

00:02:36.780 --> 00:02:38.090
好的 我们开始吧

