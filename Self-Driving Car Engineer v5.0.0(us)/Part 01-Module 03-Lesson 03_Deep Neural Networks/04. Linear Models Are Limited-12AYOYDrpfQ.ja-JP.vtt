WEBVTT
Kind: captions
Language: ja-JP

00:00:00.400 --> 00:00:02.029
これは一般的なケースです

00:00:02.029 --> 00:00:08.940
入力がN個 出力がK個ある場合
使用するパラメーターは(N+1)K個です

00:00:08.940 --> 00:00:10.010
1つ多いだけではありません

00:00:10.010 --> 00:00:15.050
このことから、非常に多くの
パラメーターを使いたくなるかもしれません

00:00:15.050 --> 00:00:16.770
また これは線形です

00:00:16.770 --> 00:00:20.310
つまり、このモデルを使って表現できる種類の
関係性は、

00:00:20.310 --> 00:00:22.500
ある程度制限されるということです

00:00:22.500 --> 00:00:27.100
たとえば 2つの入力が
加法的に相互作用する場合

00:00:27.100 --> 00:00:29.950
モデルでは それらを行列の乗算として
表すことができます

00:00:29.950 --> 00:00:34.090
しかし たとえば2つの入力が相互作用し
その結果が2つの入力の積に依存する場合は

00:00:34.090 --> 00:00:34.720
線形モデルを使用しても

00:00:34.720 --> 00:00:39.260
効率的にモデル化することは
できません

00:00:39.260 --> 00:00:41.790
しかし線形操作は
実際にはうまくいきます

00:00:41.790 --> 00:00:45.920
GPUは大きな行列の乗算を
行うように設計されています

00:00:45.920 --> 00:00:49.260
これは比較的安価で
非常に高速です

00:00:49.260 --> 00:00:52.060
線形操作は数値的に
非常に安定します

00:00:52.060 --> 00:00:56.100
入力が少し変化しても
出力が大きく変化しないことを

00:00:56.100 --> 00:00:59.560
数学的に
示すことができます

00:00:59.560 --> 00:01:01.630
微分係数も非常に優れています

00:01:01.630 --> 00:01:04.680
線形関数の微分係数は
定数です

00:01:04.680 --> 00:01:08.070
定数ほど数値的に
安定したものはありません

00:01:08.070 --> 00:01:12.040
そのため パラメーターを
大きな線形関数内に維持する一方で

00:01:12.040 --> 00:01:15.510
モデル全体は
非線形にする必要があります

00:01:15.510 --> 00:01:19.510
線形関数で
入力を乗算し続けることはできません

00:01:19.510 --> 00:01:23.060
これは 1つの大きな線形関数に
相当するからです

00:01:23.060 --> 00:01:25.395
そこで非線形性を
紹介しなければなりません

