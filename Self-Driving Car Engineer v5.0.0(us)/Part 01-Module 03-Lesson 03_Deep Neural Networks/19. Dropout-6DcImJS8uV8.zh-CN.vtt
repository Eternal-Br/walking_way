WEBVTT
Kind: captions
Language: zh-CN

00:00:00.410 --> 00:00:03.330
还有另一个重要的正则化技术

00:00:03.330 --> 00:00:06.759
它于最近才出现 但令人称奇

00:00:08.028 --> 00:00:12.230
它一开始看起来会有点疯狂 所以请耐心一点

00:00:12.230 --> 00:00:13.663
它叫做“Dropout ”

00:00:13.663 --> 00:00:15.859
Dropout 的原理是这样的

00:00:15.859 --> 00:00:19.339
想象一下 你有一个层连接到另一层

00:00:19.339 --> 00:00:23.140
从一层到下一层的值通常称为激活

00:00:24.399 --> 00:00:26.209
现在 取这些激活 然后

00:00:26.210 --> 00:00:31.015
对于你训练网络的每个样本 随机将某些的一半设为 0

00:00:32.310 --> 00:00:36.250
这样 你基本上随机地将流经你的网络的一半数据

00:00:36.250 --> 00:00:40.159
完全摧毁了 然后再一次随机这么做

00:00:41.390 --> 00:00:44.899
如果对你来说这听起来并不疯狂 那么你就有资格

00:00:44.899 --> 00:00:48.119
成为 Geoffrey Hinton 的学生了 正是他开创了这门技术

00:00:48.119 --> 00:00:50.070
那么发生 Dropout 会怎样呢？

00:00:50.070 --> 00:00:55.329
那就是 你的网络将永不依赖于任何给定的激活去存在

00:00:55.329 --> 00:00:57.820
因为它们可能随时被摧毁

00:00:58.890 --> 00:01:01.810
所以它被迫学习一切的冗余表示

00:01:01.810 --> 00:01:06.150
以确保至少将一些信息保存下来

00:01:06.150 --> 00:01:08.170
这就像打地鼠游戏一样

00:01:08.170 --> 00:01:11.409
一个激活被粉碎 但总会有一个或

00:01:11.409 --> 00:01:13.840
多个激活冒出来

00:01:13.840 --> 00:01:15.340
做同样的工作

00:01:15.340 --> 00:01:18.120
所以 最终结果很好

00:01:18.120 --> 00:01:21.770
迫使您的网络学习冗余表示可能听起来

00:01:21.769 --> 00:01:23.000
效率很低

00:01:23.000 --> 00:01:27.230
但在实践中 它使网络更加稳固 并能防止过拟合

00:01:27.230 --> 00:01:31.670
它也使你的网络如同在网络集合中达成共识

00:01:31.670 --> 00:01:35.105
这始终是提高性能的好方法

00:01:35.105 --> 00:01:37.510
Dropout 是近几年

00:01:37.510 --> 00:01:39.252
出现的最重要的技术之一

00:01:39.251 --> 00:01:40.399
如果 Dropout 不适用于你

00:01:40.400 --> 00:01:43.020
你可能需要试试更大的网络

