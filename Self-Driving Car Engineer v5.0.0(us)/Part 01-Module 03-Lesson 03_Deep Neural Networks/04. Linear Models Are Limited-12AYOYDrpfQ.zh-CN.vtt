WEBVTT
Kind: captions
Language: zh-CN

00:00:00.400 --> 00:00:02.290
这是一般的情形

00:00:02.290 --> 00:00:08.940
假如你有 N 个输入值 K 个输出值 那将有 (N+1)K 个可训练的参数

00:00:08.940 --> 00:00:10.100
不会有更多可训练的参数了

00:00:10.100 --> 00:00:15.500
但问题的关键在于 在实际中 你希望使用尽可能多的参数

00:00:15.500 --> 00:00:16.770
此外 你的模型是线性的

00:00:16.770 --> 00:00:20.310
这意味着你的模型

00:00:20.310 --> 00:00:22.500
能够表示的算术关系是有限的

00:00:22.500 --> 00:00:27.100
例如 如果两个输入值的算术关系是相加

00:00:27.100 --> 00:00:29.950
那么你的模型可以通过矩阵相乘来很好地表示这一关系

00:00:29.950 --> 00:00:34.900
但是 如果两个输入值的算术关系

00:00:34.900 --> 00:00:37.080
取决于二者相乘的结果

00:00:34.720 --> 00:00:39.260
那么你将无法通过线性模型 很好地表示这一关系
13
00:00:39,260 --&gt; 00:00:41,790
尽管如此 线性运算还是非常棒的

00:00:41.790 --> 00:00:45.920
GPU 正是为大型矩阵相乘而设计的

00:00:45.920 --> 00:00:49.260
它们相对来说成本低廉 而且非常非常地快

00:00:49.260 --> 00:00:52.600
此外 从数学角度来讲 线性运算非常稳定

00:00:52.600 --> 00:00:56.100
通过数学公式 我们可以看到

00:00:56.100 --> 00:00:59.560
输入值的小变化不会使输出值出现非常大的波动

00:00:59.560 --> 00:01:01.630
而且它的导数用起来很方便

00:01:01.630 --> 00:01:04.680
线性函数的导数是常量

00:01:04.680 --> 00:01:08.700
在数学上没有什么比常量更稳定的了

00:01:08.700 --> 00:01:12.400
因此 我们希望将参数保存在大的线性函数里面

00:01:12.400 --> 00:01:15.510
但是又希望整个模型是非线性的

00:01:15.510 --> 00:01:19.510
我们不能仅仅通过线性函数将输入值不断地相乘

00:01:19.510 --> 00:01:23.600
因为这就等同于一个大的线性函数

00:01:23.600 --> 00:01:25.395
因此 现在我们将介绍如何为你的模型加入非线性的成分

