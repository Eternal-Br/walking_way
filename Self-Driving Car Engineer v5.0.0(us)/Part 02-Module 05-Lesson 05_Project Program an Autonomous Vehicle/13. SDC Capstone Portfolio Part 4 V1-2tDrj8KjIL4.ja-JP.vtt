WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:04.459
はい Capstone プロジェクトの説明の最後の部分です

00:00:04.459 --> 00:00:08.189
はいこれまで ウェイポイントおよび公開された最終ウェイポイントの取得

00:00:08.189 --> 00:00:10.019
DBWノードによる車両制御

00:00:10.019 --> 00:00:15.484
そして 交通信号検出の裏にあるロジックについて述べてきました

00:00:15.484 --> 00:00:18.000
いいですか実際に

00:00:18.000 --> 00:00:20.899
信号機の状態を検出し ウェイポイントで使うようにしなければなりません

00:00:20.899 --> 00:00:22.750
はいでは実際に見てみましょう

00:00:22.750 --> 00:00:24.780
先程まで作業していたファイルの一つ

00:00:24.780 --> 00:00:27.375
"waypoint_updater.py"を再び見ていきましょう

00:00:27.375 --> 00:00:28.949
それで確認すると

00:00:28.949 --> 00:00:31.164
多くのことを行ったことがわかります

00:00:31.164 --> 00:00:35.304
これらすべての更新が行われており ウェイポイントを公開しているように見えます

00:00:35.304 --> 00:00:37.439
今 "generate_lane"関数があります

00:00:37.439 --> 00:00:39.364
基本的には ウェイポイントを

00:00:39.365 --> 00:00:43.875
取得し それらの速度を更新するという考え方は 車両の挙動に基づいています

00:00:43.875 --> 00:00:47.295
信号機情報が入ってきたら

00:00:47.295 --> 00:00:51.570
車の速度を落として 信号の前にある停止線まで進みたいと思います

00:00:51.570 --> 00:00:53.399
ウェイポイントの特性速度の値が

00:00:53.399 --> 00:00:57.426
線形であることを伝えるのと同じくらい簡単です

00:00:57.426 --> 00:01:00.594
これは進むべき速度であり、車が自動で

00:01:00.594 --> 00:01:04.924
その速度にするのを助ける追加ロジックです

00:01:04.924 --> 00:01:08.369
あとは twist.linear.x を更新するだけでいいのです

00:01:08.370 --> 00:01:09.870
とても簡単に思えます

00:01:09.870 --> 00:01:13.290
新しい加入者がおり これがトラフィックです

00:01:13.290 --> 00:01:14.970
これを行うことは重要です

00:01:14.969 --> 00:01:16.215
この作業を行っていない場合

00:01:16.215 --> 00:01:20.189
コールバックはかなり簡単なはずであり

00:01:20.189 --> 00:01:22.795
ウェイポイント インデックスを横切ることはありません

00:01:22.795 --> 00:01:26.394
書けましたか?では、この"generate_lane"で何が起きているのでしょうか？

00:01:26.394 --> 00:01:28.679
最後の車線を使っているように見えますが

00:01:28.680 --> 00:01:33.470
実際には この生成車線の出力となっています

00:01:33.469 --> 00:01:34.656
はい最終車線が完成したら

00:01:34.656 --> 00:01:36.744
最終車線に直接公開するだけです

00:01:36.745 --> 00:01:40.395
これで 前からウェイポイントを使って取り組んでいますか?

00:01:40.394 --> 00:01:42.494
基本となるウェイポイントを探し 接合する

00:01:42.495 --> 00:01:47.200
のと 同じプロセスを行っているように見えます

00:01:47.200 --> 00:01:49.135
はい車線とメッセージを作成し

00:01:49.135 --> 00:01:51.415
 自分の車両から一番近いインデックスを得ます

00:01:51.415 --> 00:01:53.111
私たちが以前にやったことと非常によく似ています

00:01:53.111 --> 00:01:55.425
最も遠いインデックスは

00:01:55.424 --> 00:01:58.530
最も近いインデックスにルックアヘッド ウェイポイントの数を加えたものです

00:01:58.530 --> 00:02:00.290
これで 前と同じように思えます

00:02:00.290 --> 00:02:02.460
はいそして ウェイポイントを基準にして

00:02:02.459 --> 00:02:04.649
 最も近いインデックスから最も遠いインデックスに基準となる

00:02:04.650 --> 00:02:08.955
lane.waypoints を結合します

00:02:08.955 --> 00:02:10.530
それで ウェイポイントのリストになります

00:02:10.530 --> 00:02:13.694
もし、その"stopline_wp"がマイナスでない場合、

00:02:13.694 --> 00:02:16.064
注意すべきことがある場合は

00:02:16.064 --> 00:02:18.669
ここで作業を行います

00:02:18.669 --> 00:02:21.750
もし、その"stopline_wp"がマイナスでない場合、
注意すべきことがある場合は

00:02:21.750 --> 00:02:24.150
"base_waypoints"直接公開するだけです

00:02:24.150 --> 00:02:25.039
はい そのままにしましょう

00:02:25.039 --> 00:02:28.039
心配している信号機のデータは検出されませんでした

00:02:28.039 --> 00:02:29.939
はい変更する必要はありません

00:02:29.939 --> 00:02:32.182
そうでなければ 減速したウェイポイントを持っています

00:02:32.182 --> 00:02:36.264
これは 最も近いインデックスの基本的なウェイポイントで得ているものです

00:02:36.264 --> 00:02:37.859
ここで 注意が必要です

00:02:37.860 --> 00:02:40.275
減速ウェイポイントについては 基本的には

00:02:40.275 --> 00:02:43.435
いくつかの新しいウェイポイント メッセージのタイプを作成することになります

00:02:43.435 --> 00:02:45.340
変更するだけではできませんか?

00:02:45.340 --> 00:02:47.810
基本的なウェイポイントを変更したくないでしょう

00:02:47.810 --> 00:02:49.530
以前説明したように

00:02:49.530 --> 00:02:53.580
メッセージは一度だけ送信されるので 基本的なウェイポイントを保存しておきたいと思います

00:02:53.580 --> 00:02:55.620
複雑になりませんか?

00:02:55.620 --> 00:02:59.370
はいウェイポイントの基準となる場所でプロパティの変更を開始した場合

00:02:59.370 --> 00:03:03.090
 同じウェイポイントを越えて運転した場合 ウェイポイントを失います

00:03:03.090 --> 00:03:05.060
 その場合 乗り心地は悪くなります

00:03:05.060 --> 00:03:08.330
はい自動車は奇妙な動きをするかもしれません

00:03:08.330 --> 00:03:10.740
基本的に

00:03:10.740 --> 00:03:14.284
ウェイポイントの新しいリストを作成したい場合は 基本ウェイポイントからの情報の一部を使用したいと思います

00:03:14.284 --> 00:03:17.620
プロジェクトを妨害しない方法がわかりました

00:03:17.620 --> 00:03:19.275
どんな適切な方法がありますか?

00:03:19.275 --> 00:03:21.409
正しい方法は 分割したウェイポイントのリストの上に

00:03:21.409 --> 00:03:23.990
エミュレートすることです

00:03:23.990 --> 00:03:26.909
新しいウェイポイントメッセージを作成し

00:03:26.909 --> 00:03:29.989
ポーズをベースウェイ ポイント ポーズに設定します

00:03:29.989 --> 00:03:32.414
ウェイポイントの位置は変わりません

00:03:32.414 --> 00:03:34.409
ポーズには

00:03:34.409 --> 00:03:37.960
方位も含まれているため ウェイポイントの方位も同じであるべきです

00:03:37.960 --> 00:03:42.045
ストップ インデックスがどうあるべきかを把握したいと思います

00:03:42.044 --> 00:03:44.024
スライスしたため

00:03:44.024 --> 00:03:46.254
理解するために少し数学を学ぶ必要があります

00:03:46.254 --> 00:03:48.474
少し戻りましょうね

00:03:48.474 --> 00:03:49.995
停止線があるため

00:03:49.995 --> 00:03:52.783
最も近いインデックスから 2 を引きます

00:03:52.782 --> 00:03:55.619
これは車両の正確な中心であるためです

00:03:55.620 --> 00:03:57.895
車両は停止線をすぐ超えたところにあります

00:03:57.895 --> 00:04:01.005
はいここで 2 を引かないと

00:04:01.004 --> 00:04:03.379
車両の中心部が停止線に来てしまいます

00:04:03.379 --> 00:04:05.509
OK危険です

00:04:05.509 --> 00:04:06.870
はいそこで

00:04:06.870 --> 00:04:09.090
ウェイポイントから 2 または 3 を引き

00:04:09.090 --> 00:04:11.444
 車両のノーズが停止線の後ろに来るようにします

00:04:11.444 --> 00:04:13.680
ウェイポイントのリストは覚えておいてください

00:04:13.680 --> 00:04:16.129
最も近いインデックスで開始します

00:04:16.129 --> 00:04:17.969
最も近いインデックスから

00:04:17.970 --> 00:04:21.540
最も近いインデックスにスライスしますが 多くの人はウェイポイントに注意しません

00:04:21.540 --> 00:04:23.850
停止する必要がある信号から

00:04:23.850 --> 00:04:26.775
どれほど離れた距離のウェイポイントなのかなどです

00:04:26.774 --> 00:04:31.949
ここにある"distance"関数を使って距離を計算することができます

00:04:31.949 --> 00:04:35.610
ウェイポイントのリストで渡す距離関数

00:04:35.610 --> 00:04:40.259
 または 一覧にあるインデックスは 停止のインデックスとなります

00:04:40.259 --> 00:04:43.209
繰り返して 数値を合計し 距離を合計します

00:04:43.209 --> 00:04:47.029
はいdistance 関数は線形の区分的距離をとります

00:04:47.029 --> 00:04:49.619
あるウェイポイントから次のウェイポイントまでの距離を合計するだけです

00:04:49.620 --> 00:04:50.723
すべての車線の区分ですか?

00:04:50.723 --> 00:04:52.220
いいえ ウェイポイント間の車線の区分のみです

00:04:52.220 --> 00:04:55.230
最後に 速度が何であるかを理解することができます

00:04:55.230 --> 00:05:00.650
はい"i"が停止インデックスよりも大きい場合 distance はゼロを返しますいいでしょう

00:05:00.649 --> 00:05:03.589
前に戻ってループしていない限り 実際には意味がありません

00:05:03.589 --> 00:05:04.089
分かりますね

00:05:04.089 --> 00:05:07.322
ロジック チェックが行われます 「ちょっと待ってください

00:05:07.322 --> 00:05:11.220
差がゼロになるまで進めることになっていますが 既にゼロです 」

00:05:11.220 --> 00:05:12.630
はい速度を計算しましょう

00:05:12.629 --> 00:05:15.269
どうなっているのでしょう

00:05:15.269 --> 00:05:17.984
何が起こっているのかを実際に視覚的に確認すれば 役に立つと思います

00:05:17.985 --> 00:05:19.946
描くと

00:05:19.946 --> 00:05:21.350
カーブはどのようになるでしょうか?

00:05:21.350 --> 00:05:23.450
これを描く場合

00:05:23.449 --> 00:05:24.985
速度があり

00:05:24.985 --> 00:05:27.840
平方根関数に従っています

00:05:27.839 --> 00:05:35.429
ウェイポイントと停止ウェイポイントの間の距離が小さくなるように

00:05:35.430 --> 00:05:38.290
このプロフィールを追跡しています

00:05:38.290 --> 00:05:40.430
はい制限速度が高いため

00:05:40.430 --> 00:05:43.095
 制限速度が超えないように注意します

00:05:43.095 --> 00:05:45.790
速度が減少し

00:05:45.790 --> 00:05:49.100
同様に減少しているので カーブが鋭角になっていることがわかります

00:05:49.100 --> 00:05:49.470
分かりますね

00:05:49.470 --> 00:05:52.310
ブレーキ ペダルを軽く乗せただけで

00:05:52.310 --> 00:05:56.379
最後にできる限り強く踏み込んだようになります

00:05:56.379 --> 00:05:59.784
はいウェイポイント速度をゼロに設定します

00:05:59.785 --> 00:06:02.345
ここには 平方根関数があります

00:06:02.345 --> 00:06:06.697
ウェイポイント ローダーのコードにあるものと非常によく似ているので これを使用しました

00:06:06.697 --> 00:06:09.319
ウェイポイント ローダーのコードを読み終えてから

00:06:09.319 --> 00:06:12.810
ウェイポイントが最初は減速しているのがわかります

00:06:12.810 --> 00:06:16.144
ゼロから通常の中間地点速度まで加速するため

00:06:16.144 --> 00:06:20.055
 ウェイポイントリストの最後で再び減速してゼロになります

00:06:20.055 --> 00:06:22.310
理にかなっていることがわかります

00:06:22.310 --> 00:06:25.579
速度は距離パラメーターに依存しているからです

00:06:25.579 --> 00:06:28.189
距離が大きいほど速度は速くなります

00:06:28.189 --> 00:06:30.800
距離が本当に小さくなると

00:06:30.800 --> 00:06:33.259
理にかなっている必要があり 速度は遅くなります

00:06:33.259 --> 00:06:36.094
車両は 停止する準備をしているため 減速しているからです

00:06:36.095 --> 00:06:40.130
ええ そのとおりです停止インデックスに近づくにつれて

00:06:40.129 --> 00:06:43.060
距離は非常に小さくなり 速度はゼロになります

00:06:43.060 --> 00:06:46.564
はいこの平方根は実際にそれを形作るのを援助するだけですよね?

00:06:46.564 --> 00:06:49.225
はい平方根を使用しなくても構いません

00:06:49.225 --> 00:06:52.314
この減速のプロファイルを見ると

00:06:52.314 --> 00:06:56.209
停止線に近づくにつれて 平方根が急勾配になることがわかります

00:06:56.209 --> 00:06:59.728
平方根の終わり近くで 速度がかなり急になっており

00:06:59.728 --> 00:07:02.829
高くなっている部分を微分します

00:07:02.829 --> 00:07:05.060
はい平方根の代わりに

00:07:05.060 --> 00:07:07.579
定数を掛けることができますいくつかの線形を得ることができます

00:07:07.579 --> 00:07:07.724
線形化することができますか?

00:07:07.725 --> 00:07:10.450
はいいくつかの線形があります

00:07:10.449 --> 00:07:12.069
これで OK ですはい

00:07:12.069 --> 00:07:13.985
はい 適切な s 曲線を適用し

00:07:13.985 --> 00:07:15.689
なめらかな減速をしたい場合

00:07:15.689 --> 00:07:17.209
機能します

00:07:17.209 --> 00:07:19.399
連続微分かもしれません

00:07:19.399 --> 00:07:22.779
もし速度が 1 より小さければ

00:07:22.779 --> 00:07:24.828
0 に戻りますが なぜでしょうか?

00:07:24.829 --> 00:07:27.730
基本的に速度が十分小さければ ゼロを返します

00:07:27.730 --> 00:07:31.430
時間をとっているだけであるため

00:07:31.430 --> 00:07:38.240
速度と twist.linear.x を検出しました

00:07:38.240 --> 00:07:42.920
はい距離が大きいと平方根は非常に大きくなるため

00:07:42.920 --> 00:07:44.990
停止ウェイポイントから遠く離れている場合

00:07:44.990 --> 00:07:48.329
大きな速度を設定したくはありません

00:07:48.329 --> 00:07:53.029
ウェイポイントに与えられた速度をそのままにしておきます

00:07:53.029 --> 00:07:55.539
基本的に制限速度として扱います

00:07:55.540 --> 00:07:55.860
はい

00:07:55.860 --> 00:07:59.360
ウェイポイント上のすべての速度が制限速度であり

00:07:59.360 --> 00:08:03.560
非常に興味深い論理を試しているのでなければ これ以上は必要ありません

00:08:03.560 --> 00:08:05.040
制限速度を守り

00:08:05.040 --> 00:08:07.670
平方根が小さくなるにつれて

00:08:07.670 --> 00:08:10.879
平方根速度に切り替える速度制限になります

00:08:10.879 --> 00:08:14.909
リストに追加して リストを返します

00:08:14.910 --> 00:08:18.409
車線用に新しく作成したウェイポイントのリストを用意する必要があります

00:08:18.408 --> 00:08:21.939
その車線を返して 公表したばかりです

00:08:21.939 --> 00:08:23.300
はい

00:08:23.300 --> 00:08:25.049
実物にように見えます

00:08:25.048 --> 00:08:28.089
これがその場所です注意することがいくつかあります

00:08:28.089 --> 00:08:30.199
非常に大きなリストがある場合は

00:08:30.199 --> 00:08:31.714
更新を始める前に 必ず

00:08:31.714 --> 00:08:35.220
ベースとなる車線のウェイポイントを分割してください

00:08:35.220 --> 00:08:37.115
毎回 ベースとなる車線のウェイポイントのセット全体を反復して

00:08:37.115 --> 00:08:40.759
この更新を行う必要がある場合

00:08:40.759 --> 00:08:41.929
それほど効率的ではありません

00:08:41.929 --> 00:08:44.294
これが特に重要な点です

00:08:44.294 --> 00:08:47.304
コードに多くの待ち時間を導入することができますが

00:08:47.304 --> 00:08:50.509
更新されたウェイポイントに実際に車両が到達するまでに

00:08:50.509 --> 00:08:51.860
 車両はウェイポイントを通過します

00:08:51.860 --> 00:08:54.289
スピードを効率的にしたいですが

00:08:54.289 --> 00:08:56.379
速くしても何が起こらないことがあります

00:08:56.379 --> 00:08:57.980
事前に分割するようにしてください

00:08:57.980 --> 00:08:59.629
待ち時間を避けなければなりません

00:08:59.629 --> 00:09:04.290
素晴らしい実際に車両は以下のウェイポイントを運転できますが

00:09:04.291 --> 00:09:07.720
信号機の指示に従い 信号機において速度を落として停止します

00:09:07.720 --> 00:09:10.845
OKチュートリアルの全体を完了しました

00:09:10.845 --> 00:09:11.600
はい

00:09:11.600 --> 00:09:12.670
何を学びましたか?

00:09:12.669 --> 00:09:15.545
このリストのウェイポイントを更新することを学びました

00:09:15.546 --> 00:09:17.805
基本的に

00:09:17.804 --> 00:09:20.754
ベースのウェイポイントを車の前にある一連の最終的なウェイポイントに公開することを学びました

00:09:20.754 --> 00:09:21.110
はい

00:09:21.110 --> 00:09:22.279
ほかにありますか?

00:09:22.279 --> 00:09:24.139
これらのウェイポイントを追跡するために

00:09:24.139 --> 00:09:26.340
車をコントロールする方法を学びました

00:09:26.340 --> 00:09:29.750
そうです信号機の検出についても学んだと思います

00:09:29.750 --> 00:09:32.929
信号機を検出し

00:09:32.929 --> 00:09:36.829
信号機から正しいウェイポイントを送信するロジックです

00:09:36.830 --> 00:09:38.435
分かりますね最終的に

00:09:38.434 --> 00:09:39.969
信号機で停止する方法を学びました

00:09:39.970 --> 00:09:40.519
はい

00:09:40.519 --> 00:09:42.289
車速をゆっくりします

00:09:42.289 --> 00:09:44.629
信号モデル以外に

00:09:44.629 --> 00:09:47.659
車を運転するために必要なものすべてを学びましたね

00:09:47.659 --> 00:09:49.039
そうですね

00:09:49.039 --> 00:09:50.579
うん いいですね

00:09:50.580 --> 00:09:51.220
素晴らしいです

00:09:51.220 --> 00:09:55.660
はい一連のチュートリアルをご利用いただきありがとうございます

00:09:55.659 --> 00:09:57.600
なるほど ありがとう

00:09:57.600 --> 00:09:59.190
頑張ってください

