WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.459
All right, now we're doing the final part of the Capstone Project walkthrough.

00:00:04.459 --> 00:00:08.189
Yes. So, previously we've covered getting waypoints,

00:00:08.189 --> 00:00:10.019
published the final waypoints,

00:00:10.019 --> 00:00:15.484
controlling the car with the DBW node and the logic behind the traffic light detection.

00:00:15.484 --> 00:00:18.000
Okay. Now we actually have to take those states of

00:00:18.000 --> 00:00:20.899
the traffic light and put them to use on the waypoints.

00:00:20.899 --> 00:00:22.750
Yes. So let's have a look.

00:00:22.750 --> 00:00:24.780
We're revisiting one of the files that we were

00:00:24.780 --> 00:00:27.375
just working with, the waypoint_updater.py.

00:00:27.375 --> 00:00:28.949
So, if we check that out,

00:00:28.949 --> 00:00:31.164
we did a lot of this work already.

00:00:31.164 --> 00:00:35.304
So, it looks like all of these updates are happening and publish waypoints.

00:00:35.304 --> 00:00:37.439
So now we have this "generate_lane" function.

00:00:37.439 --> 00:00:39.364
Basically, the idea is that we're going to take

00:00:39.365 --> 00:00:43.875
the waypoints and update their velocity is based on how we want the car to behave.

00:00:43.875 --> 00:00:47.295
So, if we have some traffic light information coming in,

00:00:47.295 --> 00:00:51.570
we want to slow the car down leading up to the stop line in front of the traffic light.

00:00:51.570 --> 00:00:53.399
That's just as easy as telling

00:00:53.399 --> 00:00:57.426
that waypoints' property velocity value that twists linear.

00:00:57.426 --> 00:01:00.594
This is the velocity that you should be going at and then there's

00:01:00.594 --> 00:01:04.924
some extra logic in auto where that helps us take the car to that speed.

00:01:04.924 --> 00:01:08.369
Well, all we have to do is we update the twist.linear.x, I think it is.

00:01:08.370 --> 00:01:09.870
Seems pretty straightforward.

00:01:09.870 --> 00:01:13.290
So, we do have a new subscriber in this and that's the traffic.

00:01:13.290 --> 00:01:14.970
That's kind of important now.

00:01:14.969 --> 00:01:16.215
If we didn't have already,

00:01:16.215 --> 00:01:20.189
there it is and its callback should be pretty straightforward,

00:01:20.189 --> 00:01:22.795
that stop lying waypoint index.

00:01:22.795 --> 00:01:26.394
Great. So what is happening with this generate lane?

00:01:26.394 --> 00:01:28.679
So it looks like we're using this final lane

00:01:28.680 --> 00:01:33.470
and that's actually what is the output of this generate lane.

00:01:33.469 --> 00:01:34.656
Yeah. And once we have final lane,

00:01:34.656 --> 00:01:36.744
we can just publish on the final lane directly.

00:01:36.745 --> 00:01:40.395
Okay. We're working with our waypoints from before right?

00:01:40.394 --> 00:01:42.494
So it looks like we're doing the same process

00:01:42.495 --> 00:01:47.200
of looking at our base waypoints and splicing it.

00:01:47.200 --> 00:01:49.135
Yeah. So we create a lane and a message,

00:01:49.135 --> 00:01:51.415
and we get the closest index from our cars.

00:01:51.415 --> 00:01:53.111
So it's very similar to what we've done before,

00:01:53.111 --> 00:01:55.425
we get the farthest index which is

00:01:55.424 --> 00:01:58.530
the closest index plus the number of lookahead waypoints.

00:01:58.530 --> 00:02:00.290
Okay. Just like last time?

00:02:00.290 --> 00:02:02.460
Yeah. And then base waypoints,

00:02:02.459 --> 00:02:04.649
we're going to slice the base

00:02:04.650 --> 00:02:08.955
lane.waypoints from our closest index to the farthest index.

00:02:08.955 --> 00:02:10.530
So that's going to be a list of waypoints.

00:02:10.530 --> 00:02:13.694
If that stop lying waypoint is not negative one,

00:02:13.694 --> 00:02:16.064
or if it's just farther than we care about,

00:02:16.064 --> 00:02:18.669
we're actually going to do some work here.

00:02:18.669 --> 00:02:21.750
So if it is negative one or if it's further than we care about,

00:02:21.750 --> 00:02:24.150
then we just publish the base waypoints directly.

00:02:24.150 --> 00:02:25.039
Yeah, leave it alone.

00:02:25.039 --> 00:02:28.039
Yeah, because we didn't detect any traffic light data that we're concerned about.

00:02:28.039 --> 00:02:29.939
Yeah. No need to make any modifications.

00:02:29.939 --> 00:02:32.182
Else, we have this decelerate waypoints,

00:02:32.182 --> 00:02:36.264
and that's what we're getting at the base waypoints in that closest index.

00:02:36.264 --> 00:02:37.859
And so, we want to be a little careful here.

00:02:37.860 --> 00:02:40.275
The decelerate waypoints were basically just going to be

00:02:40.275 --> 00:02:43.435
creating some new waypoints message types.

00:02:43.435 --> 00:02:45.340
Couldn't just modify on top of it?

00:02:45.340 --> 00:02:47.810
We probably don't want to modify our base waypoints.

00:02:47.810 --> 00:02:49.530
So, as we discussed previously,

00:02:49.530 --> 00:02:53.580
that message comes in only once and we want to keep the base waypoints preserved.

00:02:53.580 --> 00:02:55.620
That would get pretty messy, wouldn't it?

00:02:55.620 --> 00:02:59.370
Yeah. If we started changing the properties where base waypoints,

00:02:59.370 --> 00:03:03.090
then we sort of lose them if you drive back over the same waypoints-

00:03:03.090 --> 00:03:05.060
May make your ride very uncomfortable.

00:03:05.060 --> 00:03:08.330
Yeah. Cars may do some strange things.

00:03:08.330 --> 00:03:10.740
So we want to basically create a new list of

00:03:10.740 --> 00:03:14.284
waypoints but use some of the information from those base waypoints.

00:03:14.284 --> 00:03:17.620
Now that you know how to not sabotage the project,

00:03:17.620 --> 00:03:19.275
what's the proper way of doing it?

00:03:19.275 --> 00:03:21.409
So, the proper way is that we're going to enumerate

00:03:21.409 --> 00:03:23.990
over the sliced list of waypoints there,

00:03:23.990 --> 00:03:26.909
and we're going to create a new waypoint message and we're going to

00:03:26.909 --> 00:03:29.989
set the pose to the base waypoint pose.

00:03:29.989 --> 00:03:32.414
The position of the waypoint isn't going to change any.

00:03:32.414 --> 00:03:34.409
And that pose also contains

00:03:34.409 --> 00:03:37.960
the orientation and so the orientation of waypoints should stay the same.

00:03:37.960 --> 00:03:42.045
And then, we want to figure out what the stop index should be.

00:03:42.044 --> 00:03:44.024
And because we've taken a slice,

00:03:44.024 --> 00:03:46.254
there's a little bit of math here to figure out what the-

00:03:46.254 --> 00:03:48.474
So we want to go back a little bit, right?

00:03:48.474 --> 00:03:49.995
So we have that stop line,

00:03:49.995 --> 00:03:52.783
and then we have that closest index and also have this minus two,

00:03:52.782 --> 00:03:55.619
that's because this is the exact center of the car.

00:03:55.620 --> 00:03:57.895
So then it would just be a little bit over the line itself.

00:03:57.895 --> 00:04:01.005
Yeah. So if we don't have a minus two in there,

00:04:01.004 --> 00:04:03.379
we will stop with the centre of the car right on the line.

00:04:03.379 --> 00:04:05.509
Okay. That's dangerous.

00:04:05.509 --> 00:04:06.870
Yeah. So you put

00:04:06.870 --> 00:04:09.090
the minus two or maybe minus three waypoints in there

00:04:09.090 --> 00:04:11.444
to make the nose of the car stop behind the line.

00:04:11.444 --> 00:04:13.680
And so this list of waypoints, remember,

00:04:13.680 --> 00:04:16.129
starts at the closest index.

00:04:16.129 --> 00:04:17.969
We sliced from the closest index to

00:04:17.970 --> 00:04:21.540
the closest index plus however many look away head waypoints.

00:04:21.540 --> 00:04:23.850
It's kind of like a waypoint distance of how

00:04:23.850 --> 00:04:26.775
far away from this light that we need to stop at.

00:04:26.774 --> 00:04:31.949
So, we can just calculate the distance using our distance function right here.

00:04:31.949 --> 00:04:35.610
Yeah, the distance function we pass in that list of waypoints

00:04:35.610 --> 00:04:40.259
or whatever index we are in this enumeration and then the index of the stop.

00:04:40.259 --> 00:04:43.209
Iterate through and add them up, add up the distances.

00:04:43.209 --> 00:04:47.029
Yeah. So, the distance function does a linear piecewise distance.

00:04:47.029 --> 00:04:49.619
So it just sums up the distance from one waypoint to the next.

00:04:49.620 --> 00:04:50.723
All the line segments?

00:04:50.723 --> 00:04:52.220
No, only the line segments between waypoints.

00:04:52.220 --> 00:04:55.230
And then finally, we can figure out what the velocity is.

00:04:55.230 --> 00:05:00.650
Sure. And distance will return zero if "i" is bigger than the stop index. It's good.

00:05:00.649 --> 00:05:03.589
It wouldn't really make sense unless it was looping all the way back around.

00:05:03.589 --> 00:05:04.089
Right.

00:05:04.089 --> 00:05:07.322
There'd be some logic check right away saying "Oh wait,

00:05:07.322 --> 00:05:11.220
I'm supposed to go until the difference between these is zero and it's already."

00:05:11.220 --> 00:05:12.630
Yeah. So let me calculate the velocity.

00:05:12.629 --> 00:05:15.269
So, tell me what's going on here.

00:05:15.269 --> 00:05:17.984
I think it'll help if we actually visually see what's going on here.

00:05:17.985 --> 00:05:19.946
So, if we draw it out,

00:05:19.946 --> 00:05:21.350
what does this curve looks like?

00:05:21.350 --> 00:05:23.450
Yeah, so if we draw this,

00:05:23.449 --> 00:05:24.985
we have the velocity,

00:05:24.985 --> 00:05:27.840
and it's following this nice square root function here,

00:05:27.839 --> 00:05:35.429
so as the distance between our waypoint and the stop waypoint becomes small,

00:05:35.430 --> 00:05:38.290
we're following this profile.

00:05:38.290 --> 00:05:40.430
Yeah. And then we have our speed limit right

00:05:40.430 --> 00:05:43.095
here and we're being careful not to go over that.

00:05:43.095 --> 00:05:45.790
And then it's falling down and

00:05:45.790 --> 00:05:49.100
you can see though that it is getting sharper as it's decreasing as well.

00:05:49.100 --> 00:05:49.470
Right.

00:05:49.470 --> 00:05:52.310
It's like you're just lightly putting on

00:05:52.310 --> 00:05:56.379
the brake pedal and then at the very end you're pressing as hard as you can.

00:05:56.379 --> 00:05:59.784
Yeah. Then we have waypoint speed set to zero after that.

00:05:59.785 --> 00:06:02.345
So here we have a square root function.

00:06:02.345 --> 00:06:06.697
Now this I used because this is very similar to what's in the waypoint loader code.

00:06:06.697 --> 00:06:09.319
If you've gone through and read the waypoint loader code,

00:06:09.319 --> 00:06:12.810
you'll see that the waypoints are decelerated at the beginning.

00:06:12.810 --> 00:06:16.144
It accelerates from zero to the regular waypoint velocity

00:06:16.144 --> 00:06:20.055
and then at the end of a waypoint list it's decelerating to zero again.

00:06:20.055 --> 00:06:22.310
Right away I can see that it's making sense

00:06:22.310 --> 00:06:25.579
because this velocity is dependent on this distance parameter.

00:06:25.579 --> 00:06:28.189
So, the larger the distance, the larger the velocity.

00:06:28.189 --> 00:06:30.800
But when this distance gets really small,

00:06:30.800 --> 00:06:33.259
it makes sense and my velocity should be really small as

00:06:33.259 --> 00:06:36.094
well because it's preparing to stop and it's decelerating.

00:06:36.095 --> 00:06:40.130
Yeah exactly. So, as we get closer to that stop index,

00:06:40.129 --> 00:06:43.060
the distance becomes very small and the velocity gets to zero.

00:06:43.060 --> 00:06:46.564
Yeah. And this square root is just going to actually help shape that, right?

00:06:46.564 --> 00:06:49.225
Yeah. Now, you may not want to use a square root.

00:06:49.225 --> 00:06:52.314
If you look at the profile of this deceleration,

00:06:52.314 --> 00:06:56.209
you'll see that the square root becomes sort of steep as you get close to the stop line.

00:06:56.209 --> 00:06:59.728
You're taking the derivative of it that rate is getting pretty sharp,

00:06:59.728 --> 00:07:02.829
pretty high near the end of that square root.

00:07:02.829 --> 00:07:05.060
Yeah. So instead of a square root, you could just

00:07:05.060 --> 00:07:07.579
multiply by a constant. So you get some linear.

00:07:07.579 --> 00:07:07.724
Could try to make it linear?

00:07:07.725 --> 00:07:10.450
Yeah. Some linear deceleration.

00:07:10.449 --> 00:07:12.069
Nice. Yes.

00:07:12.069 --> 00:07:13.985
Yeah, if you want to fit a nice s curve,

00:07:13.985 --> 00:07:15.689
have a nice smooth deceleration,

00:07:15.689 --> 00:07:17.209
then that can also work.

00:07:17.209 --> 00:07:19.399
Continuous derivative maybe.

00:07:19.399 --> 00:07:22.779
So, if velocity is less than one,

00:07:22.779 --> 00:07:24.828
we just return zero, why is that?

00:07:24.829 --> 00:07:27.730
Basically if the velocity is small enough, we just return zero.

00:07:27.730 --> 00:07:31.430
And then we're just taking that and we have this min,

00:07:31.430 --> 00:07:38.240
so that's the velocity that we just figured out and this twist.linear.x.

00:07:38.240 --> 00:07:42.920
Yeah. So the square root can become very large as the distance is large,

00:07:42.920 --> 00:07:44.990
and so, we don't want to set

00:07:44.990 --> 00:07:48.329
a really large velocity if we're a long way away from the stop waypoint.

00:07:48.329 --> 00:07:53.029
We'd rather just keep the velocity that was given for the waypoints before.

00:07:53.029 --> 00:07:55.539
So we treat that as the speed limit basically.

00:07:55.540 --> 00:07:55.860
Yeah.

00:07:55.860 --> 00:07:59.360
All the velocities on the waypoints are the speed limit and there's no reason we

00:07:59.360 --> 00:08:03.560
ever want to go higher than that unless we're trying some very interesting logic.

00:08:03.560 --> 00:08:05.040
So we keep the speed limit and then,

00:08:05.040 --> 00:08:07.670
as the square root becomes smaller

00:08:07.670 --> 00:08:10.879
then the speed limit we switch over to that square root velocity.

00:08:10.879 --> 00:08:14.909
And then we just append that onto our list in return that list.

00:08:14.910 --> 00:08:18.409
And so, we should have a list of newly created waypoints for our lane.

00:08:18.408 --> 00:08:21.939
And then we just return that lane and we just published that.

00:08:21.939 --> 00:08:23.300
Yeah.

00:08:23.300 --> 00:08:25.049
That looks like it's it actually.

00:08:25.048 --> 00:08:28.089
Yeah, that should be it. There are a few things to watch out for here.

00:08:28.089 --> 00:08:30.199
If you have a very large list,

00:08:30.199 --> 00:08:31.714
you want to make sure that you slice

00:08:31.714 --> 00:08:35.220
the base lane waypoints before you start updating them.

00:08:35.220 --> 00:08:37.115
So if you have to iterate over

00:08:37.115 --> 00:08:40.759
the entire set of baseline waypoints each time and do this update,

00:08:40.759 --> 00:08:41.929
there wouldn't be very efficient.

00:08:41.929 --> 00:08:44.294
And I think it's particularly important for this

00:08:44.294 --> 00:08:47.304
because then you can introduce a lot of latency in the code,

00:08:47.304 --> 00:08:50.509
and that by the time your updated waypoints actually get to the car,

00:08:50.509 --> 00:08:51.860
the car's moved past them.

00:08:51.860 --> 00:08:54.289
So we want to be efficient with speed here,

00:08:54.289 --> 00:08:56.379
nothing's happening as fast as possible.

00:08:56.379 --> 00:08:57.980
So just make sure to slice beforehand.

00:08:57.980 --> 00:08:59.629
And avoid any latency.

00:08:59.629 --> 00:09:04.290
Awesome. So, now we can actually get the car driving around following waypoints,

00:09:04.291 --> 00:09:07.720
obeying traffic lights and slowing down for those traffic lights and stopping.

00:09:07.720 --> 00:09:10.845
All right. Now we've completed the entirety of the walkthrough.

00:09:10.845 --> 00:09:11.600
Yeah.

00:09:11.600 --> 00:09:12.670
What have we learned?

00:09:12.669 --> 00:09:15.545
So, we've learned to update the waypoints in this list.

00:09:15.546 --> 00:09:17.805
We've basically learned to publish

00:09:17.804 --> 00:09:20.754
base waypoints to the set of final waypoints in front of the car.

00:09:20.754 --> 00:09:21.110
Yeah.

00:09:21.110 --> 00:09:22.279
What else?

00:09:22.279 --> 00:09:24.139
We learned how to control the car,

00:09:24.139 --> 00:09:26.340
to follow these waypoints.

00:09:26.340 --> 00:09:29.750
That's right. I guess we also learned about traffic light detection,

00:09:29.750 --> 00:09:32.929
the logic of detecting

00:09:32.929 --> 00:09:36.829
the traffic light and sending the correct waypoint from the traffic light.

00:09:36.830 --> 00:09:38.435
Right. And then finally,

00:09:38.434 --> 00:09:39.969
how to actually stop at that light.

00:09:39.970 --> 00:09:40.519
Yeah.

00:09:40.519 --> 00:09:42.289
And slow down your velocity.

00:09:42.289 --> 00:09:44.629
So, other than the traffic light model,

00:09:44.629 --> 00:09:47.659
this should be everything that you would need to drive the car, right?

00:09:47.659 --> 00:09:49.039
Yeah, that's right.

00:09:49.039 --> 00:09:50.579
Yeah, great.

00:09:50.580 --> 00:09:51.220
That's awesome.

00:09:51.220 --> 00:09:55.660
Yeah. So, thanks for joining us for this series of walkthroughs.

00:09:55.659 --> 00:09:57.600
Yeah, thank you.

00:09:57.600 --> 00:09:59.190
And good luck.

