WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:06.035
ようこそ これが Udacity 自動運転車エンジニア向け Nanodegree プログラムの最終プロジェクトです

00:00:06.035 --> 00:00:08.939
プロジェクトの目標は ウェイポイントナビゲーションを使用して

00:00:08.939 --> 00:00:11.914
Karla がテストコースをドライブできるようにすることです

00:00:11.914 --> 00:00:16.044
Karla は障害物を避け 信号機では停車しながらこれを実行します

00:00:16.045 --> 00:00:18.030
ウェイポイントは 簡単に言うなら座標の順序集合です

00:00:18.030 --> 00:00:20.980
Karla はこれを使ってコースをたどる経路を計画します

00:00:20.980 --> 00:00:24.699
こうしたウェイポイントは それぞれに目標速度が関連付けけられています

00:00:24.699 --> 00:00:27.960
Karla のプランニングサブシステムは 望ましい車両行動に基づいて

00:00:27.960 --> 00:00:31.675
車両の前方にあるウェイポイントに対して目標速度を更新します

00:00:31.675 --> 00:00:35.340
Karla のコントロールサブシステムは スロットル ステアリング それからブレーキを動かして

00:00:35.340 --> 00:00:40.185
正しい目標速度でウェイポイントをナビゲートします

00:00:40.185 --> 00:00:41.755
プロジェクトの間に

00:00:41.755 --> 00:00:44.450
認識 プランニング コントロールのサブシステム

00:00:44.450 --> 00:00:46.910
それぞれのコンポーネントを実装します

00:00:46.909 --> 00:00:48.784
認識サブシステムでは

00:00:48.784 --> 00:00:52.625
信号機検出と障害物検出を実装します

00:00:52.625 --> 00:00:54.645
プランニングサブシステムでは

00:00:54.645 --> 00:00:57.465
ウェイポイントアップデーターというノードを実装します

00:00:57.465 --> 00:00:59.970
このノードは 進行方向にある信号機や障害物に基づいて

00:00:59.969 --> 00:01:03.640
ウェイポイントごとの目標速度を設定します

00:01:03.640 --> 00:01:07.260
たとえば ホライズン上に赤信号が見えたら

00:01:07.260 --> 00:01:11.814
その信号機に到達するノードで減速するよう設定します

00:01:11.814 --> 00:01:13.685
コントロールサブシステムでは

00:01:13.685 --> 00:01:16.370
ドライブバイワイヤーの ROS ノードを実装します

00:01:16.370 --> 00:01:19.310
これは 目標トラジェクトリーの情報入力が必要です

00:01:19.310 --> 00:01:22.055
ある意味車両をナビゲートするコントロールコマンドとも言えます

00:01:22.055 --> 00:01:24.775
こうしたノードのための ROS のフレームワークと

00:01:24.775 --> 00:01:28.840
信号機や障害物も含めたシミュレーターのバージョンを用意しています

00:01:28.840 --> 00:01:34.359
用意されている ROS フレームワークは Udacity シミュレーターと Karla の両方で動作するので

00:01:34.359 --> 00:01:36.950
車両でテストされる同じコードを 提出する前に

00:01:36.950 --> 00:01:40.255
シミュレーター上でプロジェクトを開発できます

00:01:40.254 --> 00:01:45.479
次は プロジェクトの各パートをもう少し詳しく見ていきましょうそれでは始めましょう

