WEBVTT
Kind: captions
Language: zh-CN

00:00:00.048 --> 00:00:02.528
为了实现它 我修改了"run"函数

00:00:02.528 --> 00:00:05.383
它现在有一个3维的参数向量

00:00:05.383 --> 00:00:08.124
出于一些之后你才会明白的原因

00:00:08.124 --> 00:00:11.123
我在这里加入了printflag参数并且默认为False

00:00:11.123 --> 00:00:14.293
这里的初始参数跟以往一样

00:00:14.293 --> 00:00:16.300
speed 和 err 以及 crosstrack_error 

00:00:16.300 --> 00:00:19.198
还有int_crosstrack_error 我还设置了drift参数

00:00:19.198 --> 00:00:21.416
为了让参数组合的选择

00:00:21.416 --> 00:00:23.261
对误差的影响更明显一些

00:00:23.261 --> 00:00:26.267
我让迭代的次数变为原来的2倍

00:00:26.267 --> 00:00:29.690
但在统计总体CTE时

00:00:29.690 --> 00:00:32.518
只会从第N次迭代算起

00:00:32.518 --> 00:00:34.902
我给了算法一个机会

00:00:34.902 --> 00:00:37.243
让它在N次迭代中收敛到0 

00:00:37.243 --> 00:00:39.450
但是我想知道 在101到200次迭代中

00:00:39.450 --> 00:00:41.546
CTE会发生如何显著的变化

00:00:41.546 --> 00:00:46.164
如果printflag为真

00:00:46.164 --> 00:00:49.617
这里的输出会是角度 而不是弧度

00:00:49.617 --> 00:00:52.828
然后返回平均误差

00:00:52.828 --> 00:00:55.533
所以我想要编写twiddle函数

00:00:55.533 --> 00:00:57.570
它得要找到最优的参数组合

00:00:57.570 --> 00:00:59.241
并且返回给我 

00:00:59.241 --> 00:01:02.130
我想让你来实现带参数tolerance的twiddle

00:01:02.130 --> 00:01:06.168
参数的阈值为0.001

00:01:06.168 --> 00:01:10.050
运行twiddle时 它会输出每次迭代的参数组合以及CTE

00:01:10.050 --> 00:01:12.593
这里的CTE很快变成零

00:01:12.593 --> 00:01:16.136
事实上迭代几次后

00:01:16.136 --> 00:01:20.031
在我的实现中是107次

00:01:20.031 --> 00:01:23.621
我就得到了CTE的值为 3.611e-17

00:01:23.621 --> 00:01:26.060
这里是典型的控制器

00:01:26.060 --> 00:01:29.364
你能看见 X Y orientation

00:01:29.364 --> 00:01:31.309
drift是常数 

00:01:31.309 --> 00:01:33.713
这里是我的恒定drift参数

00:01:33.713 --> 00:01:37.625
最初的平均误差是195

00:01:37.625 --> 00:01:40.725
在迭代一会儿之后

00:01:40.725 --> 00:01:43.458
你会发现我的y值下降到了10的负6次方 并保持在这里

00:01:43.458 --> 00:01:45.788
这意味着我们的控制器非常

00:01:45.788 --> 00:01:49.604
非常擅长于追踪我们的参考航线

00:01:49.604 --> 00:01:52.273
我们的最终控制器在第100到200次

00:01:52.273 --> 00:01:55.999
迭代中的误差是3.611

00:01:55.999 --> 00:01:58.748
我想要你来实现twiddle 我们也许会改变robot一些设置

00:01:58.748 --> 00:02:01.470
但是当你运行它时

00:02:01.470 --> 00:02:03.859
如果你找到了最优的参数组合

00:02:03.859 --> 00:02:05.866
并运行了一个完整的PID控制器

00:02:05.866 --> 00:02:07.890
那么最终的误差将会非常非常小

00:02:07.890 --> 00:02:10.830
我们将会检查这一点

