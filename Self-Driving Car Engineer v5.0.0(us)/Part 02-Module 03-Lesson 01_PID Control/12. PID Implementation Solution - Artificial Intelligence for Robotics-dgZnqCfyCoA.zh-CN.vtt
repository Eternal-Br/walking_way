WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.000
这里是我的解法 我在主循环声明了新变量int_crosstrack_error

00:00:05.000 --> 00:00:07.000
并把它初始化为0

00:00:07.000 --> 00:00:12.000
然后我把循环体内的crosstrack_error加到int_crosstrack_error上

00:00:12.000 --> 00:00:17.000
之后我给控制器加上int_crosstrack_error的比例项

00:00:17.000 --> 00:00:27.000
点击"RUN" 我发现我的y值缓慢地收敛到0

00:00:27.000 --> 00:00:31.000
当我把这个参数设置为0.01 收敛变得更快了

00:00:31.000 --> 00:00:38.000
向下看你会发现有些越界 但我的控制器迅速收敛到0了

00:00:38.000 --> 00:00:40.000
并且倾向于保持在0.0附近

00:00:40.000 --> 00:00:46.000
PID控制器是控制问题中已有的最好的解决方案之一

00:00:46.000 --> 00:00:48.000
你刚刚就实现了一个

00:00:48.000 --> 00:00:51.000
现在 有个重要问题给你

00:00:51.000 --> 00:00:55.000
我们要如何寻找好的控制增益呢？

00:00:55.000 --> 00:01:01.000
控制增益指的是这些参数tau_p tau_d tan_i

00:01:01.000 --> 00:01:03.000
这里是这节课中我最喜欢的部分

00:01:03.000 --> 00:01:07.000
我的每一个学生都搞定了它 但他们都困惑我为什么执着于它

00:01:07.000 --> 00:01:14.000
不过当他们看见我将要向你展示的东西 并亲手实现它后 也都爱上了它

00:01:14.000 --> 00:01:17.000
问题的答案叫"twiddle"

00:01:17.000 --> 00:01:21.000
Twiddle是我最喜欢的算法 并且用了一辈子

00:01:21.000 --> 00:01:26.000
一些人管它叫"coordinate ascent" 这听上去变得有点复杂的样子

00:01:26.000 --> 00:01:31.000
但我就把它叫做twiddle 因为它形象地描述了算法的核心过程

