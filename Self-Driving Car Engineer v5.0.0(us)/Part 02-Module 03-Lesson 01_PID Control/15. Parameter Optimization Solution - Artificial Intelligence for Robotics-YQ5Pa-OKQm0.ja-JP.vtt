WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:02.422
これが私の回転の実装ですこのルーチンは

00:00:02.422 --> 00:00:04.339
 他のいろいろなアプリケーションにも

00:00:04.339 --> 00:00:07.192
応用できます

00:00:07.193 --> 00:00:09.739
ルーチンにはパラメーターによって決まるものを

00:00:09.739 --> 00:00:11.539
評価する方法が必要です 評価の結果 最小化するべき

00:00:11.539 --> 00:00:13.809
単一の誤差が与えられます

00:00:13.809 --> 00:00:15.660
全部で3つのパラメーターがあります params を 0 に

00:00:15.660 --> 00:00:17.806
設定しますが dparams は 1に設定します

00:00:17.806 --> 00:00:20.956
これはただのカウンタで重要ではありません

00:00:20.956 --> 00:00:23.820
dparams の合計が最初に 0.001 だった

00:00:23.820 --> 00:00:27.371
許容値 tol よりまだ大きければ

00:00:27.371 --> 00:00:29.636
全パラメーターを順に

00:00:29.636 --> 00:00:32.323
dparams で増やします また誤差 err を求め

00:00:32.323 --> 00:00:34.088
初期の誤差で初期化した

00:00:34.088 --> 00:00:35.693
best＿error よりいい値か調べます

00:00:35.693 --> 00:00:38.220
いい値であれば best＿error を保持し

00:00:38.220 --> 00:00:42.433
dparams を増やします値が悪ければ 別の方法を試行します

00:00:42.433 --> 00:00:46.232
まず err を求めます 成功したら

00:00:46.232 --> 00:00:49.603
それを保持し dparams を増やしますここが最後の部分ですが

00:00:49.603 --> 00:00:51.973
成功しなければ古い

00:00:51.973 --> 00:00:54.865
パラメーターベクトルに戻して

00:00:54.865 --> 00:00:58.178
0.9 を掛け dparams を減らしますそしてカウンタを

00:00:58.178 --> 00:01:00.862
増やします デバッグのためのちょっとした

00:01:00.862 --> 00:01:03.525
出力がありパラメーターベクトルを

00:01:03.525 --> 00:01:05.617
返しますベクトルの出力をコメントアウトし

00:01:05.617 --> 00:01:08.470
もう少しこのプログラムで色々と試してみましょう

00:01:08.470 --> 00:01:11.358
twiddle は最良のパラメーターを計算し

00:01:11.358 --> 00:01:13.828
これらのパラメーターで誤差を計算します

00:01:13.828 --> 00:01:15.536
誤差と共にパラメーターを出力すると

00:01:15.536 --> 00:01:18.154
パラメーターベクトルを得ます

00:01:18.154 --> 00:01:20.473
誤差は基本的にゼロです

00:01:20.473 --> 00:01:22.709
では積分項のスイッチを切りましょう

00:01:22.709 --> 00:01:24.682
ちょっとした技があります

00:01:24.682 --> 00:01:28.270
積分項で既に

00:01:28.270 --> 00:01:31.108
調べたかのように最後の dparams [2] を

00:01:31.108 --> 00:01:34.082
0.0 に設定しますこれを実行すると積分項に

00:01:34.082 --> 00:01:36.510
0 を得ます しかし誤差は望んでいた

00:01:36.510 --> 00:01:39.753
最終的な誤差よりいくらか大きいですですから

00:01:39.753 --> 00:01:41.316
誤差を 0 まで減らすには

00:01:41.316 --> 00:01:43.642
積分項が必要なのです微分項も

00:01:43.642 --> 00:01:47.468
同様に削除して何が起こるか見てみましょう

00:01:47.468 --> 00:01:49.363
誤差は本当に大きく

00:01:49.363 --> 00:01:52.963
0.55 という結果が出ますこの大きな誤差は ロボットの

00:01:52.963 --> 00:01:55.046
ドリフトをコメントアウトして

00:01:55.046 --> 00:01:58.305
削除しても維持されます比例コントローラがあってもまだ 0.10 の誤差があります

00:01:58.305 --> 00:02:00.670
再び微分のパラメーターを加えてみます

00:02:00.670 --> 00:02:04.181
まず dparams [1] を削除し

00:02:04.181 --> 00:02:09.827
実行します 0.103 は

00:02:09.827 --> 00:02:15.255
5.7×10⁻¹¹ に減ります

00:02:15.255 --> 00:02:17.268
実質上ゼロです誤差を 0 に減らすための

00:02:17.268 --> 00:02:20.162
微分項の重要性が分かったでしょう

00:02:20.162 --> 00:02:22.534
特にドリフトや積分項がない場合や

00:02:22.534 --> 00:02:26.108
系統的バイアスのあるロボット

00:02:26.108 --> 00:02:28.352
の場合に重要です課題では

00:02:28.352 --> 00:02:29.800
このコードでもう少し

00:02:29.800 --> 00:02:33.800
色々なことができますが今回はここまでです

