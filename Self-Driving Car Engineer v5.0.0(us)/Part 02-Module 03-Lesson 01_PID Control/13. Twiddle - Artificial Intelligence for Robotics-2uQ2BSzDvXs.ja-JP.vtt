WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:04.000
Twiddle では 一連のパラメーターを最適化しようとしています

00:00:04.000 --> 00:00:09.000
そのためには 関数 run() が長所を返さなければなりません

00:00:09.000 --> 00:00:11.000
この長所の値は 平均クロストラック エラーです

00:00:11.000 --> 00:00:16.000
平均クロストラック エラーを最小化するために Twiddle を実装したいとします

00:00:16.000 --> 00:00:21.000
その場合 run の出力は 3 つのパラメーターに依存します

00:00:21.000 --> 00:00:23.000
Twiddle の仕組みはこうなっています

00:00:23.000 --> 00:00:28.000
3 つのターゲット パラメーターのパラメーター ベクトルを作成し ゼロで初期化します

00:00:28.000 --> 00:00:35.000
また 調べたい潜在的に変更するベクトルを作成し 1 で初期化します

00:00:35.000 --> 00:00:39.000
パラメーターを使ってコマンド run( ) を実行し

00:00:39.000 --> 00:00:44.000
出力は全て一番良い誤差 best_err とします

00:00:44.000 --> 00:00:48.000
今度は エラーが小さくなるように p を修正します

00:00:48.000 --> 00:00:51.000
ここで Twiddle が登場します 本当に賢いアルゴリズムだと思います

00:00:51.000 --> 00:00:54.000
これらのパラメーターを順番に見ていきます

00:00:54.000 --> 00:00:58.000
明らかに 3 を書くべきではありません

00:00:58.000 --> 00:01:02.000
まず 調査のために p を増やし

00:01:02.000 --> 00:01:06.000
新しい修正された p に対して新しいエラーを計算します

00:01:06.000 --> 00:01:10.000
新しいエラーが私たちの最高のエラー数よりも優れていれば 2 つのことをします

00:01:10.000 --> 00:01:17.000
まず best_err を err に設定し さらに dp に 1.1 を掛けることで

00:01:17.000 --> 00:01:20.000
dp をわずかに大きい値に変更します

00:01:20.000 --> 00:01:23.000
または 別の方法を試行します

00:01:23.000 --> 00:01:29.000
p から dp を引きます 以前に追加しましたが 2 度追加します

00:01:29.000 --> 00:01:31.000
同じ作業を繰り返しますここで 書き出すことはありません

00:01:31.000 --> 00:01:38.000
エラーが最良のエラーよりも優れているかどうかをチェックし それを保持して dp に 1.1 を掛けます

00:01:38.000 --> 00:01:41.000
しかし これらの両方が失敗し 繰り返した場合

00:01:41.000 --> 00:01:49.000
p[ i ] を元の値に戻します たとえば 0.9 を掛けることによって

00:01:49.000 --> 00:01:54.000
調査の対象を減らします

00:01:54.000 --> 00:01:59.000
これが Twiddle の中核であり それぞれの座標に対して独立しています

00:01:59.000 --> 00:02:03.000
ここで この値においてのみ パラメーターを少し下げます

00:02:03.000 --> 00:02:10.000
解決策を見つけた場合 その解決策を保持するため 調査間隔が さらに増加します

00:02:10.000 --> 00:02:15.000
より良い解決策を見つけることができない場合は 従来の解決策に戻り 調査間隔を減少させます

00:02:15.000 --> 00:02:22.000
dp の合計がしきい値よりも大きい限り すべてを行います

00:02:22.000 --> 00:02:34.000
どこかで dp のいくつかが 0.00001 よりも大きくなっています

00:02:34.000 --> 00:02:36.000
読みにくいですが フォローできればと思います

00:02:36.000 --> 00:02:41.000
これが Twiddle ですこれを絵にしてみましょう

00:02:41.000 --> 00:02:44.000
0 0 0 という 3 つのパラメーターがあります

00:02:44.000 --> 00:02:49.000
最初の繰り返しで パラメーターの 1 つを上げて エラーが改善するかどうかを確認します

00:02:49.000 --> 00:02:51.000
事実であるならば 解決策を保持します

00:02:51.000 --> 00:02:53.000
2 番目のパラメーターに行きますパラメーターを増加させます動作しない可能性があります

00:02:53.000 --> 00:02:56.000
パラメーターを減少させ 解決策が維持される可能性があります

00:02:56.000 --> 00:03:02.000
パラメーターを増加させると パラメーターを増加させても 減少させても 役に立たないことがわかります

00:03:02.000 --> 00:03:06.000
代わりにすることは 元の解決策を保持するものの

00:03:06.000 --> 00:03:09.000
調査間隔を以前より 0.9 倍小さくすることです

00:03:09.000 --> 00:03:14.000
そうすることで 最終的に収束するまで詳細なパラメーターにズームインすることができます

00:03:14.000 --> 00:03:20.000
これは ローカル山登り法ですが 本当に効率的です

