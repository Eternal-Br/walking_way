WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:04.000
いじり回しではパラメータの集合を最適化します

00:00:04.000 --> 00:00:09.000
そのためにはrun関数で
いい値を返す必要があります

00:00:09.000 --> 00:00:12.000
このいい値はクロストラックエラーの
平均値でいいでしょう

00:00:12.000 --> 00:00:16.000
クロストラックエラーの平均を最小化するよう
いじり回しを実装したいと思います

00:00:16.000 --> 00:00:21.000
その状況ではrunの出力は
3つのパラメータに依存します

00:00:21.000 --> 00:00:23.000
いじり回しは次のように動作します

00:00:23.000 --> 00:00:28.000
3つの目標パラメータのベクトルを作り
0で初期化します

00:00:28.000 --> 00:00:35.000
調査したい潜在的変化のベクトルdpも作り
まずは1で初期化します

00:00:35.000 --> 00:00:39.000
これらのパラメータでコマンドrunを実行できます

00:00:39.000 --> 00:00:44.000
出力はすべて一番いい誤差best＿errとします

00:00:44.000 --> 00:00:47.000
誤差をより小さくするようpを修正しましょう

00:00:47.000 --> 00:00:51.000
ここでいじり回しが登場します
これは本当に賢いアルゴリズムです

00:00:51.000 --> 00:00:54.000
これらのパラメータを連続的に調べます

00:00:54.000 --> 00:00:58.000
ここは当然3と書くべきではありません
pの長さを書くべきです

00:00:58.000 --> 00:01:02.000
まず調査の値によりpを増やすことを試みます

00:01:02.000 --> 00:01:06.000
修正したpに対する新たな誤差errを計算します

00:01:06.000 --> 00:01:10.000
新たなerrがこれまでのbest＿errより
いい場合2つのことを行います

00:01:10.000 --> 00:01:13.000
まずbest＿errに新たなerrを設定します

00:01:13.000 --> 00:01:17.000
次にdpをわずかに大きな値へ修正します

00:01:17.000 --> 00:01:20.000
そのためにdpへ1．1を掛けます

00:01:20.000 --> 00:01:23.000
値が悪い場合 他の方法を試みます

00:01:23.000 --> 00:01:28.000
pからdpを減算します　以前一度加算しているので
減算を2回行う必要があります

00:01:28.000 --> 00:01:31.000
すべて書きませんが同様の処理を再び行います

00:01:31.000 --> 00:01:37.000
errがbest＿errよりいいかチェックし
それを保持してdpに1．1を掛けます

00:01:37.000 --> 00:01:41.000
しかしこれらのいずれにも失敗した場合

00:01:41.000 --> 00:01:48.000
p［i］に元の値を設定し調査の値を減らします

00:01:48.000 --> 00:01:53.000
そのためにdpへ0．9を掛けます

00:01:53.000 --> 00:01:59.000
これがいじり回しの核心です
各座標に対し個別に実際に行うのです

00:01:59.000 --> 00:02:03.000
このdpの値でパラメータを少し上下させます

00:02:03.000 --> 00:02:09.000
よりよい解を見つけたらそれを保持し
調査の間隔を増やします

00:02:09.000 --> 00:02:15.000
いい解を見つけることに失敗した場合
元の値に戻し調査の間隔を減らします

00:02:15.000 --> 00:02:22.000
このすべての処理をdpの総和が
閾値より大きい間 行います

00:02:22.000 --> 00:02:33.000
この辺りでdpの総和が
0．00001より大きいとしましょう

00:02:33.000 --> 00:02:36.000
読みにくいですが理解できると思います

00:02:36.000 --> 00:02:40.000
これがいじり回しです
これを図で描いてみましょう

00:02:40.000 --> 00:02:43.000
3つのパラメータ0、0、0があります

00:02:43.000 --> 00:02:48.000
最初のループでパラメータの1つを増やします
さらに誤差を改善するかも調べます

00:02:48.000 --> 00:02:53.000
改善されれば値を保持し
2つ目のパラメータへ移り それを増やします

00:02:53.000 --> 00:02:56.000
ダメなら減らして保持するといった感じです

00:02:56.000 --> 00:03:02.000
増やし続けると増加も減少も
効果がないと分かるかもしれません

00:03:02.000 --> 00:03:06.000
増減の代わりに元の解を保持しますが

00:03:06.000 --> 00:03:09.000
調査の間隔を係数0．9で以前より小さくします

00:03:09.000 --> 00:03:14.000
そうすることで最終的に収束するまで
詳細パラメータを突き詰めていきます

00:03:14.000 --> 00:03:19.000
局所的な山登り法ですが極めて効果的です

