WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.000
下一个根本问题是 有办法避免越界吗？

00:00:05.000 --> 00:00:11.000
如果我们能做到就太好了 因为待在一辆来回摆动的车辆里并不好玩

00:00:11.000 --> 00:00:14.000
事实上 你会晕车的 请相信我

00:00:14.000 --> 00:00:20.000
当我们为Darpa Grand Challenge准备时 我曾在这样的车辆里呆过几个月

00:00:20.000 --> 00:00:23.000
这个窍门叫做 "PD-control"

00:00:23.000 --> 00:00:30.000
在PD-control里 我的转向角度alpha 

00:00:30.000 --> 00:00:33.000
将不仅仅由CTE与控制参数tau_p决定了

00:00:33.000 --> 00:00:36.000
也会与CTE关于时间的导数相关

00:00:36.000 --> 00:00:43.000
这意味着当车辆转向得足以减少CTE时

00:00:43.000 --> 00:00:46.000
它不会继续闷头冲过x轴

00:00:46.000 --> 00:00:51.000
相反它会注意到已经减少了的CTE部分

00:00:51.000 --> 00:00:57.000
CTE随着时间过去变小 它会反方向转动前轮 使车辆朝上方转动 

00:00:57.000 --> 00:01:00.000
这将会让它平缓地接近参考航线

00:01:00.000 --> 00:01:08.000
假设我们设置了恰当的微分增益项——tau_d与比例增益项tau_p

00:01:08.000 --> 00:01:10.000
你会怎么计算这里的导数？

00:01:10.000 --> 00:01:18.000
在时刻t的导数等于 时刻t的CTE 与 时刻t-1的CTE 的差

00:01:18.000 --> 00:01:25.000
除以 时刻t与时刻t-1之间经过的时间

00:01:25.000 --> 00:01:29.000
在我们的代码里 delta_t被设为1 于是我们就能够忽略它

00:01:29.000 --> 00:01:36.000
当前时刻的CTE值与前一时刻的CTE值之差就是这里的时间导数

00:01:36.000 --> 00:01:41.000
我们现在不是按CTE的比例来控制alpha 

00:01:41.000 --> 00:01:47.000
还加入了第二个常数tau_d和CTE的微分项

00:01:47.000 --> 00:01:53.000
让我们来实现它 现在我给"run"函数写了两个参数——param1和param2

00:01:53.000 --> 00:01:58.000
我想要你实现这个控制器 

00:01:58.000 --> 00:02:03.000
它用param1作为比例系数 param2来作为微分系数

00:02:03.000 --> 00:02:08.000
然后迭代100次 看看会发生什么

00:02:08.000 --> 00:02:13.000
我现在用比例参数0.2和微分参数3.0

00:02:13.000 --> 00:02:16.000
来运行我的新控制器

00:02:16.000 --> 00:02:22.000
然后我得到了一个能让y值渐渐收敛到0的序列

00:02:22.000 --> 00:02:29.000
奇迹出现了 随着时间过去 它接近0并停留在0

00:02:29.000 --> 00:02:32.000
这是我们的比例控制器所无法达成的

00:02:32.000 --> 99:59:59.999
请写出来程序 让我们测试它

