WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.000
在twiddle里 我们试图去优化一个参数集合

00:00:04.000 --> 00:00:09.000
为了这么做 我们"run"方程需要返回goodness

00:00:09.000 --> 00:00:11.000
goodness值可能是全部CTE的均值

00:00:11.000 --> 00:00:16.000
假定我实现twiddle的目标是最小化平均CTE

00:00:16.000 --> 00:00:21.000
如果是这种情况 那么run的输出就依赖于三个参数了

00:00:21.000 --> 00:00:23.000
twiddle是这样运作的

00:00:23.000 --> 00:00:28.000
为3个目标参数声明一个3维零向量 

00:00:28.000 --> 00:00:35.000
再声明一个3维向量 初始化为你想要探索的范围 这里是1

00:00:35.000 --> 00:00:39.000
然后你可以调用"run" 并传入参数向量

00:00:39.000 --> 00:00:44.000
无论它输出声明 这就是目前最好的误差

00:00:44.000 --> 00:00:48.000
我们希望能修改向量p使得误差变小

00:00:48.000 --> 00:00:51.000
这就是twiddle大展身手的地方了 我认为这是一个很聪明的算法

00:00:51.000 --> 00:00:54.000
我们按顺序遍历这些参数

00:00:54.000 --> 00:00:58.000
显然你不应该在这里写3 而是要写p的长度

00:00:58.000 --> 00:01:02.000
首先我们尝试把p增加一个单位的探索值

00:01:02.000 --> 00:01:06.000
计算新的参数p所产生的误差

00:01:06.000 --> 00:01:10.000
如果新的误差比目前最好的误差要好 那我们做两件事

00:01:10.000 --> 00:01:17.000
一是把best_err更新为err 然后我们把dp的值稍微增大

00:01:17.000 --> 00:01:20.000
自乘1.1就行

00:01:20.000 --> 00:01:23.000
否则 我们就尝试另一种方式

00:01:23.000 --> 00:01:29.000
我们要从p中减掉dp 此处要减掉两个单位 因为之前已经加上一个单位了

00:01:29.000 --> 00:01:31.000
然后再做一遍之前的事情 我就不再写一遍了

00:01:31.000 --> 00:01:38.000
我们会检查新的误差会不会好些 如果是就保留它 并让dp自乘1.1

00:01:38.000 --> 00:01:41.000
如果这两处都失败了 —— 那里的以及这里的 ——

00:01:41.000 --> 00:01:49.000
我们会让p[i]变回原本的值 并且降低探索的范围

00:01:49.000 --> 00:01:54.000
比如说 自乘0.9

00:01:54.000 --> 00:01:59.000
这就是twiddle的核心过程 它实际就是在遍历各个孤立的参数

00:01:59.000 --> 00:02:03.000
根据这里值来移动参数

00:02:03.000 --> 00:02:10.000
如果找到了一个更好的组合 就保留它 并提高探索范围

00:02:10.000 --> 00:02:15.000
如果没能找到更好的组合 它回溯到原先的参数 并降低探索范围

00:02:15.000 --> 00:02:22.000
只要dp之和大于阈值 我们就会不断重复以上步骤

00:02:22.000 --> 00:02:34.000
在这个位置声明while循环 条件是sum(dp)&gt;0.00001

00:02:34.000 --> 00:02:36.000
这很难看明白 但我希望你能跟得上

00:02:36.000 --> 00:02:41.000
这就是twiddle了 让我用图像来演示

00:02:41.000 --> 00:02:44.000
我们有三个参数 0,0,0

00:02:44.000 --> 00:02:49.000
在第一次迭代 我们增大其中一个参数 看看误差有无改进

00:02:49.000 --> 00:02:51.000
如果有改进 就保留修改

00:02:51.000 --> 00:02:53.000
然后转向第二参数 增大它 这也许行不通

00:02:53.000 --> 00:02:56.000
接着我们减小它 也许可以保留 以此类推

00:02:56.000 --> 00:03:02.000
随着我们不断增大探索范围 也许会发现无论是上调还是下调参数都没用了

00:03:02.000 --> 00:03:06.000
现在要做的事情是 回溯到原先的组合 

00:03:06.000 --> 00:03:09.000
并且通过乘以0.9来降低探索范围

00:03:09.000 --> 00:03:14.000
这样做的话 我们能通过缩放得到越来越精确的参数 直到收敛

00:03:14.000 --> 00:03:20.000
这是一种局部爬山算法 但是它非常非常高效

