WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:02.000
何か気づきましたか

00:00:02.000 --> 00:00:08.000
通常の操縦モードの運転で目標から離れたトラジェクトリーへ導かれるなら

00:00:08.000 --> 00:00:14.000
長時間経っても目標には近付けないということに気づくと思います

00:00:14.000 --> 00:00:20.000
このため 右へ右へと操縦し始めます 時間の経過とともに このバイアスが補正されます

00:00:20.000 --> 00:00:26.000
結果 運転時にハンドルを操作することにより 車がこちらの方向に進みます

00:00:26.000 --> 00:00:30.000
このように操作するには 大きなエラーが持続する状況が必要です

00:00:30.000 --> 00:00:35.000
これは経時的なクロストラックエラーの総和または積分で計測されます

00:00:35.000 --> 00:00:41.000
新しいコントローラーを作ってみます 操縦はクロストラックエラーに比例します

00:00:41.000 --> 00:00:45.000
その前に クロストラックエラーの微分に同様に比例します

00:00:45.000 --> 00:00:50.000
ただし 観測したすべてのクロストラックエラーの積分

00:00:50.000 --> 00:00:53.000
または総和と呼ばれるものにも比例します

00:00:53.000 --> 00:00:57.000
この項は興味深いです一定のクロストラックエラーが 0.8 あるとして

00:00:57.000 --> 00:01:02.000
総和は各時間単位で 0.8 ずつ増えひたすら大きくなります

00:01:02.000 --> 00:01:05.000
最終的にはロボットの動きを補正することになります

00:01:05.000 --> 00:01:07.000
これが PID 制御と呼ばれるものです

00:01:07.000 --> 00:01:14.000
P は比例項 (proportional) D は微分項 (differential) I は積分項 (integral) を表します

00:01:14.000 --> 00:01:17.000
PID です

00:01:17.000 --> 00:01:21.000
実装してみましょう 積分されたクロストラックエラー

00:01:21.000 --> 00:01:24.000
は観測したすべてのクロストラックエラーの総和です

00:01:24.000 --> 00:01:27.000
これをコードに実装します

00:01:27.000 --> 00:01:31.000
積分の係数を 0.004 とします

00:01:31.000 --> 00:01:36.000
なぜこの値にしたかは気にしないでください賢明な選択だったことがすぐにわかります

00:01:36.000 --> 00:01:44.000
コードを実行しましょう このパラメーターも使えるようにコードを変更してください

