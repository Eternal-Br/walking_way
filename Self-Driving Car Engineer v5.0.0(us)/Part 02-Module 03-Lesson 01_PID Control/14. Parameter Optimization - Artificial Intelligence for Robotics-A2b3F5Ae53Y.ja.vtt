WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:06.000
3つのパラメータのパラメータベクトルを
入力するようにrunプロシージャを修正しました

00:00:06.000 --> 00:00:11.000
理由はあとで説明しますが
デフォルトでFalseのprintflagを設けました

00:00:11.000 --> 00:00:17.000
前回と同じ初期パラメータのspeed、err、
crosstrack＿error、int＿crosstrack＿error、

00:00:17.000 --> 00:00:19.000
5番目のパラメータを設定し

00:00:19.000 --> 00:00:24.000
パラメータ選択の効果が誤差にどう影響するか
もう少し明らかにするようにします

00:00:24.000 --> 00:00:28.000
総数の式をN＊2に設定します

00:00:28.000 --> 00:00:34.000
crosstrack＿errorの総和を求めるには
ステップNから数えればいいだけです

00:00:34.000 --> 00:00:38.000
アルゴリズムがNステップを0へ変換させるので
crosstrack＿errorは計算しません

00:00:38.000 --> 00:00:44.000
ステップ101から200までにcrosstrack＿errorが
どう劇的に変化するか知りたいのです

00:00:44.000 --> 00:00:50.000
printflagが設定されていればラジアンではなく
度数で出力するように設定しました

00:00:50.000 --> 00:00:53.000
ここでerrの平均を返します

00:00:53.000 --> 00:00:55.500
ではいじり回しのルーチンを書きましょう

00:00:55.500 --> 00:00:59.000
最適なパラメータを見つけて
それらを返すルーチンです

00:00:59.000 --> 00:01:04.500
閾値と許容値が0．001である
twiddleを実装してください

00:01:04.500 --> 00:01:10.000
twiddleではパラメータと
クロストラックエラーが出力されます

00:01:10.000 --> 00:01:15.000
クロストラックエラーはすぐに0になります

00:01:15.000 --> 00:01:20.000
何回か繰り返すと私の実装では107番目で

00:01:20.000 --> 00:01:25.000
クロストラックエラーが
3．611×10⁻¹⁷になりました

00:01:25.000 --> 00:01:29.000
典型的な制御の出力があります
位置x、y、方向があり

00:01:29.000 --> 00:01:33.000
ドリフトは一定です
これは一定のドリフトのパラメータです

00:01:33.000 --> 00:01:37.000
初期の誤差は平均で195です

00:01:37.000 --> 00:01:43.000
しかし時間が少し過ぎるとyの誤差が
10⁻⁶に減ることが分かります

00:01:43.000 --> 00:01:45.000
そして減ったままになります

00:01:45.000 --> 00:01:49.000
コントローラが目標位置の追跡において
いい結果を出している証拠です

00:01:49.000 --> 00:01:55.000
時間ステップが100から200の間の
最終的な制御誤差は3．611です

00:01:55.000 --> 00:02:00.000
いじり回しを実装したかったので
これまでの設定を変えるかもしれませんが

00:02:00.000 --> 00:02:05.000
実行すればPIDコントローラで使える
最適なパラメータが分かるでしょう

00:02:05.000 --> 00:02:10.500
最終的な制御誤差は確認したように
かなり小さくなるはずです

