WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.422
这里是我的twiddle实现

00:00:02.422 --> 00:00:04.339
你可以保存这个程序

00:00:04.339 --> 00:00:07.192
并且迁移到很多不同的应用去

00:00:07.193 --> 00:00:09.739
它只需要一种评估对象的方法

00:00:09.739 --> 00:00:11.539
所以对象应该依赖于参数

00:00:11.539 --> 00:00:13.809
并且能返回你想要优化的误差

00:00:13.809 --> 00:00:15.660
我们总共有3个参数

00:00:15.660 --> 00:00:17.806
我把他们设置为0 但是把dparams设置为1

00:00:17.806 --> 00:00:20.956
这只是个计数器 不重要

00:00:20.956 --> 00:00:23.820
只要dparams之和 仍大于初始化为0.001的tol 

00:00:23.820 --> 00:00:27.371
那么它就会有序地遍历全部参数

00:00:27.371 --> 00:00:29.636
一一加上对应的dparams

00:00:29.636 --> 00:00:32.323
看看输出的err相对于

00:00:32.323 --> 00:00:34.088
当前的best_error来说有没有改进

00:00:34.088 --> 00:00:35.693
最早的best_error在这里初始化了

00:00:35.693 --> 00:00:38.220
如果确实改进了我会更新best_error 并且增大dparams

00:00:38.220 --> 00:00:42.433
否则我会尝试另一个方向

00:00:42.433 --> 00:00:46.232
一 计算出err 如果有改进

00:00:46.232 --> 00:00:49.603
保留它 并增大dparams

00:00:49.603 --> 00:00:51.973
这里是最后一种情况 如果都不成功

00:00:51.973 --> 00:00:54.865
将回溯到旧的参数向量

00:00:54.865 --> 00:00:58.178
并且自乘0.9以降低dparams 

00:00:58.178 --> 00:01:00.862
之后让计数器增加1 

00:01:00.862 --> 00:01:03.525
这里是我用于debug的print语句 最后返回参数向量

00:01:03.525 --> 00:01:05.617
现在把这里注释掉

00:01:05.617 --> 00:01:08.470
然后来这里玩玩

00:01:08.470 --> 00:01:11.358
我让twiddle计算出最佳参数

00:01:11.358 --> 00:01:13.828
然后用它们计算出误差

00:01:13.828 --> 00:01:15.536
并且参数和误差都打印出来

00:01:15.536 --> 00:01:18.154
于是我在控制台得到了参数向量

00:01:18.154 --> 00:01:20.473
还有基本上是0的误差

00:01:20.473 --> 00:01:22.709
现在来把积分项去掉

00:01:22.709 --> 00:01:24.682
这里有个小技巧

00:01:24.682 --> 00:01:28.270
只要把dparams[2] 设为0就行了

00:01:28.270 --> 00:01:31.108
这就好像我已经学到最后的积分增益一样

00:01:31.108 --> 00:01:34.082
当我运行这段代码

00:01:34.082 --> 00:01:36.510
我得到了0积分增益 

00:01:36.510 --> 00:01:39.753
但这个误差比期望的最终误差要大些

00:01:39.753 --> 00:01:41.316
其原因是积分项对于

00:01:41.316 --> 00:01:43.642
让误差接近0来说是必要的

00:01:43.642 --> 00:01:47.468
现在把微分项移除掉 看看会发生什么

00:01:47.468 --> 00:01:49.363
结果是出现了很大的误差 大约0.55

00:01:49.363 --> 00:01:52.963
这个巨大的误差即使在我把

00:01:52.963 --> 00:01:55.046
drift这行给注释掉了也仍然保持着

00:01:55.046 --> 00:01:58.305
如果只有比例控制器

00:01:58.305 --> 00:02:00.670
你仍会看到大约0.10的误差

00:02:00.670 --> 00:02:04.181
但若是我把微分项再加回去

00:02:04.181 --> 00:02:09.827
也就是说把dparams[1]这行去掉

00:02:09.827 --> 00:02:15.255
那0.103的误差就会变成5.7e-11

00:02:15.255 --> 00:02:17.268
这大约就是0了

00:02:17.268 --> 00:02:20.162
所以你能看到微分项对于

00:02:20.162 --> 00:02:22.534
把误差降低到0是多么重要 这是没有drift的情况

00:02:22.534 --> 00:02:26.108
而积分项则是针对

00:02:26.108 --> 00:02:28.352
带有系统偏差的robot

00:02:28.352 --> 00:02:29.800
你可以再把玩一下这些代码 好应对作业

00:02:29.800 --> 00:02:33.800
不过这节课就这样结束了吧

