WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:02.000
いじり回しの実装例です

00:00:02.000 --> 00:00:06.000
他のいろいろなアプリケーションにも
このルーチンを応用できます

00:00:06.000 --> 00:00:10.000
ルーチンにはパラメータによって決まる何かを
評価する方法が必要です

00:00:10.000 --> 00:00:14.000
評価の結果 最小化するべき単一の誤差を与えます

00:00:14.000 --> 00:00:18.000
全部で3つのパラメータがあります
paramsを0に設定しますが

00:00:18.000 --> 00:00:21.000
dparamsは1に設定します
これはただのカウンタで重要ではありません

00:00:21.000 --> 00:00:27.000
dparamsの総和が0．001に
初期化した許容値tolよりまだ大きければ

00:00:27.000 --> 00:00:31.000
全パラメータを連続的にdparamsで増やします

00:00:31.000 --> 00:00:36.000
また誤差errを求め初期の誤差で初期化した
best＿errorよりいい値か調べます

00:00:36.000 --> 00:00:39.000
いい値であればbest＿errorを保持し
dparamsを増やします

00:00:39.000 --> 00:00:42.000
値が悪ければ他の指示を試みます

00:00:42.000 --> 00:00:45.000
まずerrを求めます

00:00:45.000 --> 00:00:49.000
成功したらそれを保持しdparamsを増やします

00:00:49.000 --> 00:00:55.000
ここが最後の部分ですが成功しなければ
古いパラメータベクトルに戻して

00:00:55.000 --> 00:00:59.000
0．9を掛けdparamsを減らします
そしてカウンタを増やします

00:00:59.000 --> 00:01:04.000
デバッグのためのちょっとした出力があり
パラメータベクトルを返します

00:01:04.000 --> 00:01:08.000
ベクトルの出力をコメントアウトし
もう少しこのプログラムで楽しみましょう

00:01:08.000 --> 00:01:11.000
いじり回しは最良のパラメータを計算し

00:01:11.000 --> 00:01:15.000
これらのパラメータで誤差を計算します

00:01:15.000 --> 00:01:18.000
誤差と共にパラメータを出力すると
パラメータベクトルを得ます

00:01:18.000 --> 00:01:20.000
誤差は基本的にゼロです

00:01:20.000 --> 00:01:23.000
では積分項のスイッチを切りましょう

00:01:23.000 --> 00:01:25.000
ちょっとした技があります

00:01:25.000 --> 00:01:32.000
積分項ですでに調べたかのように
最後のdparams［2］を0．0に設定します

00:01:32.000 --> 00:01:35.000
これを実行すると積分項に0を得ます

00:01:35.000 --> 00:01:40.000
しかし誤差は望んでいた最終的な誤差より
いくらか大きいです

00:01:40.000 --> 00:01:43.000
誤差を0まで減らすには積分項が必要なのです

00:01:43.000 --> 00:01:47.000
微分項も同様に削除して
何が起こるか見てみましょう

00:01:47.000 --> 00:01:51.000
誤差は本当に大きく0．55という結果が出ます

00:01:51.000 --> 00:01:56.000
この大きな誤差はロボットのドリフトを
コメントアウトして削除しても維持されます

00:01:56.000 --> 00:02:00.000
比例コントローラがあっても
まだ0．10の誤差があります

00:02:00.000 --> 00:02:04.000
再び微分のパラメータを加えてみます

00:02:04.000 --> 00:02:09.000
まずdparams［1］を削除し実行します

00:02:09.000 --> 00:02:15.000
0．103は5．7×10⁻¹¹に減ります

00:02:15.000 --> 00:02:17.000
実質上ゼロです

00:02:17.000 --> 00:02:22.000
誤差を0に減らすための
微分項の重要性が分かったでしょう

00:02:22.000 --> 00:02:28.000
特にドリフトや積分項がない場合や
系統的バイアスのあるロボットの場合に重要です

00:02:28.000 --> 00:02:33.000
課題ではこのコードでもう少し遊べますが
今回はここまでです

