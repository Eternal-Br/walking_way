WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:03.000
では実際にコントローラを実装しましょう

00:00:03.000 --> 00:00:08.000
ここに用意したコードがあります
おなじみのclass robotです

00:00:08.000 --> 00:00:13.000
initがあります
いつもどおりset関数を使って位置を設定します

00:00:13.000 --> 00:00:18.000
steering＿noiseとdistance＿noiseです
もうおなじみですね

00:00:18.000 --> 00:00:22.000
すぐには使いませんがdriftと呼ばれるものもあり
今後 役に立つでしょう

00:00:22.000 --> 00:00:28.000
これまでずっと実装してきた
moveコマンドがあります

00:00:28.000 --> 00:00:33.000
floatを使って座標の出力を少し改善しました

00:00:33.000 --> 00:00:38.000
制御パラメータを引数とする
runコマンドを実装してください

00:00:38.000 --> 00:00:43.000
この制御パラメータはクロストラックエラーに
比例する操舵角の応答を調整します

00:00:43.000 --> 00:00:48.000
ロボットの初期位置は（0．0，1．0，0．0）で
速度は1です

00:00:48.000 --> 00:00:51.000
100ステップのシミュレーションを行ってください

00:00:51.000 --> 00:00:53.000
予測されることをお話しします

00:00:53.000 --> 00:00:57.000
ロボットの初期位置はx軸から1離れています

00:00:57.000 --> 00:01:00.000
x軸に沿って運転させたいとします

00:01:00.000 --> 00:01:04.000
yの値はクロストラックエラーと同じです

00:01:04.000 --> 00:01:08.000
yの値に比例して反対に向きを変えさせます

00:01:08.000 --> 00:01:14.000
つまりP制御の応答の強さを設定する
τパラメータを使います

00:01:14.000 --> 00:01:19.000
ロボットをx軸へ向かわせますが
その向きで運転すると行き過ぎてしまいます

00:01:19.000 --> 00:01:22.000
向きを変えて元に戻します

00:01:22.000 --> 00:01:26.000
これを行うため800ステップの
シミュレーションを実行してください

00:01:26.000 --> 00:01:28.000
比例項を使用します

00:01:28.000 --> 00:01:34.000
この比例項はクロストラックエラーyに
比例する操舵角αを設定します

00:01:34.000 --> 00:01:40.000
コードをここへ入力し終わったら
係数0．1で実行します

00:01:40.000 --> 00:01:44.000
これが生成してほしい出力です　100行あります

00:01:44.000 --> 00:01:47.000
ロボット位置のyが1から始まっていると分かります

00:01:47.000 --> 00:01:53.000
そのうちyは減って負の領域に入ります

00:01:53.000 --> 00:01:56.000
右側に対応する操舵の向きがあります

00:01:56.000 --> 00:02:02.000
進んでいくとyが正の領域に戻ることが分かります

00:02:02.000 --> 00:02:07.000
ロボットが基準軌道のx軸方向で
緩やかに軌道をまたぐ様子が分かります

00:02:07.000 --> 00:02:09.000
これを実装してください

