{
  "data": {
    "lesson": {
      "id": 626042,
      "key": "f035a45d-6203-4947-8175-6095862204d3",
      "title": "TensorFlow",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "The Principal Scientist at Google Brain introduces you to deep learning and Tensorflow, Google's deep learning framework.\n",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/f035a45d-6203-4947-8175-6095862204d3/626042/1538943206821/TensorFlow+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/f035a45d-6203-4947-8175-6095862204d3/626042/1538943199234/TensorFlow+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 654023,
          "key": "db4d900c-d896-4da7-baf2-3883160db403",
          "title": "Deep Learning Frameworks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "db4d900c-d896-4da7-baf2-3883160db403",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 663264,
              "key": "0fbfae55-b96b-4bc4-a125-abeaf6ca0f5d",
              "title": "03 Deep Learning A05 Deep Learning Foundations",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Fw6cM2mpfcs",
                "china_cdn_id": "Fw6cM2mpfcs.mp4"
              }
            }
          ]
        },
        {
          "id": 196497,
          "key": "31385d98-a620-495e-b7fd-df311062c240",
          "title": "Introduction to Deep Neural Networks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "31385d98-a620-495e-b7fd-df311062c240",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197187,
              "key": "abe1eb83-392c-472c-8005-4afc233b7e35",
              "title": "Introduction To Deep Learning",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7xRwuECaXBs",
                "china_cdn_id": "7xRwuECaXBs.mp4"
              }
            }
          ]
        },
        {
          "id": 101784,
          "key": "63798118150923",
          "title": "What is Deep Learning?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118150923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306093,
              "key": "e4824234-83fe-4c2b-8afa-457586a38467",
              "title": "What Is Deep Learning",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "[Deep Learning on Wikipedia](https://en.wikipedia.org/wiki/Deep_learning)",
              "video": {
                "youtube_id": "INt1nULYPak",
                "china_cdn_id": "INt1nULYPak.mp4"
              }
            }
          ]
        },
        {
          "id": 77649,
          "key": "63798118170923",
          "title": "Solving Problems - Big and Small",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118170923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306094,
              "key": "a9880f43-907d-4af4-aef3-dbb47276ab04",
              "title": "Solving Problems - Big And Small",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WHcRQMGSbqg",
                "china_cdn_id": "WHcRQMGSbqg.mp4"
              }
            }
          ]
        },
        {
          "id": 96698,
          "key": "63798118420923",
          "title": "Let's Get Started!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118420923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306095,
              "key": "1ee0e03c-f12f-473d-af22-f277521da000",
              "title": "Let'S Get Started",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Note: The video has a misspelling of Kunijiko *Fukushima's* name for his Neocognitron.",
              "video": {
                "youtube_id": "ySIDqaXLhHw",
                "china_cdn_id": "ySIDqaXLhHw.mp4"
              }
            }
          ]
        },
        {
          "id": 195247,
          "key": "a8adf8ea-39b6-4fa3-ac26-0870f1ef6ae8",
          "title": "Installing TensorFlow",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a8adf8ea-39b6-4fa3-ac26-0870f1ef6ae8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 198090,
              "key": "107f5fc6-255e-43f5-81ce-dfefe81af3d3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/58116cd8_maxresdefault/maxresdefault.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/107f5fc6-255e-43f5-81ce-dfefe81af3d3",
              "caption": "",
              "alt": null,
              "width": 1280,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 195248,
              "key": "3f2cfe89-b94e-4a64-aaec-1c5b8fe1e621",
              "title": " ",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Throughout this lesson, you'll apply your knowledge of neural networks on real datasets using [TensorFlow](https://www.tensorflow.org/) [(link for China)](http://www.tensorfly.cn/), an open source Deep Learning library created by Google.\n\n\nYou’ll use TensorFlow to classify images from the notMNIST dataset - a dataset of images of English letters from A to J.  You can see a few example images below.",
              "instructor_notes": ""
            },
            {
              "id": 196559,
              "key": "8fb93816-acd9-4c45-b8c6-790e5ee16329",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/58051e40_notmnist/notmnist.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8fb93816-acd9-4c45-b8c6-790e5ee16329",
              "caption": "",
              "alt": null,
              "width": 693,
              "height": 334,
              "instructor_notes": null
            },
            {
              "id": 197018,
              "key": "a3558fa4-624f-4fd2-bb69-094e6e2c45ae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Your goal is to automatically detect the letter based on the image in the dataset.  You’ll be working on your own computer for this lab, so, first things first, install TensorFlow!",
              "instructor_notes": ""
            },
            {
              "id": 195252,
              "key": "55b5d882-837c-4aa0-8d32-7febaa42f930",
              "title": " ",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Install\n## OS X, Linux, Windows\n### Prerequisites\n*Intro to TensorFlow* requires [Python 3.4 or higher](https://www.python.org/downloads/) and [Anaconda](https://www.anaconda.com/distribution/).  If you don't meet all of these requirements, please install the appropriate package(s).  \n### Install TensorFlow\nYou're going to use an Anaconda environment for this class.  If you're unfamiliar with Anaconda environments, check out the [official documentation](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html). More information, tips, and troubleshooting for installing tensorflow on Windows can be found [here](https://www.tensorflow.org/install/install_windows).\n\n\n**Note:** If you've already created the environment for Term 1, you shouldn't need to do so again here!\n\nRun the following commands to setup your environment:\n```sh\nconda create --name=IntroToTensorFlow python=3 anaconda\nsource activate IntroToTensorFlow\nconda install -c conda-forge tensorflow\n```\nThat's it!  You have a working environment with TensorFlow.  Test it out with the code in the *Hello, world!* section below.\n## Docker on Windows\n\nDocker instructions were offered prior to the availability of a stable Windows installation via pip or Anaconda.  Please try Anaconda first, Docker instructions have been retained as an alternative to an installation via Anaconda.\n\n### Install Docker\nDownload and install Docker from the [official Docker website](https://docs.docker.com/engine/installation/windows/).\n### Run the Docker Container\nRun the command below to start a jupyter notebook server with TensorFlow:\n```sh\ndocker run -it -p 8888:8888 gcr.io/tensorflow/tensorflow\n```\n*Users in China should use the `b.gcr.io/tensorflow/tensorflow` instead of `gcr.io/tensorflow/tensorflow`*\n\nYou can access the jupyter notebook at [localhost:8888](http://localhost:8888).  The server includes 3 examples of TensorFlow notebooks, but you can create a new notebook to test all your code.\n# Hello, world!\nTry running the following code in your Python console to make sure you have TensorFlow properly installed.  The console will print \"Hello, world!\" if TensorFlow is installed.  Don’t worry about understanding what it does.  You’ll learn about it in the next section.\n```python\nimport tensorflow as tf\n\n# Create TensorFlow object called tensor\nhello_constant = tf.constant('Hello World!')\n\nwith tf.Session() as sess:\n    # Run the tf.constant operation in the session\n    output = sess.run(hello_constant)\n    print(output)\n\n```\n#### Errors\nIf you're getting the error `tensorflow.python.framework.errors.InvalidArgumentError: Placeholder:0 is both fed and fetched`, you're running an older version of TensorFlow.  Uninstall TensorFlow, and reinstall it using the instructions above.  For more solutions, check out the [Common Problems](https://www.tensorflow.org/get_started/os_setup#common_problems) section.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 195253,
          "key": "83f16208-ff1a-4179-aef7-c3f079bb5f9c",
          "title": "Hello, Tensor World!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "83f16208-ff1a-4179-aef7-c3f079bb5f9c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 195257,
              "key": "e7ea8b55-5e60-4bbc-bbcf-d190654270d6",
              "title": " ",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Hello, Tensor World!\nLet’s analyze the Hello World script you ran. For reference, I’ve added the code below.\n```python\nimport tensorflow as tf\n\n# Create TensorFlow object called hello_constant\nhello_constant = tf.constant('Hello World!')\n\nwith tf.Session() as sess:\n    # Run the tf.constant operation in the session\n    output = sess.run(hello_constant)\n    print(output)\n```\n## Tensor\nIn TensorFlow, data isn’t stored as integers, floats, or strings.  These values are encapsulated in an object called a tensor.  In the case of `hello_constant = tf.constant('Hello World!')`, `hello_constant` is a 0-dimensional string tensor, but tensors come in a variety of sizes as shown below:\n```python\n# A is a 0-dimensional int32 tensor\nA = tf.constant(1234) \n# B is a 1-dimensional int32 tensor\nB = tf.constant([123,456,789]) \n# C is a 2-dimensional int32 tensor\nC = tf.constant([ [123,456,789], [222,333,444] ])\n```\n[`tf.constant()`](https://www.tensorflow.org/api_docs/python/tf/constant) is one of many TensorFlow operations you will use in this lesson.  The tensor returned by [`tf.constant()`](https://www.tensorflow.org/api_docs/python/tf/constant) is called a constant tensor, because the value of the tensor never changes.\n## Session\nTensorFlow’s api is built around the idea of a [computational graph](https://medium.com/tebs-lab/deep-neural-networks-as-computational-graphs-867fcaa56c9), a way of visualizing a mathematical process.  Let’s take the TensorFlow code you ran and turn that into a graph:",
              "instructor_notes": ""
            },
            {
              "id": 197716,
              "key": "33f8ba4e-26f9-4f69-8fd6-7e0500fe4117",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/580feadb_session/session.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/33f8ba4e-26f9-4f69-8fd6-7e0500fe4117",
              "caption": "",
              "alt": null,
              "width": 697,
              "height": 404,
              "instructor_notes": null
            },
            {
              "id": 196228,
              "key": "43ef73c0-07e8-4733-a856-9bbba9eaf9c3",
              "title": " ",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A \"TensorFlow Session\", as shown above, is an environment for running a graph.  The session is in charge of allocating the operations to GPU(s) and/or CPU(s), including remote machines. Let’s see how you use it.\n```python\nwith tf.Session() as sess:\n    output = sess.run(hello_constant)\n    print(output)\n\n```\nThe code has already created the tensor, `hello_constant`, from the previous lines.  The next step is to evaluate the tensor in a session.\n\n\nThe code creates a session instance, `sess`, using [`tf.Session`](https://www.tensorflow.org/api_docs/python/tf/Session). The [`sess.run()`](https://www.tensorflow.org/api_docs/python/tf/Session#run) function then evaluates the tensor and returns the results.\n\nAfter you run the above, you will see the following printed out:\n\n```sh\n'Hello World!'\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 626388,
          "key": "3746ed96-bb13-4e2b-8f43-ca97cdb534b3",
          "title": "Quiz: Tensorflow Input",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3746ed96-bb13-4e2b-8f43-ca97cdb534b3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626389,
              "key": "3adfcda2-24de-4fd8-aee7-836523ab6c4a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Input\nIn the last section, you passed a tensor into a session and it returned the result.  What if you want to use a non-constant?  This is where [`tf.placeholder()`](https://www.tensorflow.org/api_docs/python/tf/placeholder) and `feed_dict` come into place.  In this section, you'll go over the basics of feeding data into TensorFlow.\n## tf.placeholder()\nSadly you can’t just set `x` to your dataset and put it in TensorFlow, because over time you'll want your TensorFlow model to take in different datasets with different parameters.  You need [`tf.placeholder()`](https://www.tensorflow.org/api_docs/python/tf/placeholder)!  \n\n[`tf.placeholder()`](https://www.tensorflow.org/api_docs/python/tf/placeholder) returns a tensor that gets its value from data passed to the [`tf.session.run()`](https://www.tensorflow.org/api_docs/python/tf/Session#run) function, allowing you to set the input right before the session runs.\n## Session’s feed_dict\n```python\nx = tf.placeholder(tf.string)\n\nwith tf.Session() as sess:\n    output = sess.run(x, feed_dict={x: 'Hello World'})\n```\nUse the `feed_dict` parameter in [`tf.session.run()`](https://www.tensorflow.org/api_docs/python/tf/Session#run) to set the placeholder tensor.  The above example shows the tensor `x` being set to the string `\"Hello, world\"`.  It's also possible to set more than one tensor using `feed_dict` as shown below.\n```python\nx = tf.placeholder(tf.string)\ny = tf.placeholder(tf.int32)\nz = tf.placeholder(tf.float32)\n\nwith tf.Session() as sess:\n    output = sess.run(x, feed_dict={x: 'Test String', y: 123, z: 45.67})\n```\n**Note:** If the data passed to the `feed_dict` doesn’t match the tensor type and can’t be cast into the tensor type, you’ll get  the error “`ValueError: invalid literal for`...”.\n## Quiz\nLet's see how well you understand [`tf.placeholder()`](https://www.tensorflow.org/api_docs/python/tf/placeholder) and `feed_dict`.  The code below throws an error, but I want you to make it return the number `123`.  Change line 11, so that the code returns the number `123`.",
              "instructor_notes": ""
            },
            {
              "id": 626390,
              "key": "9c084813-931a-43af-88b2-b3205c01b06c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewa0a28bfc",
              "pool_id": "jupyter",
              "view_id": "a0a28bfc-ee09-45e3-84c3-63614c02ed3e",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": ""
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 626397,
          "key": "3b4eb2a8-49e0-479d-841d-b4c19622858a",
          "title": "Quiz: Tensorflow Math",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3b4eb2a8-49e0-479d-841d-b4c19622858a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626398,
              "key": "29519e4f-a9f9-40b1-9d77-94ce127839e7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# TensorFlow Math\nGetting the input is great, but now you need to use it.  You're going to use basic math functions that everyone knows and loves - add, subtract, multiply, and divide - with tensors. (There's many more math functions you can check out in the [documentation](https://www.tensorflow.org/api_docs/python/tf/math).)\n## Addition\n```python\nx = tf.add(5, 2)  # 7\n```\nYou’ll start with the add function.  The [`tf.add()`](https://www.tensorflow.org/api_guides/python/math_ops) function does exactly what you expect it to do.  It takes in two numbers, two tensors, or one of each, and returns their sum as a tensor.\n## Subtraction and Multiplication\nHere’s an example with subtraction and multiplication.\n```python\nx = tf.subtract(10, 4) # 6\ny = tf.multiply(2, 5)  # 10\n```\nThe `x` tensor will evaluate to `6`, because `10 - 4 = 6`.  The `y` tensor will evaluate to `10`, because `2 * 5 = 10`.  That was easy!\n\n## Converting types\n\nIt may be necessary to convert between types to make certain operators work together. For example, if you tried the following, it would fail with an exception:\n```\ntf.subtract(tf.constant(2.0),tf.constant(1))  # Fails with ValueError: Tensor conversion requested dtype float32 for Tensor with dtype int32: \n```\nThat's because the constant `1` is an integer but the constant `2.0` is a floating point value and `subtract` expects them to match.\n\nIn cases like these, you can either make sure your data is all of the same type, or you can cast a value to another type. In this case, converting the `2.0` to an integer before subtracting, like so, will give the correct result:\n```\ntf.subtract(tf.cast(tf.constant(2.0), tf.int32), tf.constant(1))   # 1\n```\n\n## Quiz\nLet's apply what you learned to convert an algorithm to TensorFlow.  The code below is a simple algorithm using division and subtraction.  Convert the following algorithm in regular Python to TensorFlow and print the results of the session.  You can use [`tf.constant()`](https://www.tensorflow.org/api_guides/python/constant_op) for the values `10`, `2`, and `1`.\n",
              "instructor_notes": ""
            },
            {
              "id": 626399,
              "key": "b7971877-773f-499e-8c29-9e96b919d0e9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view85c5dd2e",
              "pool_id": "jupyter",
              "view_id": "85c5dd2e-b1fc-44af-8409-d98821c95fa5",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 197325,
          "key": "6afbbf07-acf5-4ed6-8532-8f72131c7d52",
          "title": "Transition to Classification",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6afbbf07-acf5-4ed6-8532-8f72131c7d52",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306096,
              "key": "49164b8d-4e4a-4e95-87c2-7d4506267fa6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4fb36_06-l-supervised-classification-391-1/06-l-supervised-classification-391-1.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/49164b8d-4e4a-4e95-87c2-7d4506267fa6",
              "caption": "",
              "alt": null,
              "width": 1280,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 197326,
              "key": "54c3b645-bf61-49aa-8193-1fc1655a02f0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Good job!  You've accomplished a lot. In particular, you did the following:\n - Ran operations in [`tf.session`](https://www.tensorflow.org/api_docs/python/tf/Session).\n - Created a constant tensor with [`tf.constant()`](https://www.tensorflow.org/api_guides/python/constant_op).\n\n\nYou know the basics of TensorFlow, so let's take a break and get back to the theory of neural networks. In the next few videos, you're going to learn about one of the most popular applications of neural networks - classification.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 96681,
          "key": "63798118180923",
          "title": "Supervised Classification",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118180923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306097,
              "key": "699e3101-3a1f-449f-857c-eda787d695f2",
              "title": "Supervised Classification",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XTGsutypAPE",
                "china_cdn_id": "XTGsutypAPE.mp4"
              }
            }
          ]
        },
        {
          "id": 84737,
          "key": "63798118190923",
          "title": "Let's make a deal",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118190923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 307870,
              "key": "61f6d699-81c9-4b1e-bdc8-a92b5223579d",
              "title": "Let's make a deal",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "l1xMgirpwCU",
                "china_cdn_id": "l1xMgirpwCU.mp4"
              }
            }
          ]
        },
        {
          "id": 61026,
          "key": "63798118200923",
          "title": "Training Your Logistic Classifier",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118200923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306098,
              "key": "a8fafccf-31e2-4a79-8c66-8f911ced8c20",
              "title": "Training Your Logistic Classifier",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WQsdr1EJgz8",
                "china_cdn_id": "WQsdr1EJgz8.mp4"
              }
            }
          ]
        },
        {
          "id": 626407,
          "key": "c9a0b935-efe8-4032-becf-9a831a3e597b",
          "title": "TensorFlow Linear Function",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c9a0b935-efe8-4032-becf-9a831a3e597b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626408,
              "key": "fd91fdc8-15a5-42e9-ac87-e2cd62021abd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# TensorFlow Linear Function\n",
              "instructor_notes": ""
            },
            {
              "id": 626409,
              "key": "ba547ace-a8bd-4ce4-8c6d-1fe55efb7da0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let’s derive the function `y = Wx + b`.  We want to translate our input, `x`, to labels, `y`.  \n\nFor example, imagine we want to classify images as digits. \n\n`x` would be our list of pixel values, and `y` would be the logits, one for each digit. Let's take a look at `y = Wx`, where the weights, `W`, determine the influence of `x` at predicting each `y`.\n",
              "instructor_notes": ""
            },
            {
              "id": 626415,
              "key": "7bd9330c-7a17-4c0f-b872-3be308b67459",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5af21f64_wx-1/wx-1.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7bd9330c-7a17-4c0f-b872-3be308b67459",
              "caption": "",
              "alt": "",
              "width": 559,
              "height": 471,
              "instructor_notes": null
            },
            {
              "id": 626416,
              "key": "8366b451-4969-4a97-9fc3-0b8746c607ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`y = Wx` allows us to segment the data into their respective labels using a line.  \n\nHowever, this line has to pass through the origin, because whenever `x` equals 0, then `y` is also going to equal 0.\n\nWe want the ability to shift the line away from the origin to fit more complex data.  The simplest solution is to add a number to the function, which we call “bias”.\n",
              "instructor_notes": ""
            },
            {
              "id": 626418,
              "key": "d6068c49-1f76-406f-94cc-8573137fd619",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5af21f8c_wx-b/wx-b.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d6068c49-1f76-406f-94cc-8573137fd619",
              "caption": "Function y = Wx + b",
              "alt": "",
              "width": 654,
              "height": 568,
              "instructor_notes": null
            },
            {
              "id": 626419,
              "key": "2d6afdfd-1272-4fd6-a3f0-55cca5618ca2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Our new function becomes `Wx + b`, allowing us to create predictions on linearly separable data.  Let’s use a concrete example and calculate the logits.\n## Matrix Multiplication Quiz\nCalculate the logits `a` and `b` for the following formula.",
              "instructor_notes": ""
            },
            {
              "id": 626420,
              "key": "b2de6cf2-ff3c-4908-b51b-646ede807c7c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5af21fd9_codecogseqn-13/codecogseqn-13.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b2de6cf2-ff3c-4908-b51b-646ede807c7c",
              "caption": "y = Wx + b",
              "alt": "",
              "width": 919,
              "height": 179,
              "instructor_notes": null
            },
            {
              "id": 626423,
              "key": "29ddf00b-134a-478b-9a92-a067e5b73855",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "29ddf00b-134a-478b-9a92-a067e5b73855",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is a?",
                "answers": [
                  {
                    "id": "a1525817423666",
                    "text": "0.86",
                    "is_correct": false
                  },
                  {
                    "id": "a1525817440503",
                    "text": "0.06",
                    "is_correct": false
                  },
                  {
                    "id": "a1525817447287",
                    "text": "0.16",
                    "is_correct": true
                  },
                  {
                    "id": "a1525817451406",
                    "text": "0.36",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 626425,
              "key": "d8a7a20c-4737-4aab-b163-fee74050164a",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d8a7a20c-4737-4aab-b163-fee74050164a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is b?",
                "answers": [
                  {
                    "id": "a1525817496539",
                    "text": "0.86",
                    "is_correct": false
                  },
                  {
                    "id": "a1525817510910",
                    "text": "0.16",
                    "is_correct": false
                  },
                  {
                    "id": "a1525817514556",
                    "text": "0.06",
                    "is_correct": true
                  },
                  {
                    "id": "a1525817517776",
                    "text": "0.36",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 626426,
              "key": "0836ba04-dde0-48d5-8362-c8766620b9b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Transposition\nWe've been using the `y = Wx + b` function for our linear function.  \n\nBut there's another function that does the same thing, `y = xW + b`.  These functions do the same thing and are interchangeable, except for the dimensions of the matrices involved. \n\nTo shift from one function to the other, you simply have to swap the row and column dimensions of each matrix. This is called transposition.\n\nFor rest of this lesson, we actually use `xW + b`, because this is what TensorFlow uses. ",
              "instructor_notes": ""
            },
            {
              "id": 626427,
              "key": "1033d279-b516-461c-899f-bf89cd63a3f4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5af220e2_codecogseqn-18/codecogseqn-18.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1033d279-b516-461c-899f-bf89cd63a3f4",
              "caption": "y = xW + b",
              "alt": "",
              "width": 1010,
              "height": 179,
              "instructor_notes": null
            },
            {
              "id": 626428,
              "key": "58df1b41-1073-4c83-bccf-beb356ca3967",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The above example is identical to the quiz you just completed, except that the matrices are transposed.\n\n`x` now has the dimensions 1x3, `W` now has the dimensions 3x2, and `b` now has the dimensions 1x2.  Calculating this will produce a matrix with the dimension of 1x2.\n\nYou'll notice that the elements in this 1x2 matrix are the same as the elements in the 2x1 matrix from the quiz. Again, these matrices are simply transposed.",
              "instructor_notes": ""
            },
            {
              "id": 626429,
              "key": "b6bd2e22-35f9-4ab5-a203-667e51194655",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5af2210f_codecogseqn-20/codecogseqn-20.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b6bd2e22-35f9-4ab5-a203-667e51194655",
              "caption": "",
              "alt": "",
              "width": 344,
              "height": 60,
              "instructor_notes": null
            },
            {
              "id": 626431,
              "key": "444f99e1-c682-45f9-8658-bc34b357935f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We now have our logits!  The columns represent the logits for our two labels. \n\nNow you can learn how to train this function in TensorFlow.\n\n## Weights and Bias in TensorFlow\nThe goal of training a neural network is to modify weights and biases to best predict the labels.  In order to use weights and bias, you'll need a Tensor that can be modified.  This leaves out [`tf.placeholder()`](https://www.tensorflow.org/api_docs/python/tf/placeholder) and [`tf.constant()`](https://www.tensorflow.org/api_docs/python/tf/constant), since those Tensors can't be modified.  This is where [`tf.Variable`](https://www.tensorflow.org/api_docs/python/tf/Variable) class comes in.",
              "instructor_notes": ""
            },
            {
              "id": 626432,
              "key": "f4938044-b5ed-4e4d-91e4-6f62c3adb6c0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### tf.Variable()\n```python\nx = tf.Variable(5)\n```\nThe [`tf.Variable`](https://www.tensorflow.org/api_docs/python/tf/Variable) class creates a tensor with an initial value that can be modified, much like a normal Python variable.  This tensor stores its state in the session, so you must initialize the state of the tensor manually.  You'll use the [`tf.global_variables_initializer()`](https://www.tensorflow.org/programmers_guide/variables) function to initialize the state of all the Variable tensors.\n#####  Initialization\n``` python\ninit = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    sess.run(init)\n```\nThe [`tf.global_variables_initializer()`](https://www.tensorflow.org/programmers_guide/variables) call returns an operation that will initialize all TensorFlow variables from the graph.  You call the operation using a session to initialize all the variables as shown above.  Using the [`tf.Variable`](https://www.tensorflow.org/api_docs/python/tf/Variable) class allows us to change the weights and bias, but an initial value needs to be chosen.\n\nInitializing the weights with random numbers from a normal distribution is good practice.  Randomizing the weights helps the model from becoming stuck in the same place every time you train it. You'll learn more about this in the next lesson, when you study gradient descent.\n\nSimilarly, choosing weights from a normal distribution prevents any one weight from overwhelming other weights.  You'll use the [`tf.truncated_normal()`](https://www.tensorflow.org/api_docs/python/tf/truncated_normal) function to generate random numbers from a normal distribution.\n### tf.truncated_normal()\n```python\nn_features = 120\nn_labels = 5\nweights = tf.Variable(tf.truncated_normal((n_features, n_labels)))\n```\nThe [`tf.truncated_normal()`](https://www.tensorflow.org/api_docs/python/tf/truncated_normal) function returns a tensor with random values from a normal distribution whose magnitude is no more than 2 standard deviations from the mean.  \n\nSince the weights are already helping prevent the model from getting stuck, you don't need to randomize the bias.  Let's use the simplest solution, setting the bias to 0.\n### tf.zeros()\n```python\nn_labels = 5\nbias = tf.Variable(tf.zeros(n_labels))\n```\nThe [`tf.zeros()`](https://www.tensorflow.org/api_docs/python/tf/zeros) function returns a tensor with all zeros.\n## Linear Classifier Quiz",
              "instructor_notes": ""
            },
            {
              "id": 626434,
              "key": "bb37c23d-b49e-4621-a557-99676846e37b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5af2214a_mnist-012/mnist-012.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bb37c23d-b49e-4621-a557-99676846e37b",
              "caption": "",
              "alt": "",
              "width": 584,
              "height": 110,
              "instructor_notes": null
            },
            {
              "id": 626435,
              "key": "90bf9a9f-3cb2-41c5-aaef-f34bfdc37282",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You'll be classifying the handwritten numbers `0`, `1`, and `2` from the MNIST dataset using TensorFlow.  The above is a small sample of the data you'll be training on.  Notice how some of the `1`s are written with a [serif](https://en.wikipedia.org/wiki/Serif) at the top and at different angles.  The similarities and differences will play a part in shaping the weights of the model.",
              "instructor_notes": ""
            },
            {
              "id": 626436,
              "key": "0b44c7ae-b2c8-434a-a3af-74cbc24a1826",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5af22171_weights-0-1-2/weights-0-1-2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0b44c7ae-b2c8-434a-a3af-74cbc24a1826",
              "caption": "Left: Weights for labeling 0. Middle: Weights for labeling 1. Right: Weights for labeling 2.",
              "alt": "",
              "width": 3360,
              "height": 1120,
              "instructor_notes": null
            },
            {
              "id": 626437,
              "key": "3cfd49c3-dd89-46c9-b04b-84f37cafd203",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The images above are trained weights for each label (`0`, `1`, and `2`).  The weights display the unique properties of each digit they have found.  Complete this quiz to train your own weights using the MNIST dataset.\n\n### Instructions\n1. Open quiz.py.\n  1. Implement `get_weights` to return a [`tf.Variable`](https://www.tensorflow.org/versions/r0.11/api_docs/python/state_ops/variables#Variable) of weights\n  2. Implement `get_biases` to return a [`tf.Variable`](https://www.tensorflow.org/versions/r0.11/api_docs/python/state_ops/variables#Variable) of biases\n  3. Implement `xW + b` in the `linear` function\n2. Open sandbox.py\n  1. Initialize all weights\n\nSince `xW` in `xW + b` is matrix multiplication, you have to use the [`tf.matmul()`](https://www.tensorflow.org/api_docs/python/tf/matmul) function instead of [`tf.multiply()`](https://www.tensorflow.org/api_docs/python/tf/multiply).  Don't forget that order matters in matrix multiplication, so `tf.matmul(a,b)` is not the same as `tf.matmul(b,a)`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 626439,
          "key": "934d3b21-b830-4513-936f-3bab522caf12",
          "title": "Quiz: Linear Function",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "934d3b21-b830-4513-936f-3bab522caf12",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626444,
              "key": "39acf381-0ded-4d2b-acae-f7c172e20887",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5f458a3e",
              "pool_id": "jupyter",
              "view_id": "5f458a3e-d1ba-417d-9441-3858184428d4",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 217171,
          "key": "d87e405c-b9ba-44d4-b901-9592b1f3499f",
          "title": "Linear Update",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d87e405c-b9ba-44d4-b901-9592b1f3499f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 217172,
              "key": "d92e7dbc-46bd-4e81-9c31-a05e0dc503d7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can’t train a neural network on a single sample.  Let’s apply n samples of `x` to the function `y = Wx + b`, which becomes `Y = WX + B`.",
              "instructor_notes": ""
            },
            {
              "id": 217173,
              "key": "6ed743c9-fbef-4a27-9f19-c2de3ab45fc6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/583a35b9_new-wx-b-2/new-wx-b-2.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6ed743c9-fbef-4a27-9f19-c2de3ab45fc6",
              "caption": "Y = WX + B",
              "alt": null,
              "width": 657,
              "height": 162,
              "instructor_notes": null
            },
            {
              "id": 217174,
              "key": "4f2c6654-a11b-4884-8dea-ba5c6942bc8d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For every sample of `X` (`X1`, `X2`, `X3`), we get logits for label 1 (`Y1`) and label 2 (`Y2`).\n\n\nIn order to add the bias to the product of `WX`, we had to turn `b` into a matrix of the same shape.  This is a bit unnecessary, since the bias is only two numbers.  It should really be a vector.\n\n\nWe can take advantage of an operation called broadcasting used in TensorFlow and Numpy.  This operation allows arrays of different dimension to be added or multiplied with each other.  For example:\n```\nimport numpy as np\nt = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nu = np.array([1, 2, 3])\nprint(t + u)\n```\nThe code above will print...\n```\n[[ 2  4  6]\n [ 5  7  9]\n [ 8 10 12]\n [11 13 15]]\n```\nThis is because `u` is the same dimension as the last dimension in `t`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 197327,
          "key": "ce2115f5-b72c-4e22-bbaf-63bd2ff72b48",
          "title": "Quiz: Softmax",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce2115f5-b72c-4e22-bbaf-63bd2ff72b48",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 380521,
              "key": "736e00ff-378c-4c29-843e-2a44bf25899e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59a3b336_softmax/softmax.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/736e00ff-378c-4c29-843e-2a44bf25899e",
              "caption": "Softmax Function",
              "alt": "",
              "width": 400,
              "height": 241,
              "instructor_notes": null
            },
            {
              "id": 197335,
              "key": "49458298-41fd-45d2-9f96-18eaba1e4069",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Softmax\nCongratulations on successfully implementing a linear function that outputs logits.  You're one step closer to a working classifier. \n\nThe next step is to assign a probability to each label, which you can then use to classify the data.  Use the softmax function to turn your logits into probabilities.\n\nWe can do this by using the formula above, which uses the input of y values and the mathematical constant \"e\" which is approximately equal to 2.718. By taking \"e\" to the power of any real value we always get back a positive value, this then helps us scale when having negative  y values. The summation symbol on the bottom of the divisor indicates that we add together all the  e^(input y value) elements in order to get our calculated probability outputs. \n\n## Quiz\nFor the next quiz, you'll implement a `softmax(x)` function that takes in `x`, a one or two dimensional array of logits.  \n\nIn the one dimensional case, the array is just a single set of logits.  In the two dimensional case, each column in the array is a set of logits.  The `softmax(x)` function should return a NumPy array of the same shape as `x`.\n\nFor example, given a one-dimensional array:\n```python\n# logits is a one-dimensional array with 3 elements\nlogits = [1.0, 2.0, 3.0]\n# softmax will return a one-dimensional array with 3 elements\nprint softmax(logits)\n```\n```\n$ [ 0.09003057  0.24472847  0.66524096]\n```\n\nGiven a two-dimensional array where each column represents a set of logits:\n```python\n# logits is a two-dimensional array\nlogits = np.array([\n    [1, 2, 3, 6],\n    [2, 4, 5, 6],\n    [3, 8, 7, 6]])\n# softmax will return a two-dimensional array with the same shape\nprint softmax(logits)\n```\n```\n$ [\n    [ 0.09003057  0.00242826  0.01587624  0.33333333]\n    [ 0.24472847  0.01794253  0.11731043  0.33333333]\n    [ 0.66524096  0.97962921  0.86681333  0.33333333]\n  ]\n```\nImplement the softmax function, which is specified by the formula at the top of the page.\n\nThe probabilities for each column must sum to 1. Feel free to test your function with the inputs above.",
              "instructor_notes": ""
            },
            {
              "id": 197328,
              "key": "b4cd2fb6-7676-410f-a9a6-02a0fd39e05a",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "b4cd2fb6-7676-410f-a9a6-02a0fd39e05a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "Softmax",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5132383936446464",
                "initial_code_files": [
                  {
                    "text": "# Solution is available in the other \"solution.py\" tab\nimport numpy as np\n\n\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    # TODO: Compute and return softmax(x)\n\nlogits = [3.0, 1.0, 0.2]\nprint(softmax(logits))\n",
                    "name": "main_code.py"
                  },
                  {
                    "text": "# Quiz Solution\n# Note: You can't run code in this tab\nimport numpy as np\n\n\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    return np.exp(x) / np.sum(np.exp(x), axis=0)\n\nlogits = [3.0, 1.0, 0.2]\nprint(softmax(logits))\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 626611,
          "key": "ec12f919-a3ea-4d82-b0c9-56f2f7445ed2",
          "title": "Quiz: TensorFlow Softmax Workspaces",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ec12f919-a3ea-4d82-b0c9-56f2f7445ed2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676843,
              "key": "1030a5ae-f2c0-418f-845e-6f5335448df0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# TensorFlow Softmax\nNow that you've built a softmax function from scratch, let's see how softmax is done in TensorFlow.\n\n```python\nx = tf.nn.softmax([2.0, 1.0, 0.2])\n```\n\nEasy as that!  [`tf.nn.softmax()`](https://www.tensorflow.org/api_docs/python/tf/nn/softmax) implements the softmax function for you.  It takes in logits and returns softmax activations.\n## Quiz\nUse the softmax function in the quiz below to return the softmax of the logits.",
              "instructor_notes": ""
            },
            {
              "id": 676842,
              "key": "b936696f-e716-4939-bf63-daee00e92b3f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58950908_softmax-input-output/softmax-input-output.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b936696f-e716-4939-bf63-daee00e92b3f",
              "caption": "",
              "alt": "",
              "width": 1058,
              "height": 420,
              "instructor_notes": null
            },
            {
              "id": 626612,
              "key": "82050b68-c7d9-449d-b76b-74aaf0618a34",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view38d08630",
              "pool_id": "jupyter",
              "view_id": "38d08630-c87a-4c47-a47b-07b6da1760ed",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 676845,
              "key": "3a6cce04-b5f0-4d55-8de9-ee4d894ee121",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz\nAnswer the following 2 questions about softmax.",
              "instructor_notes": ""
            },
            {
              "id": 676846,
              "key": "2c79af30-8798-40f8-ac27-130616ece4d7",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2c79af30-8798-40f8-ac27-130616ece4d7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens to the softmax probabilities when you multiply the logits by 10?",
                "answers": [
                  {
                    "id": "a1532015220965",
                    "text": "Probabilities get close to 0.0 or 1.0",
                    "is_correct": true
                  },
                  {
                    "id": "a1532015237715",
                    "text": "Probabilities get close to the uniform distribution",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 676847,
              "key": "aebf89e5-f04c-4508-adc1-4afa0ca85661",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "aebf89e5-f04c-4508-adc1-4afa0ca85661",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens to the softmax probabilities when you divide the logits by 10?",
                "answers": [
                  {
                    "id": "a1532015286903",
                    "text": "The probabilities get close to 0.0 or 1.0",
                    "is_correct": false
                  },
                  {
                    "id": "a1532015300545",
                    "text": "The probabilities get close to the uniform distribution",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 96693,
          "key": "63798118240923",
          "title": "One-Hot Encoding",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118240923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308606,
              "key": "8087855d-f37e-4137-8acc-5fb8f244505a",
              "title": "One-Hot Encoding",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "phYsxqlilUk",
                "china_cdn_id": "phYsxqlilUk.mp4"
              }
            }
          ]
        },
        {
          "id": 195331,
          "key": "a10504af-10bb-4323-a482-cf54e3fcdbae",
          "title": "Quiz: One-Hot Encoding",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a10504af-10bb-4323-a482-cf54e3fcdbae",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 196455,
              "key": "61e4b892-0e26-4ccc-ad9a-e2488bdd5e92",
              "title": " ",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/58015400_base-hot-enc/base-hot-enc.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/61e4b892-0e26-4ccc-ad9a-e2488bdd5e92",
              "caption": "",
              "alt": null,
              "width": 1470,
              "height": 1700,
              "instructor_notes": null
            },
            {
              "id": 196452,
              "key": "02ecdc7e-40d6-4735-b755-3f52295a415a",
              "title": " ",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "02ecdc7e-40d6-4735-b755-3f52295a415a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "With the labels [\"A\", \"B\", \"C\"] and one-hot encodings from above, select the missing one-hot encoding:",
                "answers": [
                  {
                    "id": "a1476480326789",
                    "text": "[1.0, 0.0, 1.0]",
                    "is_correct": false
                  },
                  {
                    "id": "a1476480442670",
                    "text": "[0.0, 0.0, 0.0]",
                    "is_correct": false
                  },
                  {
                    "id": "a1476480473262",
                    "text": "[0.0, 1.0, 0.0]",
                    "is_correct": false
                  },
                  {
                    "id": "a1476480617425",
                    "text": "[0.0, 0.0, 1.0]",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 115493,
          "key": "63798118260923",
          "title": "Cross Entropy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118260923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 31282,
              "key": "6379811826",
              "title": "Cross Entropy",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "tRsSi_sqXjI",
                "china_cdn_id": "tRsSi_sqXjI.mp4"
              }
            }
          ]
        },
        {
          "id": 80445,
          "key": "63798118270923",
          "title": "Minimizing Cross Entropy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118270923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 268106,
              "key": "921b1e99-d355-4d80-a1d0-1aadacd162bb",
              "title": "16 L Minimizing Cross-Entropy",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YrDMXFhvh9E",
                "china_cdn_id": "YrDMXFhvh9E.mp4"
              }
            }
          ]
        },
        {
          "id": 71065,
          "key": "63798118280923",
          "title": "Practical Aspects of Learning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118280923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306099,
              "key": "778ae763-caa3-4dd1-9dba-8bdf514d8254",
              "title": "17 L Transition Into Practical Aspects Of Learning",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bKqkRFOOKoA",
                "china_cdn_id": "bKqkRFOOKoA.mp4"
              }
            }
          ]
        },
        {
          "id": 195350,
          "key": "4da33923-945b-4dc4-b13d-920e7c14f684",
          "title": "Quiz: Numerical Stability",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4da33923-945b-4dc4-b13d-920e7c14f684",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 267023,
              "key": "9b3307bf-54e2-4a10-bb19-b4c6a780db35",
              "title": "Numerical Stability",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_SbGcOS-jcQ",
                "china_cdn_id": "_SbGcOS-jcQ.mp4"
              }
            },
            {
              "id": 195352,
              "key": "45b9ad7a-9c54-4488-8d92-308e6f210676",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "45b9ad7a-9c54-4488-8d92-308e6f210676",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4788487754743808",
                "initial_code_files": [
                  {
                    "text": "a = 1000000000\nfor i in range(1000000):\n    a = a + 1e-6\nprint(a - 1000000000)\n",
                    "name": "quiz.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 79263,
          "key": "71191606550923",
          "title": "Normalized Inputs and Initial Weights",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71191606550923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306100,
              "key": "98f85823-499e-4ee8-9666-17aa520ed7f1",
              "title": "Normalized Inputs And Initial Weights",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WaHQ9-UXIIg",
                "china_cdn_id": "WaHQ9-UXIIg.mp4"
              }
            }
          ]
        },
        {
          "id": 197126,
          "key": "7aa4ccfb-7511-4d0d-9c49-20f8ed5f1043",
          "title": "Measuring Performance",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7aa4ccfb-7511-4d0d-9c49-20f8ed5f1043",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306102,
              "key": "6fc38ed3-8759-4a7d-bbe5-f8db8016137d",
              "title": "21 L Measuring Performance",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "byP0DJImOSk",
                "china_cdn_id": "byP0DJImOSk.mp4"
              }
            }
          ]
        },
        {
          "id": 111765,
          "key": "63798118320923",
          "title": "Transition: Overfitting -> Dataset Size",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118320923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 31555,
              "key": "6379811832",
              "title": "Transition: Overfitting -> Dataset Size",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "Lmxem7ud9yk",
                "china_cdn_id": "Lmxem7ud9yk.mp4"
              }
            }
          ]
        },
        {
          "id": 106373,
          "key": "63798118330923",
          "title": "Validation and Test Set Size",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118330923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 402804,
              "key": "ab9d29af-a651-4a17-8f38-d6e010ae7e95",
              "title": "21 Validation And Test Set V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iC2QOiavbrw",
                "china_cdn_id": "iC2QOiavbrw.mp4"
              }
            }
          ]
        },
        {
          "id": 60786,
          "key": "63798118340923",
          "title": "Validation Set Size",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118340923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 114751,
              "key": "6379811834",
              "title": "Validation Set Size",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "6379811834",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "-2XvoG6WD9k",
                  "china_cdn_id": "-2XvoG6WD9k.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Validation Set Size",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/1WndmHvR6Oeep8Ex6BCjMH4YD1M_pMoVFg1sAm7mMEuSqdyU4h18oVvEnLRC6ZJ9b4Cj_HsDwBFbe4kJmjZw=s0#w=2560&h=1440",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6379811834",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "6411338956",
                "widgets": [
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio1",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.535438746882793,
                      "y": 0.4572131374722838
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio2",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.596029457605985,
                      "y": 0.45915327050997784
                    }
                  },
                  {
                    "group": "group2",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio3",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5384585411471322,
                      "y": 0.621119733924612
                    }
                  },
                  {
                    "group": "group2",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio4",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5981725374064838,
                      "y": 0.6236141906873615
                    }
                  },
                  {
                    "group": "group3",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio5",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5380688902743143,
                      "y": 0.7973253880266076
                    }
                  },
                  {
                    "group": "group3",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio6",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.598698566084788,
                      "y": 0.7971521618625277
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "P4LwoQyJSMk",
                  "china_cdn_id": "P4LwoQyJSMk.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 85998,
          "key": "63798118370923",
          "title": "Validation Test Set Size Continued",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118370923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 31780,
              "key": "6379811837",
              "title": "Validation Test Set Size Continued",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "cgoB-MJObmw",
                "china_cdn_id": "cgoB-MJObmw.mp4"
              }
            }
          ]
        },
        {
          "id": 60762,
          "key": "63798118380923",
          "title": "Optimizing a Logistic Classifier",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118380923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 268110,
              "key": "21b01e49-6a3b-4a7a-9d05-6429a3b401f8",
              "title": "29 L Optimizing A Logistic Classifier",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "U_7nO1dm2tY",
                "china_cdn_id": "U_7nO1dm2tY.mp4"
              }
            }
          ]
        },
        {
          "id": 96679,
          "key": "63798118390923",
          "title": "Stochastic Gradient Descent",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118390923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 268111,
              "key": "c0e22629-fb9a-4786-baec-f3586c704d4a",
              "title": "30 L Stochastic Gradient Descent",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "U9iEGUd9kJ0",
                "china_cdn_id": "U9iEGUd9kJ0.mp4"
              }
            }
          ]
        },
        {
          "id": 73409,
          "key": "63798118400923",
          "title": "Momentum and Learning Rate Decay",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118400923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306104,
              "key": "3f72ae5d-74cf-4192-80dc-773846eca0ca",
              "title": "31 L Momentum And Learning Rate Decay",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "O3QYdmQjXds",
                "china_cdn_id": "O3QYdmQjXds.mp4"
              }
            }
          ]
        },
        {
          "id": 116433,
          "key": "63798118410923",
          "title": "Parameter Hyperspace! ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63798118410923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 306105,
              "key": "5e0df88e-3e49-4776-bd84-32b8b1731cb6",
              "title": "32 L Parameter Hyperspace!",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5a3-iIhdguc",
                "china_cdn_id": "5a3-iIhdguc.mp4"
              }
            }
          ]
        },
        {
          "id": 638054,
          "key": "b2b3bec9-7547-4bac-986f-4095f95865df",
          "title": "Mini-batch",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b2b3bec9-7547-4bac-986f-4095f95865df",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 638055,
              "key": "fe305d6f-ff51-4efa-acd5-60103c3b0372",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Mini-batching\nIn this section, you'll go over what mini-batching is and how to apply it in TensorFlow. \n\nMini-batching is a technique for training on subsets of the dataset instead of all the data at one time.  This provides the ability to train a model, even if a computer lacks the memory to store the entire dataset.\n\nMini-batching is computationally inefficient, since you can't calculate the loss simultaneously across all samples.  However, this is a small price to pay in order to be able to run the model at all.\n\nIt's also quite useful combined with SGD. The idea is to randomly shuffle the data at the start of each epoch, then create the mini-batches. For each mini-batch, you train the network weights with gradient descent. Since these batches are random, you're performing SGD with each batch.\n\nLet's look at the MNIST dataset with weights and a bias to see if your machine can handle it.\n```python\nfrom tensorflow.examples.tutorials.mnist import input_data\nimport tensorflow as tf\n\nn_input = 784  # MNIST data input (img shape: 28*28)\nn_classes = 10  # MNIST total classes (0-9 digits)\n\n# Import MNIST data\nmnist = input_data.read_data_sets('/datasets/ud730/mnist', one_hot=True)\n\n# The features are already scaled and the data is shuffled\ntrain_features = mnist.train.images\ntest_features = mnist.test.images\n\ntrain_labels = mnist.train.labels.astype(np.float32)\ntest_labels = mnist.test.labels.astype(np.float32)\n\n# Weights & bias\nweights = tf.Variable(tf.random_normal([n_input, n_classes]))\nbias = tf.Variable(tf.random_normal([n_classes]))\n```\n### Question 1\nCalculate the memory size of `train_features`, `train_labels`, `weights`, and `bias` in bytes.  Ignore memory for overhead, just calculate the memory required for the stored data.\n\nYou may have to look up how much memory a float32 requires, using [this link](https://en.wikipedia.org/wiki/Single-precision_floating-point_format).\n\n*train_features  Shape: (55000, 784) Type: float32*\n\n*train_labels Shape: (55000, 10) Type: float32*\n\n*weights Shape: (784, 10) Type: float32*\n\n*bias Shape: (10,) Type: float32*",
              "instructor_notes": ""
            },
            {
              "id": 638056,
              "key": "7e227e3d-01af-448d-8880-e9de0cc084c7",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7e227e3d-01af-448d-8880-e9de0cc084c7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many bytes of memory does `train_features` need?",
                "matchers": [
                  {
                    "expression": "172480000"
                  }
                ]
              }
            },
            {
              "id": 638057,
              "key": "3ed00583-3bf8-46cd-b710-df896f8ed35f",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3ed00583-3bf8-46cd-b710-df896f8ed35f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many bytes of memory does `train_labels` need?",
                "matchers": [
                  {
                    "expression": "2200000"
                  }
                ]
              }
            },
            {
              "id": 638058,
              "key": "c7fd3388-c3f3-4c03-9063-79a0e777bb37",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c7fd3388-c3f3-4c03-9063-79a0e777bb37",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many bytes of memory does `weights` need?",
                "matchers": [
                  {
                    "expression": "31360"
                  }
                ]
              }
            },
            {
              "id": 638059,
              "key": "5a034de3-9640-4de0-8659-9742fda327c6",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5a034de3-9640-4de0-8659-9742fda327c6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many bytes of memory does `bias` need?",
                "matchers": [
                  {
                    "expression": "40"
                  }
                ]
              }
            },
            {
              "id": 638060,
              "key": "b71e7ad7-c224-4060-a5f4-41fdf73c360e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The total memory space required for the inputs, weights and bias is around 174 megabytes, which isn't that much memory.  You could train this whole dataset on most CPUs and GPUs.  \n\nBut larger datasets that you'll use in the future measured in gigabytes or more. It's possible to purchase more memory, but it's expensive. A Titan X GPU with 12 GB of memory costs over $1,000. \n\nInstead, in order to run large models on your machine, you'll learn how to use mini-batching.\n\nLet's look at how you implement mini-batching in TensorFlow.\n## TensorFlow Mini-batching\nIn order to use mini-batching, you must first divide your data into batches. \n\nUnfortunately, it's sometimes impossible to divide the data into batches of exactly equal size.  For example, imagine you'd like to create batches of 128 samples each from a dataset of 1000 samples. Since 128 does not evenly divide into 1000, you'd wind up with 7 batches of 128 samples, and 1 batch of 104 samples. (7\\*128 + 1\\*104 = 1000)\n\nIn that case, the size of the batches would vary, so you need to take advantage of TensorFlow's [`tf.placeholder()`](https://www.tensorflow.org/api_docs/python/tf/placeholder) function to receive the varying batch sizes.\n\nContinuing the example, if each sample had `n_input = 784` features and `n_classes = 10` possible labels, the dimensions for `features` would be `[None, n_input]` and `labels` would be `[None, n_classes]`.\n```python\n# Features and Labels\nfeatures = tf.placeholder(tf.float32, [None, n_input])\nlabels = tf.placeholder(tf.float32, [None, n_classes])\n```\nWhat does `None` do here?\n\nThe `None` dimension is a placeholder for the batch size. At runtime, TensorFlow will accept any batch size greater than 0.\n\nGoing back to our earlier example, this setup allows you to feed `features` and `labels` into the model as either the batches of 128 samples or the single batch of 104 samples.\n### Question 2\nUse the parameters below, how many batches are there, and what is the last batch size?\n\n*features is (50000, 400)*\n\n*labels is (50000, 10)*\n\n*batch_size is 128*",
              "instructor_notes": ""
            },
            {
              "id": 638061,
              "key": "0555196f-0a35-4291-845d-d06fe558a50f",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0555196f-0a35-4291-845d-d06fe558a50f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many batches are there?",
                "matchers": [
                  {
                    "expression": "391"
                  }
                ]
              }
            },
            {
              "id": 638062,
              "key": "f46dedb5-00ab-40fa-8885-da1a60b4591a",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f46dedb5-00ab-40fa-8885-da1a60b4591a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the last batch size?",
                "matchers": [
                  {
                    "expression": "80"
                  }
                ]
              }
            },
            {
              "id": 638063,
              "key": "51f3c1ff-af56-44a5-b12b-af7ee44bcfed",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you know the basics, let's learn how to implement mini-batching.\n\n### Question 3\nImplement the `batches` function to batch `features` and `labels`.  The function should return each batch with a maximum size of `batch_size`.  To help you with the quiz, look at the following example output of a working `batches` function.\n```python\n# 4 Samples of features\nexample_features = [\n    ['F11','F12','F13','F14'],\n    ['F21','F22','F23','F24'],\n    ['F31','F32','F33','F34'],\n    ['F41','F42','F43','F44']]\n# 4 Samples of labels\nexample_labels = [\n    ['L11','L12'],\n    ['L21','L22'],\n    ['L31','L32'],\n    ['L41','L42']]\n\nexample_batches = batches(3, example_features, example_labels)\n```\nThe `example_batches` variable would be the following:\n```python\n[\n    # 2 batches:\n    #   First is a batch of size 3.\n    #   Second is a batch of size 1\n    [\n        # First Batch is size 3\n        [\n            # 3 samples of features.\n            # There are 4 features per sample.\n            ['F11', 'F12', 'F13', 'F14'],\n            ['F21', 'F22', 'F23', 'F24'],\n            ['F31', 'F32', 'F33', 'F34']\n        ], [\n            # 3 samples of labels.\n            # There are 2 labels per sample.\n            ['L11', 'L12'],\n            ['L21', 'L22'],\n            ['L31', 'L32']\n        ]\n    ], [\n        # Second Batch is size 1.\n        # Since batch size is 3, there is only one sample left from the 4 samples.\n        [\n            # 1 sample of features.\n            ['F41', 'F42', 'F43', 'F44']\n        ], [\n            # 1 sample of labels.\n            ['L41', 'L42']\n        ]\n    ]\n]\n```\nImplement the `batches` function in the \"quiz.py\" file below.",
              "instructor_notes": ""
            },
            {
              "id": 638064,
              "key": "2e4dd80d-b2d5-43ef-b0e4-2a467d17770c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "2e4dd80d-b2d5-43ef-b0e4-2a467d17770c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5015871402147840",
                "initial_code_files": [
                  {
                    "text": "from quiz import batches\nfrom pprint import pprint\n\n# 4 Samples of features\nexample_features = [\n    ['F11','F12','F13','F14'],\n    ['F21','F22','F23','F24'],\n    ['F31','F32','F33','F34'],\n    ['F41','F42','F43','F44']]\n# 4 Samples of labels\nexample_labels = [\n    ['L11','L12'],\n    ['L21','L22'],\n    ['L31','L32'],\n    ['L41','L42']]\n\n# PPrint prints data structures like 2d arrays, so they are easier to read\npprint(batches(3, example_features, example_labels))\n",
                    "name": "sandbox.py"
                  },
                  {
                    "text": "import math\ndef batches(batch_size, features, labels):\n    \"\"\"\n    Create batches of features and labels\n    :param batch_size: The batch size\n    :param features: List of features\n    :param labels: List of labels\n    :return: Batches of (Features, Labels)\n    \"\"\"\n    assert len(features) == len(labels)\n    # TODO: Implement batching\n    pass\n",
                    "name": "quiz.py"
                  },
                  {
                    "text": "import math\ndef batches(batch_size, features, labels):\n    \"\"\"\n    Create batches of features and labels\n    :param batch_size: The batch size\n    :param features: List of features\n    :param labels: List of labels\n    :return: Batches of (Features, Labels)\n    \"\"\"\n    assert len(features) == len(labels)\n    # TODO: Implement batching\n    output_batches = []\n    \n    sample_size = len(features)\n    for start_i in range(0, sample_size, batch_size):\n        end_i = start_i + batch_size\n        batch = [features[start_i:end_i], labels[start_i:end_i]]\n        output_batches.append(batch)\n        \n    return output_batches\n",
                    "name": "quiz_solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 638065,
          "key": "803c0e20-98e2-40e0-acab-098bebcb89d8",
          "title": "Quiz 2: Mini-batch",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "803c0e20-98e2-40e0-acab-098bebcb89d8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 638066,
              "key": "57c8e2d8-7c07-4fd7-9806-622dcc678ad9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's use mini-batching to feed batches of MNIST features and labels into a linear model.\n\nSet the batch size and run the optimizer over all the batches with the `batches` function.  The recommended batch size is 128.  If you have memory restrictions, feel free to make it smaller.\n\n**This quiz is not graded, see the solution notebook for one way to solve this quiz.**",
              "instructor_notes": ""
            },
            {
              "id": 638067,
              "key": "455fa71e-8ce2-495c-a80e-e970ca69c3ae",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view17f58af0",
              "pool_id": "jupyter",
              "view_id": "17f58af0-d5cb-410c-bc29-069f6f484318",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 638068,
              "key": "98f8bbad-b035-4ead-9843-185cae1f993d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The accuracy is low, but you probably know that you could train on the dataset more than once.  You can train a model using the dataset multiple times.  You'll go over this subject in the next section where we talk about \"epochs\".\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 220477,
          "key": "cbcb68d7-7575-442c-82d4-f796ad82b00a",
          "title": "Epochs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cbcb68d7-7575-442c-82d4-f796ad82b00a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220478,
              "key": "a6b00eb3-eebb-4c78-9960-5dfae0383c27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Epochs\nAn epoch is a single forward and backward pass of the whole dataset.  This is used to increase the accuracy of the model without requiring more data.  This section will cover epochs in TensorFlow and how to choose the right number of epochs.\n\nThe following TensorFlow code trains a model using 10 epochs.\n```python\nfrom tensorflow.examples.tutorials.mnist import input_data\nimport tensorflow as tf\nimport numpy as np\nfrom helper import batches  # Helper function created in Mini-batching section\n\n\ndef print_epoch_stats(epoch_i, sess, last_features, last_labels):\n    \"\"\"\n    Print cost and validation accuracy of an epoch\n    \"\"\"\n    current_cost = sess.run(\n        cost,\n        feed_dict={features: last_features, labels: last_labels})\n    valid_accuracy = sess.run(\n        accuracy,\n        feed_dict={features: valid_features, labels: valid_labels})\n    print('Epoch: {:<4} - Cost: {:<8.3} Valid Accuracy: {:<5.3}'.format(\n        epoch_i,\n        current_cost,\n        valid_accuracy))\n\nn_input = 784  # MNIST data input (img shape: 28*28)\nn_classes = 10  # MNIST total classes (0-9 digits)\n\n# Import MNIST data\nmnist = input_data.read_data_sets('/datasets/ud730/mnist', one_hot=True)\n\n# The features are already scaled and the data is shuffled\ntrain_features = mnist.train.images\nvalid_features = mnist.validation.images\ntest_features = mnist.test.images\n\ntrain_labels = mnist.train.labels.astype(np.float32)\nvalid_labels = mnist.validation.labels.astype(np.float32)\ntest_labels = mnist.test.labels.astype(np.float32)\n\n# Features and Labels\nfeatures = tf.placeholder(tf.float32, [None, n_input])\nlabels = tf.placeholder(tf.float32, [None, n_classes])\n\n# Weights & bias\nweights = tf.Variable(tf.random_normal([n_input, n_classes]))\nbias = tf.Variable(tf.random_normal([n_classes]))\n\n# Logits - xW + b\nlogits = tf.add(tf.matmul(features, weights), bias)\n\n# Define loss and optimizer\nlearning_rate = tf.placeholder(tf.float32)\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels))\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(cost)\n\n# Calculate accuracy\ncorrect_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\ninit = tf.global_variables_initializer()\n\nbatch_size = 128\nepochs = 10\nlearn_rate = 0.001\n\ntrain_batches = batches(batch_size, train_features, train_labels)\n\nwith tf.Session() as sess:\n    sess.run(init)\n\n    # Training cycle\n    for epoch_i in range(epochs):\n\n        # Loop over all batches\n        for batch_features, batch_labels in train_batches:\n            train_feed_dict = {\n                features: batch_features,\n                labels: batch_labels,\n                learning_rate: learn_rate}\n            sess.run(optimizer, feed_dict=train_feed_dict)\n\n        # Print cost and validation accuracy of an epoch\n        print_epoch_stats(epoch_i, sess, batch_features, batch_labels)\n\n    # Calculate accuracy for test dataset\n    test_accuracy = sess.run(\n        accuracy,\n        feed_dict={features: test_features, labels: test_labels})\n\nprint('Test Accuracy: {}'.format(test_accuracy))\n```\nRunning the code will output the following:\n```\nEpoch: 0    - Cost: 11.0     Valid Accuracy: 0.204\nEpoch: 1    - Cost: 9.95     Valid Accuracy: 0.229\nEpoch: 2    - Cost: 9.18     Valid Accuracy: 0.246\nEpoch: 3    - Cost: 8.59     Valid Accuracy: 0.264\nEpoch: 4    - Cost: 8.13     Valid Accuracy: 0.283\nEpoch: 5    - Cost: 7.77     Valid Accuracy: 0.301\nEpoch: 6    - Cost: 7.47     Valid Accuracy: 0.316\nEpoch: 7    - Cost: 7.2      Valid Accuracy: 0.328\nEpoch: 8    - Cost: 6.96     Valid Accuracy: 0.342\nEpoch: 9    - Cost: 6.73     Valid Accuracy: 0.36 \nTest Accuracy: 0.3801000118255615\n```\nEach epoch attempts to move to a lower cost, leading to better accuracy.  \n\nThis model continues to improve accuracy up to Epoch 9.  Let's increase the number of epochs to 100.\n```\n...\nEpoch: 79   - Cost: 0.111    Valid Accuracy: 0.86\nEpoch: 80   - Cost: 0.11     Valid Accuracy: 0.869\nEpoch: 81   - Cost: 0.109    Valid Accuracy: 0.869\n....\nEpoch: 85   - Cost: 0.107    Valid Accuracy: 0.869\nEpoch: 86   - Cost: 0.107    Valid Accuracy: 0.869\nEpoch: 87   - Cost: 0.106    Valid Accuracy: 0.869\nEpoch: 88   - Cost: 0.106    Valid Accuracy: 0.869\nEpoch: 89   - Cost: 0.105    Valid Accuracy: 0.869\nEpoch: 90   - Cost: 0.105    Valid Accuracy: 0.869\nEpoch: 91   - Cost: 0.104    Valid Accuracy: 0.869\nEpoch: 92   - Cost: 0.103    Valid Accuracy: 0.869\nEpoch: 93   - Cost: 0.103    Valid Accuracy: 0.869\nEpoch: 94   - Cost: 0.102    Valid Accuracy: 0.869\nEpoch: 95   - Cost: 0.102    Valid Accuracy: 0.869\nEpoch: 96   - Cost: 0.101    Valid Accuracy: 0.869\nEpoch: 97   - Cost: 0.101    Valid Accuracy: 0.869\nEpoch: 98   - Cost: 0.1      Valid Accuracy: 0.869\nEpoch: 99   - Cost: 0.1      Valid Accuracy: 0.869\nTest Accuracy: 0.8696000006198883\n```\n\n\nFrom looking at the output above, you can see the model doesn't increase the validation accuracy after epoch 80.  Let's see what happens when we increase the learning rate.\n\n*learn_rate = 0.1*\n```\nEpoch: 76   - Cost: 0.214    Valid Accuracy: 0.752\nEpoch: 77   - Cost: 0.21     Valid Accuracy: 0.756\nEpoch: 78   - Cost: 0.21     Valid Accuracy: 0.756\n...\nEpoch: 85   - Cost: 0.207    Valid Accuracy: 0.756\nEpoch: 86   - Cost: 0.209    Valid Accuracy: 0.756\nEpoch: 87   - Cost: 0.205    Valid Accuracy: 0.756\nEpoch: 88   - Cost: 0.208    Valid Accuracy: 0.756\nEpoch: 89   - Cost: 0.205    Valid Accuracy: 0.756\nEpoch: 90   - Cost: 0.202    Valid Accuracy: 0.756\nEpoch: 91   - Cost: 0.207    Valid Accuracy: 0.756\nEpoch: 92   - Cost: 0.204    Valid Accuracy: 0.756\nEpoch: 93   - Cost: 0.206    Valid Accuracy: 0.756\nEpoch: 94   - Cost: 0.202    Valid Accuracy: 0.756\nEpoch: 95   - Cost: 0.2974   Valid Accuracy: 0.756\nEpoch: 96   - Cost: 0.202    Valid Accuracy: 0.756\nEpoch: 97   - Cost: 0.2996   Valid Accuracy: 0.756\nEpoch: 98   - Cost: 0.203    Valid Accuracy: 0.756\nEpoch: 99   - Cost: 0.2987   Valid Accuracy: 0.756\nTest Accuracy: 0.7556000053882599\n```\n\nLooks like the learning rate was increased too much.  The final accuracy was lower, and it stopped improving earlier.  Let's stick with the previous learning rate, but change the number of epochs to 80.\n```\nEpoch: 65   - Cost: 0.122    Valid Accuracy: 0.868\nEpoch: 66   - Cost: 0.121    Valid Accuracy: 0.868\nEpoch: 67   - Cost: 0.12     Valid Accuracy: 0.868\nEpoch: 68   - Cost: 0.119    Valid Accuracy: 0.868\nEpoch: 69   - Cost: 0.118    Valid Accuracy: 0.868\nEpoch: 70   - Cost: 0.118    Valid Accuracy: 0.868\nEpoch: 71   - Cost: 0.117    Valid Accuracy: 0.868\nEpoch: 72   - Cost: 0.116    Valid Accuracy: 0.868\nEpoch: 73   - Cost: 0.115    Valid Accuracy: 0.868\nEpoch: 74   - Cost: 0.115    Valid Accuracy: 0.868\nEpoch: 75   - Cost: 0.114    Valid Accuracy: 0.868\nEpoch: 76   - Cost: 0.113    Valid Accuracy: 0.868\nEpoch: 77   - Cost: 0.113    Valid Accuracy: 0.868\nEpoch: 78   - Cost: 0.112    Valid Accuracy: 0.868\nEpoch: 79   - Cost: 0.111    Valid Accuracy: 0.868\nEpoch: 80   - Cost: 0.111    Valid Accuracy: 0.869\nTest Accuracy: 0.86909999418258667\n```\nThe accuracy only reached 0.86, but that could be because the learning rate was too high.  Lowering the learning rate would require more epochs, but could ultimately achieve better accuracy.\n\nIn the upcoming TensorFLow Lab, you'll get the opportunity to choose your own learning rate, epoch count, and batch size to improve the model's accuracy.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 626619,
          "key": "2525cb07-6a25-41e6-880f-47d8661f1584",
          "title": "Intro TensorFlow Neural Network ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2525cb07-6a25-41e6-880f-47d8661f1584",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626620,
              "key": "10434280-d1ac-4a9e-916b-d3de2b67d9cb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# TensorFlow Neural Network Lab\n\n[<img src=\"http://yaroslavvb.com/upload/notMNIST/nmn.png\" alt=\"notMNIST dataset samples\" />](http://yaroslavvb.blogspot.com/2011/09/notmnist-dataset.html)\n\nWe've prepared a Jupyter notebook that will guide you through the process of creating a single layer neural network in TensorFlow.\n\n#### The Notebook\nThe notebook has 3 problems for you to solve:\n - Problem 1: Normalize the features\n - Problem 2: Use TensorFlow operations to create features, labels, weight, and biases tensors\n - Problem 3: Tune the learning rate, number of steps, and batch size for the best accuracy\n\nThis is a self-assessed lab.  Compare your answers to the solutions in the **solutions.ipynb** .  If you have any difficulty completing the lab, Udacity provides a few services to answer any questions you might have.\n\n## Help\nRemember that you can get assistance from [Knowledge](https://knowledge.udacity.com/) or the [Slack channel](https://carnd-slack.udacity.com). You can also review the concepts from the previous lessons.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 626621,
          "key": "4e9f0c37-7414-4548-bfa2-61681763105a",
          "title": "Lab: Neural Network Workspaces",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4e9f0c37-7414-4548-bfa2-61681763105a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626623,
              "key": "b0befa3e-dc3b-43e0-9892-d6b916534ddb",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewe89af015",
              "pool_id": "jupytergpu",
              "view_id": "e89af015-08cb-4ea9-86bc-eccc8359c981",
              "gpu_capable": true,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/CarND-TensorFlow-Lab"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    }
  ]
}