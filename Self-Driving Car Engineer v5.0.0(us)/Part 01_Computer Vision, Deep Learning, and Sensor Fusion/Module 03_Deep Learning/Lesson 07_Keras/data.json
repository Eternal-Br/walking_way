{
  "data": {
    "lesson": {
      "id": 626203,
      "key": "f0cff6a0-5f06-4aa4-8470-a55f084a4dfb",
      "title": "Keras",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Take on the neural network framework, Keras! Build and train neural networks more easily.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/f0cff6a0-5f06-4aa4-8470-a55f084a4dfb/626203/1538942396806/Keras+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/f0cff6a0-5f06-4aa4-8470-a55f084a4dfb/626203/1538942394411/Keras+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 663268,
          "key": "206266ba-536f-4aa4-b7c4-6b421862df03",
          "title": "Deep Learning Breakthroughs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "206266ba-536f-4aa4-b7c4-6b421862df03",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 663269,
              "key": "23cddddc-329c-44e7-ad0e-d26f2f0847e2",
              "title": "03 Deep Learning A02 Deep Learning Breakthroughs",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iYdQ7bKBxFE",
                "china_cdn_id": "iYdQ7bKBxFE.mp4"
              }
            }
          ]
        },
        {
          "id": 194787,
          "key": "ae401719-94f1-461d-9796-34f0771ab2f9",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ae401719-94f1-461d-9796-34f0771ab2f9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197189,
              "key": "b39f4dab-aa68-4302-a55b-64c1d34e7410",
              "title": "Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-DZ5OI2uCzU",
                "china_cdn_id": "-DZ5OI2uCzU.mp4"
              }
            }
          ]
        },
        {
          "id": 194789,
          "key": "dbeeb10a-704d-4e0a-ace9-ce90036902d4",
          "title": "Deep Learning Frameworks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dbeeb10a-704d-4e0a-ace9-ce90036902d4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 301779,
              "key": "87cf5f62-f3ee-4496-a18b-862ce068d770",
              "title": "Deep Learning Frameworks",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "i2mmnu-t8-c",
                "china_cdn_id": "i2mmnu-t8-c.mp4"
              }
            }
          ]
        },
        {
          "id": 197191,
          "key": "7ab43f96-5ecc-413e-ab1a-5df3e3c9993a",
          "title": "High Level Frameworks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7ab43f96-5ecc-413e-ab1a-5df3e3c9993a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197193,
              "key": "2197bf89-d81b-4b28-9b7d-242317642bff",
              "title": "High Level Frameworks",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ThmsQxazSvM",
                "china_cdn_id": "ThmsQxazSvM.mp4"
              }
            }
          ]
        },
        {
          "id": 194793,
          "key": "6a28b502-06dd-452e-90a7-219bfce90737",
          "title": "Keras Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6a28b502-06dd-452e-90a7-219bfce90737",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 266934,
              "key": "b997f23a-2f58-413a-a515-f21692624bc3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/580d3b19_sign/sign.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b997f23a-2f58-413a-a515-f21692624bc3",
              "caption": "",
              "alt": null,
              "width": 1735,
              "height": 1152,
              "instructor_notes": null
            },
            {
              "id": 194794,
              "key": "935d786a-77ab-4551-94da-306c6799e690",
              "title": "asdf",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Keras](https://faroit.github.io/keras-docs/1.2.1/) makes coding deep neural networks simpler. To demonstrate just how easy it is, you're going to build a simple fully-connected network in a few dozen lines of code.\n\nWe’ll be connecting the concepts that you’ve learned in the previous lessons to the methods that Keras provides.\n\nThe network you will build is similar to Keras’s [sample network](https://github.com/fchollet/keras/blob/master/examples/mnist_cnn.py) that builds out a convolutional neural network for [MNIST](http://yann.lecun.com/exdb/mnist/). However for the network you will build you're going to use a small subset of the [German Traffic Sign Recognition Benchmark](http://benchmark.ini.rub.de/?section=gtsrb&subsection=news) dataset that you've used previously.\n\n\nThe general idea for this example is that you'll first load the data, then define the network, and then finally train the network.\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 626775,
          "key": "37ba8e75-f083-4b2c-b0e1-ba77ff920c6d",
          "title": "Neural Networks in Keras",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "37ba8e75-f083-4b2c-b0e1-ba77ff920c6d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626776,
              "key": "ce0ef0ac-3b3b-487c-a8d9-45ca3c8a4f5c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Neural Networks in Keras\nHere are some core concepts you need to know for working with Keras.   All Keras exercises will be performed in JUPYTER workspaces, using python 3.5, Tensorflow 1.3, and [Keras](https://keras.io/) 2.09.  More information on using JUPYTER in workspaces, can be found earlier in the term in the Workspaces lesson.\n\n## Sequential Model\n```python\n    from keras.models import Sequential\n\n    # Create the Sequential model\n    model = Sequential()\n```\n\nThe [keras.models.Sequential](https://keras.io/models/sequential/) class is a wrapper for the neural network model. It provides common functions like `fit()`, `evaluate()`, and `compile()`. We'll cover these functions as we get to them. Let's start looking at the layers of the model.\n\n**See the documentation for `keras.models.Sequential` in Keras 2.09 [here](https://faroit.github.io/keras-docs/2.0.9/models/sequential/).**\n\n## Layers\nA Keras layer is just like a neural network layer. There are fully connected layers, max pool layers, and activation layers. You can add a layer to the model using the model's `add()` function. For example, a simple model would look like this:\n\n```python\n    from keras.models import Sequential\n    from keras.layers.core import Dense, Activation, Flatten\n\n    # Create the Sequential model\n    model = Sequential()\n\n    #1st Layer - Add a flatten layer\n    model.add(Flatten(input_shape=(32, 32, 3)))\n\n    #2nd Layer - Add a fully connected layer\n    model.add(Dense(100))\n\n    #3rd Layer - Add a ReLU activation layer\n    model.add(Activation('relu'))\n\n    #4th Layer - Add a fully connected layer\n    model.add(Dense(60))\n\n    #5th Layer - Add a ReLU activation layer\n    model.add(Activation('relu'))\n```\n\nKeras will automatically infer the shape of all layers after the first layer. This means you only have to set the input dimensions for the first layer.\n\nThe first layer from above, `model.add(Flatten(input_shape=(32, 32, 3)))`, sets the input dimension to (32, 32, 3) and output dimension to (3072=32 x 32 x 3). The second layer takes in the output of the first layer and sets the output dimensions to (100). This chain of passing output to the next layer continues until the last layer, which is the output of the model.",
              "instructor_notes": ""
            },
            {
              "id": 626778,
              "key": "c3cc0e36-67fb-4d47-b3c8-b3bf8dcd9de6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n## Quiz\nIn this quiz you will build a multi-layer feedforward neural network to classify traffic sign images using Keras.\n\n1. Set the first layer to a `Flatten()` layer with the `input_shape` set to (32, 32, 3).\n2. Set the second layer to a `Dense()` layer with an output width of 128.\n3. Use a ReLU activation function after the second layer.\n4. Set the output layer width to 5, because for this data set there are only 5 classes.\n5. Use a softmax activation function after the output layer.\n6. Train the model for 3 epochs. You should be able to get over 50% training accuracy. \n\nTo get started, review the Keras documentation about models and layers.\nThe Keras example of a [Multi-Layer Perceptron](https://github.com/fchollet/keras/blob/master/examples/mnist_mlp.py) network is similar to what you need to do here. Use that as a guide, but keep in mind that there are a number of differences.\n\n## Data Download\n\nThe data set used in these quizzes can be downloaded [here](https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58dbf6d5_small-traffic-set/small-traffic-set.zip).",
              "instructor_notes": ""
            },
            {
              "id": 626780,
              "key": "42247c74-11ad-4dc9-8e13-9f749464e8ba",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewa8079be4",
              "pool_id": "jupyter",
              "view_id": "a8079be4-11c0-4ea1-a174-3dc4884ff55d",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 626781,
          "key": "b3462e6b-ad27-48d5-b896-ede39b898eee",
          "title": "Convolutions in Keras",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b3462e6b-ad27-48d5-b896-ede39b898eee",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626782,
              "key": "1270b53b-e933-4415-af2e-c3838cbc81af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Convolutions\n1. Build from the previous network.\n2. Add a [convolutional layer](https://keras.io/layers/convolutional/#convolution2d) with 32 filters, a 3x3 kernel, and valid padding before the flatten layer.\n3. Add a ReLU activation after the convolutional layer.\n4. Train for 3 epochs again, should be able to get over 50% accuracy.\n\nHint: The Keras example of a [convolutional neural](https://github.com/fchollet/keras/blob/master/examples/mnist_cnn.py) network for MNIST would be a good example to review.\n",
              "instructor_notes": ""
            },
            {
              "id": 626783,
              "key": "9fd2d5f0-decf-4a05-9e30-c6ef5fb71cc8",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view70caa32d",
              "pool_id": "jupyter",
              "view_id": "70caa32d-5aa1-4ef9-a529-3c315fd28575",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 626888,
          "key": "a87a071d-5a3c-4841-bf50-673068264a81",
          "title": "Pooling in Keras",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a87a071d-5a3c-4841-bf50-673068264a81",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626891,
              "key": "a6a55a9f-d5fe-445b-9cc8-7cb502243d30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Pooling\n\n1. Build from the previous network\n2. Add a 2x2 [max pooling layer](https://keras.io/layers/pooling/#maxpooling2d) immediately following your convolutional layer.\n3. Train for 3 epochs again. You should be able to get over 50% training accuracy.",
              "instructor_notes": ""
            },
            {
              "id": 626894,
              "key": "47251b1e-6c49-4863-a449-8f256363fb52",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewb6ddd368",
              "pool_id": "jupyter",
              "view_id": "b6ddd368-7f7d-4c1e-be24-9305735563c4",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 626890,
          "key": "e66600bf-391e-4816-8ea0-551705bba0e2",
          "title": "Dropout in Keras",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e66600bf-391e-4816-8ea0-551705bba0e2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626902,
              "key": "c02480a7-06a0-433b-815c-6a0ecca24cde",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Dropout\n\n1. Build from the previous network.\n2. Add a [dropout](https://keras.io/layers/core/#dropout) layer after the pooling layer. Set the dropout rate to 50%.\n3. Make sure to note from the documentation above that the rate specified for dropout in Keras is the opposite of TensorFlow! TensorFlow uses the probability to *keep* nodes, while Keras uses the probability to *drop* them.\n",
              "instructor_notes": ""
            },
            {
              "id": 626900,
              "key": "fab91183-8cbb-498b-8e1d-4ebc10919a02",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9d25cd91",
              "pool_id": "jupyter",
              "view_id": "9d25cd91-2da4-42e4-975e-6239fc132400",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 626889,
          "key": "e3057cdb-97ba-4f8c-9a8b-e00c9de58f41",
          "title": "Testing in Keras",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e3057cdb-97ba-4f8c-9a8b-e00c9de58f41",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626901,
              "key": "2a418df7-2078-4594-ba21-d58d51a00733",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Test\nOnce you've picked out your best model, it's time to test it!\n\n1. Try to get the highest validation accuracy possible. Feel free to use all the previous concepts and train for as many epochs as needed.\n2. Select your best model and train it one more time.\n3. Use the test data and the [Keras `evaluate()`](https://keras.io/models/model/#evaluate) method to see how well the model does.\n",
              "instructor_notes": ""
            },
            {
              "id": 626903,
              "key": "5903c226-887f-45a9-a3b7-1d2d7a8ffd17",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewe263bec5",
              "pool_id": "jupyter",
              "view_id": "e263bec5-1ef5-4bf7-aecf-b63b0f05fbdf",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 189264,
          "key": "9b69e19a-db75-4bb4-b705-81e3ae9e4295",
          "title": "Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9b69e19a-db75-4bb4-b705-81e3ae9e4295",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197199,
              "key": "0b27c8eb-1d45-4318-a436-897118c61ce2",
              "title": "Conclusion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iLeQi96NRy0",
                "china_cdn_id": "iLeQi96NRy0.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}