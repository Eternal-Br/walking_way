WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:02.430
では 先に進んで 1 つずつ見ていき

00:00:02.430 --> 00:00:05.115
LookAway ノードについて話していきましょう

00:00:05.115 --> 00:00:08.381
インポートされたモジュールは simple arm のモジュールに

00:00:08.381 --> 00:00:09.839
似ていますが ここではカメラデータを利用できるように

00:00:09.839 --> 00:00:14.375
 image メッセージタイプがインポートされています

00:00:14.375 --> 00:00:17.429
ここでは ロボットアームの現在の移動状態と位置履歴をより正確に追跡できるように

00:00:17.429 --> 00:00:20.850
このノードのクラスを定義します

00:00:20.850 --> 00:00:23.175
前のノードの定義のように

00:00:23.175 --> 00:00:27.120
 ノードは rospy.init_node 関数を使用して初期化されます

00:00:27.120 --> 00:00:28.380
 メソッドの最後に

00:00:28.379 --> 00:00:33.240
 rospy.spin を使用して シャットダウン要求がノードによって受信されるまでブロックします

00:00:33.240 --> 00:00:36.179
最初のサブスクライバー self.sub1 は

00:00:36.179 --> 00:00:40.079
 simple_arm/joint_states トピックにサブスクライブします

00:00:40.079 --> 00:00:43.934
ノードは arm が動いてないときはカメラのみを確認するように記述されます

00:00:43.935 --> 00:00:46.800
simple_arm/joint_state にサブスクライブすることで

00:00:46.799 --> 00:00:49.709
arm 位置の変化を追跡することができます

00:00:49.710 --> 00:00:54.450
このトピックのメッセージタイプはjoint_stateで

00:00:54.450 --> 00:00:58.410
メッセージごとにメッセージデータはjoint_state_callback関数に渡されます

00:00:58.409 --> 00:01:00.884
 2 つ目のサブスクライバー self.sub2 は

00:01:00.884 --> 00:01:04.364
 rgb_camera/image _raw トピックにサブスクライブします

00:01:04.364 --> 00:01:07.829
このメッセージタイプはimageで、メッセージごとにメッセージ

00:01:07.829 --> 00:01:10.064
データはlook_away_callback関数に渡されます

00:01:10.064 --> 00:01:14.545
 サービスプロキシは ノードからサービスを呼び出せる方法です

00:01:14.545 --> 00:01:18.765
ここの service proxy は 呼び出したいサービスの名前と

00:01:18.765 --> 00:01:21.060
サービスクラス定義を使って作成されます

00:01:21.060 --> 00:01:25.935
この場合arm_mover/safe_moveとGoToPositionです

00:01:25.935 --> 00:01:30.609
実際のサービスへの呼び出しは look_away_callback メソッドで行われます

00:01:30.609 --> 00:01:32.594
コードでは 2 つのヘルパーが定義されています

00:01:32.594 --> 00:01:36.614
uniform_image と coord_equa.l です

00:01:36.614 --> 00:01:40.784
uniform_image メソッドは画像を入力として取得し

00:01:40.784 --> 00:01:45.149
 画像のすべてのカラー値が最初のピクセルの値と同じであるかどうかを確認します

00:01:45.150 --> 00:01:48.705
つまり 画像のすべてのカラー値が同じであることを確認します

00:01:48.704 --> 00:01:52.890
coord_equal メソッドは 座標 coord_1

00:01:52.890 --> 00:01:57.545
および coord_2 が指定許容値を上限として等しい成分を持つ場合 true を返します

00:01:57.545 --> 00:02:02.219
 self.sub1 が simple_arm/joint _states トピックでメッセージを受信するとき

00:02:02.219 --> 00:02:06.510
メッセージはjoint_states_callback関数に変数dataで渡されます

00:02:06.510 --> 00:02:10.500
joint_states_callbackはcoord_equal ヘルパー関数を使用して

00:02:10.500 --> 00:02:14.759
データで提供された現在のjoint_statesが

00:02:14.759 --> 00:02:18.299
  self.last_position に保存されている前の joint_states と同じかどうか確認します

00:02:18.300 --> 00:02:20.925
現在の joint_states と前のが同じ場合

00:02:20.925 --> 00:02:22.439
指定許容値を上限とし

00:02:22.439 --> 00:02:24.335
 arm は動きを停止します

00:02:24.335 --> 00:02:27.735
よって self.arm_moving フラグは false に設定されます

00:02:27.735 --> 00:02:30.755
現在の joint_states と前のが異なる場合

00:02:30.754 --> 00:02:32.400
アームはまだ動き続けています

00:02:32.400 --> 00:02:36.180
この場合 メソッドは現在の位置データで

00:02:36.180 --> 00:02:40.795
 self.last_position を更新し self.arm_moving を true に設定します

00:02:40.794 --> 00:02:48.299
 look_away_ callback は rgb_camera/image_raw topic からデータを受信しています

00:02:48.300 --> 00:02:52.995
このメソッドの最初の行は アームが移動していないことを検証し

00:02:52.995 --> 00:02:54.680
画像が均一かどうかを確認します

00:02:54.680 --> 00:02:57.780
 arm が動いてなくて画像が均一である場合は

00:02:57.780 --> 00:03:03.185
 GoToPositionRequest メッセージが作成されて safe_move サービスを使用して送信され

00:03:03.185 --> 00:03:06.425
 両方のジョイント角が 1.57 に移動します

00:03:06.425 --> 00:03:10.260
また このメソッドは カメラがよりいい画像を返すために経過した時間で均一な画像を検出したという

00:03:10.259 --> 00:03:14.649
警告メッセージをログに記録します

