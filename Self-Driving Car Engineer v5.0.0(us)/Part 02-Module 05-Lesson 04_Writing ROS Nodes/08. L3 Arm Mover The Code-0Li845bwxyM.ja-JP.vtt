WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:03.935
ここでは arm_mover コードを実施して何が起こっているのかを説明します

00:00:03.935 --> 00:00:06.660
arm_mover 用にインポートされたモジュールは 2 つの新しいインポートを除いて

00:00:06.660 --> 00:00:09.945
simple_arm と同じです

00:00:09.945 --> 00:00:14.250
ジョイント状態メッセージと単純なアーム サービス モジュールです

00:00:14.250 --> 00:00:19.230
ジョイント状態メッセージはsimple_arm / joint_statesトピックに発行され

00:00:19.230 --> 00:00:21.914
アームの位置を監視するために使用されます

00:00:21.914 --> 00:00:25.439
シンプルなアーム パッケージとサービ スモジュール

00:00:25.440 --> 00:00:29.925
SRV は ビルド プロセスの一部として Catkin によって自動的に生成されます

00:00:29.925 --> 00:00:34.590
ジョイント位置が目標に近い場合aｔ_goal関数はtrueを返します

00:00:34.590 --> 00:00:37.158
リアルワールドでセンサ-を扱う場合

00:00:37.158 --> 00:00:39.340
いくらかのノイズが発生します

00:00:39.340 --> 00:00:43.280
Gazebos シミュレーターによって報告されたジョイント位置についても同じことが言えます

00:00:43.280 --> 00:00:48.265
両方の位置がゴールの 0.05 ラジアン以内であれば true が返されます

00:00:48.265 --> 00:00:51.210
clamp_at_bundaries()関数は

00:00:51.210 --> 00:00:55.064
各ジョイントの最小ジョイント角と最大ジョイント角を制約する役目を担います

00:00:55.064 --> 00:00:58.109
通過したジョイント角度が操作可能範囲外の場合

00:00:58.109 --> 00:01:00.982
アームは最も近い許容値に固定されます

00:01:00.982 --> 00:01:04.799
最小ジョイント角および最大ジョイント角がパラメーター サーバーから検索され

00:01:04.799 --> 00:01:07.304
境界でclamp関数が毎回呼び出されます

00:01:07.305 --> 00:01:10.245
Tildy ～はプライベート空間名を表す(ユーザのホームディレクトリ)を示す

00:01:10.245 --> 00:01:15.335
取得したいパラメーターがノードの名前空間内にあることを示します

00:01:15.334 --> 00:01:20.634
たとえば ここでは /simple_ arm/です

00:01:20.635 --> 00:01:24.689
2 番目のパラメーターは

00:01:24.689 --> 00:01:29.569
 rospy.get_param がパラメーター サーバーからパラメーターを取得できなかった場合に返されるデフォルト値です

00:01:29.569 --> 00:01:33.344
この関数の残りは必要に応じて 単にジョイント角を固定します

00:01:33.344 --> 00:01:37.515
要求されたジョイント角が範囲外の場合 警告メッセージがログに記録されます

00:01:37.515 --> 00:01:40.469
move arm 関数は アームに移動を命令し

00:01:40.469 --> 00:01:44.435
アームが動いている間に経過した時間を返します

00:01:44.435 --> 00:01:48.510
注記関数内では

00:01:48.510 --> 00:01:53.590
/simple_arm /joint_states トピックからjoint_statesのメッセージを受信するために、rospy.wait_formessegeの命令を使用しています

00:01:53.590 --> 00:01:55.760
この関数はブロッキング コールバックと呼ばれます

00:01:55.760 --> 00:01:58.079
これは simple arm/joint states トピックでメッセージが受信されるまで

00:01:58.079 --> 00:02:01.739
メッセージは返されないことを意味します

00:02:01.739 --> 00:02:04.274
通常は wait_for_message は使用しないでください

00:02:04.275 --> 00:02:08.520
ここでは、(皆さんに)わかりやすく伝えるために使用しますが move_armが

00:02:08.520 --> 00:02:11.280
handle_safe_move_request 関数から呼び出されます

00:02:11.280 --> 00:02:14.805
この関数は 応答メッセージは戻りパラメーターとして返されます

00:02:14.805 --> 00:02:17.219
この点については後で詳しく説明します

00:02:17.219 --> 00:02:19.500
この関数は service handler 関数です

00:02:19.500 --> 00:02:20.699
サービス クライアントが

00:02:20.699 --> 00:02:25.185
GoToPositionRequest を safe_move service に送信すると この関数が呼び出されます

00:02:25.185 --> 00:02:28.349
関数パラメーター REQ または要求が

00:02:28.349 --> 00:02:34.405
GoToPositionRequest タイプの場合 サービス応答のタイプは GoToPositionResponse となります

00:02:34.405 --> 00:02:38.504
このサービス関数ハンドラーは 新しいサービス要求が受信されるたびに呼び出されます

00:02:38.504 --> 00:02:42.990
サービス要求に対する応答は関数から返されます

00:02:42.990 --> 00:02:44.381
もう 1 つの注記です

00:02:44.381 --> 00:02:46.860
move arm 関数がブロックしており

00:02:46.860 --> 00:02:50.150
アームの移動が終了する前 応答を返しません

00:02:50.150 --> 00:02:53.460
アームが移動命令を実行中は 受信メッセージを処理することはできず

00:02:53.460 --> 00:02:57.480
 他の有用な作業を Python スクリプト内で行うことができません

00:02:57.479 --> 00:02:59.669
この例に関しては何の問題もないですが

00:02:59.669 --> 00:03:04.614
 通常は 避けるべき作業です

00:03:04.615 --> 00:03:06.780
実行スレッドのブロッキングを回避するためのすぐれた方法の 1 つは

00:03:06.780 --> 00:03:10.900
Serviceの代わりにActionを使用することです

00:03:10.900 --> 00:03:13.590
以下のリンクにおいて

00:03:13.590 --> 00:03:16.759
トピック対サービス、またトピック対アクションをいつ使用するのが最適かについての詳細な情報を見つけることができます

00:03:16.759 --> 00:03:19.979
arm moverという名前でノードは初期化されており

00:03:19.979 --> 00:03:23.840
safe moveという名前で GoToPositionService が作成されています

00:03:23.840 --> 00:03:27.360
上記のように Tildy

00:03:27.360 --> 00:03:32.265
修飾子はsafe_moveがノードのプライベート名前空間に属することを意味します

00:03:32.264 --> 00:03:38.654
結果的に サービス名は /arm_mover/safe_move となります

00:03:38.655 --> 00:03:41.319
rospy.serve_call への3番目のパラメータは

00:03:41.319 --> 00:03:44.340
rospy.service_call への thrim パラメーターは

00:03:44.340 --> 00:03:48.060
サービス要求を受信したときに呼び出す必要がある関数です

00:03:48.060 --> 00:03:53.955
最後に rospy.spin はシャットダウン要求がノードによって受信されるまでブロックします

00:03:53.955 --> 00:03:56.760
この行を入れない場合

00:03:56.759 --> 00:04:00.840
mover_service が返され スクリプトの完了の実行が失敗します

00:04:00.840 --> 00:04:03.974
最終的に if_name_=_main block となります

00:04:03.974 --> 00:04:07.000
このコード セクションは simple_mover のセクションと似ています

