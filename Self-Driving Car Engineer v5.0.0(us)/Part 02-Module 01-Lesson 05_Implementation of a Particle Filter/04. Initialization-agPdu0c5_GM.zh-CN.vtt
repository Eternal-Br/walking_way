WEBVTT
Kind: captions
Language: zh-CN

00:00:00.169 --> 00:00:01.710
要实现一个粒子滤波器

00:00:01.710 --> 00:00:05.429
你要做的第一件事情就是初始化

00:00:05.429 --> 00:00:06.990
所有粒子

00:00:06.990 --> 00:00:11.150
你必须决定要使用的粒子数量

00:00:11.150 --> 00:00:13.890
这个参数大多数情况下是按经验确定的

00:00:13.890 --> 00:00:15.960
但从理论上说 粒子滤波器

00:00:15.960 --> 00:00:19.410
会在粒子数量接近无限大时

00:00:19.410 --> 00:00:22.199
准确地呈现贝叶斯后验分布

00:00:22.199 --> 00:00:24.149
如果粒子数量太少

00:00:24.149 --> 00:00:26.549
则不够覆盖所有高可能性位置

00:00:26.550 --> 00:00:30.269
因此可能漏掉准确位置

00:00:30.269 --> 00:00:32.609
例如 如果这个网格里的所有单元格

00:00:32.609 --> 00:00:35.219
是车辆所处位置的可能性均等

00:00:35.219 --> 00:00:37.289
而你只有三个粒子

00:00:37.289 --> 00:00:39.269
那么 粒子数量就不足以表达

00:00:39.270 --> 00:00:40.980
这个概率

00:00:40.979 --> 00:00:43.199
但是 粒子数量太多

00:00:43.200 --> 00:00:45.330
会拖慢你的滤波器 并阻止它

00:00:45.329 --> 00:00:49.359
实时定位无人驾驶车

00:00:49.359 --> 00:00:52.649
粒子初始化有两种主要方式

00:00:52.649 --> 00:00:56.250
首先 在状态空间里均匀取样

00:00:56.250 --> 00:00:59.549
例如 你可以把状态空间划分成一个网格

00:00:59.549 --> 00:01:01.949
在每个单元格中放置一个粒子

00:01:01.950 --> 00:01:04.450
但是 这种方法有局限性

00:01:04.450 --> 00:01:07.350
不适用于状态空间太大的情况 例如

00:01:07.349 --> 00:01:09.299
无人驾驶车的状态空间跨度

00:01:09.299 --> 00:01:11.429
很大 可以包括整个

00:01:11.430 --> 00:01:13.140
地球表面

00:01:13.140 --> 00:01:14.879
第二种初始化方法

00:01:14.879 --> 00:01:17.939
是在某个初始估算值周围取样

00:01:17.939 --> 00:01:20.310
对无人驾驶车 初始估算值

00:01:20.310 --> 00:01:24.061
可能来自全球定位系统 GPS

00:01:24.061 --> 00:01:26.519
在定位课程刚开始的时候

00:01:26.519 --> 00:01:29.789
我们说过 不能单独依赖 GPS 进行定位

00:01:29.790 --> 00:01:33.270
因为它准确度低 在某些环境下可用性

00:01:33.269 --> 00:01:34.869
受限

00:01:34.870 --> 00:01:37.200
但是 GPS 在提供粗略的初始位置估算方面

00:01:37.200 --> 00:01:39.810
非常有用

00:01:39.810 --> 00:01:42.540
如果要在粒子滤波器实战项目中实现初始化

00:01:42.540 --> 00:01:44.880
我希望你能从高斯分布中取样

00:01:44.879 --> 00:01:47.189
从而初始化你的粒子滤波器

00:01:47.189 --> 00:01:49.829
同时考虑到初始 GPS 位置估算

00:01:49.829 --> 00:01:52.530
的高斯传感器噪声

00:01:52.530 --> 00:01:54.840
和初始航向估算

00:01:54.840 --> 00:01:58.829
下面 你需要在 C++ 中练习操作

00:01:58.829 --> 00:02:03.060
使用 C++ 标准库、正态分布函数

00:02:03.060 --> 00:02:05.990
在一个 GPS 测量值周围进行位置取样

