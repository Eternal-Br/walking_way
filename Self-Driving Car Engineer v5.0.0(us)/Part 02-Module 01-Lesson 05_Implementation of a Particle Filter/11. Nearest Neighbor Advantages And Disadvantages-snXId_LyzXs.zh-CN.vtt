WEBVTT
Kind: captions
Language: zh-CN

00:00:00.780 --> 00:00:03.780
现在 你已经掌握了解决数据关联问题的

00:00:03.779 --> 00:00:06.789
简单方法 我们来看一下小测试

00:00:06.790 --> 00:00:09.150
你会了解最近邻方法的

00:00:09.150 --> 00:00:12.839
一些优势和劣势

00:00:12.839 --> 00:00:14.719
我们后面会再讨论

00:00:14.720 --> 00:00:16.679
最近邻方法很好 因为

00:00:16.679 --> 00:00:19.949
它易于理解和实现

00:00:19.949 --> 00:00:22.890
以最近测量值为例

00:00:22.890 --> 00:00:26.429
这里 我们用红色圆圈显示了

00:00:26.429 --> 00:00:31.739
最近的激光雷达和每个地图路标之间的关联

00:00:31.739 --> 00:00:35.219
但是 简单的方法也有一些劣势

00:00:35.219 --> 00:00:39.030
比如 它们应付困难场景时性能不佳

00:00:39.030 --> 00:00:41.820
例如 如果测量值密度过高

00:00:41.820 --> 00:00:44.789
该方法就很容易出错

00:00:44.789 --> 00:00:47.159
因为这时候地图地标

00:00:47.159 --> 00:00:50.069
可能与多个测量值非常临近

00:00:50.070 --> 00:00:52.799
我们无法确定图像中哪个特征

00:00:52.799 --> 00:00:56.159
对应这些地图地标

00:00:56.159 --> 00:00:58.619
此最近邻算法

00:00:58.619 --> 00:01:02.309
非常低效 因为对于每个地标

00:01:02.310 --> 00:01:04.620
你必须彻底搜索所有测量值

00:01:04.620 --> 00:01:07.530
才能找到最短距离的那个值

00:01:07.530 --> 00:01:11.460
因此 复杂度是 mn 分之 O

00:01:11.459 --> 00:01:14.219
其中 m 是地标数量

00:01:14.219 --> 00:01:17.230
N 是传感器测量值的数量

00:01:17.230 --> 00:01:21.060
如果有很多传感器测量值或地标

00:01:21.060 --> 00:01:24.210
最近邻可能非常慢

00:01:24.209 --> 00:01:27.329
此如果某个传感器非常嘈杂

00:01:27.329 --> 00:01:30.269
你就很容易匹配到假特征

00:01:30.269 --> 00:01:32.369
假特征实际上不会把

00:01:32.370 --> 00:01:36.540
现实世界中的任何对象和地图地标对应起来

00:01:36.540 --> 00:01:39.810
右侧的地标由于传感器噪

00:01:39.810 --> 00:01:42.140
出现关联错误

00:01:42.140 --> 00:01:45.170
你可以看出 另一个匹配是正确的

00:01:45.170 --> 00:01:49.820
因为它匹配了这边另一个地标匹配的图形

00:01:49.819 --> 00:01:52.429
最近邻的另一个劣势

00:01:52.430 --> 00:01:56.120
是它在车辆位置估算时

00:01:56.120 --> 00:01:57.410
容错稳健度不高

00:01:57.409 --> 00:02:00.439
如果车辆位置有些误差

00:02:00.439 --> 00:02:03.799
最近邻也会产生误差

00:02:03.799 --> 00:02:06.469
在这里 车辆偏移到了右边

00:02:06.469 --> 00:02:09.199
因此 测量值也偏移到了右边

00:02:09.199 --> 00:02:12.010
如红色线条所示

00:02:12.009 --> 00:02:15.009
但是 最近邻不会看到这个图案

00:02:15.009 --> 00:02:17.810
它会挑选一些错误的对应

00:02:17.810 --> 00:02:20.240
就是黑色圈出的部分

00:02:20.240 --> 00:02:22.520
最近邻的另一个劣势

00:02:22.520 --> 00:02:25.100
是它不考虑传感器的

00:02:25.099 --> 00:02:26.870
不确定性

00:02:26.870 --> 00:02:30.650
例如 假设你有一个雷达传感器

00:02:30.650 --> 00:02:33.590
它分方位测量非常准确

00:02:33.590 --> 00:02:36.650
但没有测距仪的准确

00:02:36.650 --> 00:02:40.129
这里的绿色椭圆代表距离

00:02:40.129 --> 00:02:42.500
这些雷达测量值的

00:02:42.500 --> 00:02:45.009
距离和方位值的不确定性

00:02:45.009 --> 00:02:47.780
最近邻会选择这个匹配

00:02:47.780 --> 00:02:50.689
但另一个匹配可能性更高

00:02:50.689 --> 00:02:53.419
因为传感器方位测量非常准确

00:02:53.419 --> 00:02:57.629
而距离大小测量不怎么准确

00:02:57.629 --> 00:02:59.900
我们总结一下

00:02:59.900 --> 00:03:02.390
最近邻数据关联法

00:03:02.389 --> 00:03:05.569
易于理解和实现

00:03:05.569 --> 00:03:08.939
在很多情况下效果很好

00:03:08.939 --> 00:03:12.379
但是 它对于高密度的测量值

00:03:12.379 --> 00:03:15.349
传感器噪或位置估算误差

00:03:15.349 --> 00:03:17.519
稳健度欠佳

00:03:17.520 --> 00:03:19.969
它计算效率低下

00:03:19.969 --> 00:03:23.974
而且不会考虑传感器的不确定性

00:03:23.974 --> 00:03:25.849
现在 你已经知道了如何将

00:03:25.849 --> 00:03:30.079
传感器测量值和地图地标相关联

00:03:30.080 --> 00:03:32.990
接下来 你要学习如何在粒子滤波器中

00:03:32.990 --> 00:03:34.540
实现更新步骤

