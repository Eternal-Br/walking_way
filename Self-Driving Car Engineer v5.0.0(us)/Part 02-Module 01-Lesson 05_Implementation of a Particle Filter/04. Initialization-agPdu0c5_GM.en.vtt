WEBVTT
Kind: captions
Language: en

00:00:00.169 --> 00:00:01.710
The very
first thing you'll

00:00:01.710 --> 00:00:05.429
need to do to implement a
particle filter is initialize

00:00:05.429 --> 00:00:06.990
all your particles.

00:00:06.990 --> 00:00:11.150
You'll have to decide how many
particles you want to use.

00:00:11.150 --> 00:00:13.890
This parameter is mostly
decided empirically,

00:00:13.890 --> 00:00:15.960
but theoretically,
the particle filter

00:00:15.960 --> 00:00:19.410
will exactly represent the
Bayesian posterior distribution

00:00:19.410 --> 00:00:22.199
as the number of particles
approaches infinity.

00:00:22.199 --> 00:00:24.149
If you have too
few particles, you

00:00:24.149 --> 00:00:26.549
will not have enough to cover
all of the high likelihood

00:00:26.550 --> 00:00:30.269
positions, so you might
miss the correct position.

00:00:30.269 --> 00:00:32.609
For instance, if each
cell in this grid

00:00:32.609 --> 00:00:35.219
is equally likely to
be the car's position,

00:00:35.219 --> 00:00:37.289
and you only have
three particles,

00:00:37.289 --> 00:00:39.269
you wouldn't have enough
particles right now

00:00:39.270 --> 00:00:40.980
to represent this.

00:00:40.979 --> 00:00:43.199
However, having
too many particles

00:00:43.200 --> 00:00:45.330
will slow down your
filter, and prevent it

00:00:45.329 --> 00:00:49.359
from localizing a
self-driving car in real time.

00:00:49.359 --> 00:00:52.649
There are two main ways you
can initialize your particles.

00:00:52.649 --> 00:00:56.250
The first is to sample uniformly
across the state space.

00:00:56.250 --> 00:00:59.549
For instance, you could divide
the state space into a grid,

00:00:59.549 --> 00:01:01.949
and put one particle
in each cell.

00:01:01.950 --> 00:01:04.450
However, this approach
is not very practical

00:01:04.450 --> 00:01:07.350
if the state space is too
large, such as in the case

00:01:07.349 --> 00:01:09.299
of a self-driving
car, where the state

00:01:09.299 --> 00:01:11.429
space spans essentially
the entire land

00:01:11.430 --> 00:01:13.140
surface of the earth.

00:01:13.140 --> 00:01:14.879
The second approach
for initialization

00:01:14.879 --> 00:01:17.939
is to sample around some
kind of initial estimate.

00:01:17.939 --> 00:01:20.310
For a self-driving car,
this initial estimate

00:01:20.310 --> 00:01:24.061
can come from a global
positioning system, or GPS.

00:01:24.061 --> 00:01:26.519
If you remember from the very
beginning of the localization

00:01:26.519 --> 00:01:29.789
module, you cannot rely on
GPS alone for localization,

00:01:29.790 --> 00:01:33.270
because of its low accuracy and
reduced availability in certain

00:01:33.269 --> 00:01:34.869
environments.

00:01:34.870 --> 00:01:37.200
However, GPS can be
very useful to provide

00:01:37.200 --> 00:01:39.810
initial rough estimate
of your location.

00:01:39.810 --> 00:01:42.540
For implementation in the
particle filter project,

00:01:42.540 --> 00:01:44.880
I want you to initialize
your particle filter

00:01:44.879 --> 00:01:47.189
by sampling from a
Gaussian distribution,

00:01:47.189 --> 00:01:49.829
Taking into account
Gaussian sensor noise

00:01:49.829 --> 00:01:52.530
around the initial
GPS position estimate,

00:01:52.530 --> 00:01:54.840
and the initial
heading estimate.

00:01:54.840 --> 00:01:58.829
Now, I want you to practice
doing this in C++ by using

00:01:58.829 --> 00:02:03.060
the C++ standard library, normal
distribution function to sample

00:02:03.060 --> 00:02:05.990
positions around
a GPS measurement.

