WEBVTT
Kind: captions
Language: zh-CN

00:00:00.500 --> 00:00:03.160
迄今为止 你已经学会了一些技巧

00:00:03.160 --> 00:00:05.470
知道了如何部署粒子滤波器 以及如何评估

00:00:05.469 --> 00:00:07.900
滤波器的准确性

00:00:07.900 --> 00:00:10.630
下面 我们一起看一下

00:00:10.630 --> 00:00:14.020
完成实战项目使用的代码

00:00:14.019 --> 00:00:17.919
首先 我们来看 main.cvp 这个文件

00:00:17.920 --> 00:00:20.470
这个文件会运行你的粒子滤波器

00:00:20.469 --> 00:00:23.169
测量其运行时间 然后在每个步骤

00:00:23.170 --> 00:00:26.170
计算加权误差

00:00:26.170 --> 00:00:27.670
你要做的第一件事

00:00:27.670 --> 00:00:30.100
就是在滤波器中的 To Do 注释下

00:00:30.100 --> 00:00:32.728
设置粒子数量

00:00:32.728 --> 00:00:36.420
M 代表粒子数量

00:00:36.420 --> 00:00:38.609
这里 我已经设置了你要使用的

00:00:38.609 --> 00:00:41.579
不同测量值的不确定性

00:00:41.579 --> 00:00:46.469
接下来 main 函数读入每个步骤的

00:00:46.469 --> 00:00:52.329
数学数据、控制数据和观察数据

00:00:52.329 --> 00:00:54.869
在这个 for 循环中 你需要在这个 To Do 注释下

00:00:54.869 --> 00:01:00.119
实现粒子滤波器的一个步骤

00:01:00.119 --> 00:01:01.829
在每个时间步结束时

00:01:01.829 --> 00:01:05.649
你需要计算并打印出加权误差

00:01:05.650 --> 00:01:07.440
最后 粒子滤波器

00:01:07.439 --> 00:01:10.140
经历整个驾驶流程后

00:01:10.140 --> 00:01:14.150
Main 函数会计算你的滤波器的运行时间

00:01:14.150 --> 00:01:16.710
这就是 main.cvp 文件的功能

00:01:16.709 --> 00:01:19.140
大多数粒子滤波器代码的实现

00:01:19.140 --> 00:01:21.269
都在 particlefilter.cvp 文件中

00:01:21.269 --> 00:01:23.640
这个文件包括了粒子滤波器类不同函数的

00:01:23.640 --> 00:01:26.459
所有实现

00:01:26.459 --> 00:01:28.199
现在 我们来看一下完成这个项目

00:01:28.200 --> 00:01:30.329
所需要的每一个函数

00:01:30.329 --> 00:01:32.700
第一个要完成的函数是 init

00:01:32.700 --> 00:01:35.840
这个函数代入 GPS 位置

00:01:35.840 --> 00:01:39.120
初始航向预估 以及这些测量值的

00:01:39.120 --> 00:01:40.439
不确定性数列

00:01:40.439 --> 00:01:43.200
然后 它从围绕这些测量值的

00:01:43.200 --> 00:01:46.109
高斯分布中取样 初始化所有粒子

00:01:46.109 --> 00:01:49.230
它还会将所有粒子权重初始化为 1

00:01:49.230 --> 00:01:51.570
你可以看一下 particle_struct 和

00:01:51.569 --> 00:01:53.729
Particle_filter.h 的详情

00:01:53.730 --> 00:01:56.130
粒子滤波器类中 包括了

00:01:56.129 --> 00:01:57.719
更新后的粒子结构

00:01:57.719 --> 00:02:00.480
因此 函数不会返回任何内容

00:02:00.480 --> 00:02:03.060
下一个函数是预测函数

00:02:03.060 --> 00:02:05.609
它代入不同时间步之间的时间间隔

00:02:05.609 --> 00:02:09.599
速度和角速度测量值的不确定性

00:02:09.599 --> 00:02:13.620
以及当前时间步的

00:02:13.620 --> 00:02:16.030
速度和角速度测量值

00:02:16.030 --> 00:02:17.560
然后 它利用这些测量值

00:02:17.560 --> 00:02:19.900
更新每个粒子的位置估算

00:02:19.900 --> 00:02:23.830
并添加高斯噪作为传感器噪

00:02:23.830 --> 00:02:25.900
同样地 你可以从高斯分布中取样

00:02:25.900 --> 00:02:28.330
从而添加高斯噪但该高斯分布

00:02:28.330 --> 00:02:31.240
的均值必须等于更新的粒子位置

00:02:31.240 --> 00:02:34.090
其标准偏差等于测量值的

00:02:34.090 --> 00:02:35.331
标准偏差

00:02:39.020 --> 00:02:40.909
这里的数据关联函数

00:02:40.909 --> 00:02:45.469
输入 LandmarkObs 对象的两个向量

00:02:45.469 --> 00:02:47.719
你可以在 helperfunctions.h 找到

00:02:47.719 --> 00:02:49.250
这个结构的定义

00:02:53.139 --> 00:02:55.189
第一个向量是某个特定粒子和处于

00:02:55.189 --> 00:02:57.979
传感器范围内的所有地图地标之间的

00:02:57.979 --> 00:02:59.519
预测测量值

00:03:02.740 --> 00:03:05.590
这里的另一个向量 是激光雷达的

00:03:05.590 --> 00:03:07.780
实际地标测量值

00:03:07.780 --> 00:03:09.879
这个函数会执行最近邻数据关联

00:03:09.879 --> 00:03:12.939
并为每个传感器观察的数据

00:03:12.939 --> 00:03:16.740
分配相关联的地图地标 ID

00:03:16.740 --> 00:03:19.439
接下来 你需要完成更新权重函数

00:03:19.439 --> 00:03:22.859
这个函数代入传感器范围

00:03:22.860 --> 00:03:25.880
地标测量值的不确定性

00:03:25.879 --> 00:03:28.740
一个地标测量值向量

00:03:28.740 --> 00:03:31.237
以及地图地标

00:03:31.236 --> 00:03:32.819
这里 你要做的第一件事

00:03:32.819 --> 00:03:35.129
就是预测传感器范围内

00:03:35.129 --> 00:03:39.609
每个粒子到所有地图地标的距离

00:03:39.610 --> 00:03:42.040
获得了这些预测的地标测量值后

00:03:42.039 --> 00:03:43.989
你就可以使用已经实现的数据关联函数

00:03:43.990 --> 00:03:47.320
把传感器测量值和地图地标

00:03:47.319 --> 00:03:49.280
关联起来

00:03:49.280 --> 00:03:51.409
你需要这些关联

00:03:51.409 --> 00:03:53.629
借助我们本课讨论过的

00:03:53.629 --> 00:03:56.930
高斯概率密度函数 来计算每个粒子的

00:03:56.930 --> 00:03:58.980
新权重

00:03:58.979 --> 00:04:01.340
最后 你需要对这些权重归一化处理

00:04:01.340 --> 00:04:03.710
将其范围转换为 0 到 1

00:04:03.710 --> 00:04:06.260
因为接下来 你需要使用这些权重

00:04:06.259 --> 00:04:09.739
作为重采样的概率

00:04:09.740 --> 00:04:10.909
进度不错

00:04:10.909 --> 00:04:13.544
下一函数是重采样函数

00:04:13.544 --> 00:04:15.919
你可以使用粒子滤波器中的粒子权重

00:04:15.919 --> 00:04:20.149
以及 C++ 标准库的离散分布函数

00:04:20.149 --> 00:04:22.819
把你的粒子更新为贝叶斯

00:04:22.819 --> 00:04:26.719
后验分布

00:04:26.720 --> 00:04:28.870
下面 最后一步

00:04:28.870 --> 00:04:30.759
你需要计算加权误差

00:04:30.759 --> 00:04:33.069
从而评估你的粒子滤波器

00:04:33.069 --> 00:04:35.199
这个代入某个特定时间步的

00:04:35.199 --> 00:04:37.689
地面真实位置

00:04:37.689 --> 00:04:40.389
然后使用每个粒子的权重

00:04:40.389 --> 00:04:43.819
计算出你的粒子滤波器的加权误差

00:04:43.819 --> 00:04:47.360
如果你想更深入了解这段代码

00:04:47.360 --> 00:04:52.129
可以自己查看 helperfunction.h、map.h、以及 particlefilter.h

00:04:52.129 --> 00:04:54.719
文件

00:04:54.720 --> 00:04:57.830
要编写并运行你自己的代码 你需要打开终端

00:04:57.829 --> 00:05:00.949
打开定位粒子滤波器的主目录

00:05:00.949 --> 00:05:06.379
然后键入 build.sh

00:05:06.379 --> 00:05:11.300
接着键入 run.sh 运行你的粒子滤波器

00:05:11.300 --> 00:05:13.581
现在 我把时间交给你

00:05:13.581 --> 00:05:16.040
所有工具都已齐备 完成你的

00:05:16.040 --> 00:05:17.510
粒子滤波器项目吧

00:05:17.509 --> 00:05:20.469
祝你好运

