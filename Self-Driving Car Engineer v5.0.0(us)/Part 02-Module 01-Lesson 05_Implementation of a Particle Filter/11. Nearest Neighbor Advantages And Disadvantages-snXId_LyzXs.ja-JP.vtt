WEBVTT
Kind: captions
Language: ja-JP

00:00:00.780 --> 00:00:03.780
データ関連性の問題を解決する
単純な方法がわかったので

00:00:03.779 --> 00:00:06.789
クイズの復習をします

00:00:06.790 --> 00:00:09.150
そして 
最近傍法の

00:00:09.150 --> 00:00:12.839
長所と短所
について学びます

00:00:12.839 --> 00:00:14.719
ではクイズに戻ります

00:00:14.720 --> 00:00:16.679
最近傍法は
優れてします、

00:00:16.679 --> 00:00:19.949
なぜなら、それを理解し実装することが
簡単だからです

00:00:19.949 --> 00:00:22.890
最も近い測定を
見てください

00:00:22.890 --> 00:00:26.429
ここに 最も近いライダー測定と
各マップのランドマークの間の

00:00:26.429 --> 00:00:31.739
関係性を赤色の丸で
示しています

00:00:31.739 --> 00:00:35.219
でもシンプルな手法は
難しいシナリオに対して

00:00:35.219 --> 00:00:39.030
ロバストでないという点で
幾つかデメリットがあります

00:00:39.030 --> 00:00:41.820
たとえば 高密度の測定は 
この手法において非常に誤差が

00:00:41.820 --> 00:00:44.789
多くなります 
これは

00:00:44.789 --> 00:00:47.159
1 つのマップランドマークが
複数の測定に対して

00:00:47.159 --> 00:00:50.069
非常に近くなり得るためです

00:00:50.070 --> 00:00:52.799
この画像のどの特徴が
これらのマップランドマークに

00:00:52.799 --> 00:00:56.159
対応するのかが
明確ではありません

00:00:56.159 --> 00:00:58.619
また 近傍アルゴリズムは
とても非効率です

00:00:58.619 --> 00:01:02.309
各ランドマーク
に対して

00:01:02.310 --> 00:01:04.620
すべての測定を検索し
最小距離のものを

00:01:04.620 --> 00:01:07.530
見つけなければ
ならないためです

00:01:07.530 --> 00:01:11.460
したがって、計算量は
O(mn)となります

00:01:11.459 --> 00:01:14.219
m はマップランドマーク
の数で

00:01:14.219 --> 00:01:17.230
n はセンサー測定
の数になります

00:01:17.230 --> 00:01:21.060
センサー測定またはランドマークが
たくさんある場合

00:01:21.060 --> 00:01:24.210
近傍法は非常に遅くなる
可能性があります

00:01:24.209 --> 00:01:27.329
さらに 
センサーに非常に

00:01:27.329 --> 00:01:30.269
ノイズが多い場合 
実際に実世界の物体に対応しない

00:01:30.269 --> 00:01:32.369
誤った特徴を
マップランドマークに

00:01:32.370 --> 00:01:36.540
対応付けてしまう
可能性があります

00:01:36.540 --> 00:01:39.810
右のランドマークには
センサーノイズによる

00:01:39.810 --> 00:01:42.140
誤った関連性があります

00:01:42.140 --> 00:01:45.170
この他方の相手が
正しいことがわかります

00:01:45.170 --> 00:01:49.820
理由は この他方のランドマークの相手の
ジオメトリと一致するからです

00:01:49.819 --> 00:01:52.429
近傍法の他の短所は 
車両の

00:01:52.430 --> 00:01:56.120
ローカライゼーションにおいて
誤差に

00:01:56.120 --> 00:01:57.410
堅牢ではないことです

00:01:57.409 --> 00:02:00.439
車両の位置に
誤差がいくつかある場合

00:02:00.439 --> 00:02:03.799
近傍法でも
いくつか誤差が発生します

00:02:03.799 --> 00:02:06.469
ここで 車は右に
移動します

00:02:06.469 --> 00:02:09.199
そのため 
この紫色の線で示されるように

00:02:09.199 --> 00:02:12.010
測定も右に移動します

00:02:12.009 --> 00:02:15.009
しかし 近傍法は
このパターンを見ずに

00:02:15.009 --> 00:02:17.810
黒い丸で囲んだ
間違った対応付けを

00:02:17.810 --> 00:02:20.240
選びます

00:02:20.240 --> 00:02:22.520
近傍法の
さらに別の短所は

00:02:22.520 --> 00:02:25.100
センサーの
不確実性を

00:02:25.099 --> 00:02:26.870
考慮しないことです

00:02:26.870 --> 00:02:30.650
たとえば 非常に正確な
方位測定を行う

00:02:30.650 --> 00:02:33.590
レーダーセンサーがあり 
距離測定はさほど正確

00:02:33.590 --> 00:02:36.650
ではないとします

00:02:36.650 --> 00:02:40.129
この緑色の
楕円は

00:02:40.129 --> 00:02:42.500
これらのレーダー測定の
距離と方位のディメンションの

00:02:42.500 --> 00:02:45.009
不確実性を表しています

00:02:45.009 --> 00:02:47.780
近傍法は
この相手を選びますが

00:02:47.780 --> 00:02:50.689
センサーが方位ディメンションにおいて
非常に正確で

00:02:50.689 --> 00:02:53.419
距離ディメンションにおいて
さほど正確でない場合

00:02:53.419 --> 00:02:57.629
この他方の相手のほうが
適しています

00:02:57.629 --> 00:02:59.900
ではまとめましょう

00:02:59.900 --> 00:03:02.390
近傍法の
データ関連付け手法は

00:03:02.389 --> 00:03:05.569
理解して実装するのは
簡単で

00:03:05.569 --> 00:03:08.939
多くの状況で
うまく機能します

00:03:08.939 --> 00:03:12.379
でも ローカライゼーションにおいて
密度の大きい測定

00:03:12.379 --> 00:03:15.349
センサーノイズ 
または誤差には

00:03:15.349 --> 00:03:17.519
堅牢ではありません

00:03:17.520 --> 00:03:19.969
計算するには
非効率なうえ

00:03:19.969 --> 00:03:23.974
センサーの不確実性も
考慮しません

00:03:23.974 --> 00:03:25.849
これで 取得した
センサー測定値を

00:03:25.849 --> 00:03:30.079
マップのランドマークと
関連付ける方法がわかったので

00:03:30.080 --> 00:03:32.990
次はパーティクルフィルターの
更新ステップを

00:03:32.990 --> 00:03:34.540
実装する方法を学習します

