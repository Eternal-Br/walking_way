WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.000
我们有个办法 可以提高效率

00:00:03.000 --> 00:00:06.000
按照经验 这个方法也能获得更好的样本

00:00:06.000 --> 00:00:11.000
我们使用一个大轮子来表示所有粒子和重要性权重

00:00:11.000 --> 00:00:18.000
每个粒子占据了其中部分面积 对应的是其重要性权重

00:00:18.000 --> 00:00:24.000
权重比较大的粒子 如 W5 占用的空间更大

00:00:24.000 --> 00:00:29.000
而权重较小的粒子占用空间更小

00:00:29.000 --> 00:00:36.000
在刚开始时 我们从所有索引的集合中猜想一个均匀的粒子索引

00:00:36.000 --> 00:00:38.000
我把它记作统一取样器 U

00:00:38.000 --> 00:00:43.000
取样范围是离散的索引 1 到 N

00:00:43.000 --> 00:00:49.000
在 Python 中记作 caveat 从 0 到 N-1

00:00:49.000 --> 00:00:52.000
假设我们选中了 W6

00:00:52.000 --> 00:00:55.000
接下来 我们的方法是 你要构造一个 β 函数

00:00:55.000 --> 00:01:01.000
然后 将其初始化为 0 在构造这些粒子时

00:01:01.000 --> 00:01:08.000
向该函数添加一个均匀抽取的连续值 范围从 0 到 W 最大值的 2 倍

00:01:08.000 --> 00:01:14.000
这也是重要性组中最大的重要性权重

00:01:14.000 --> 00:01:21.000
W5 是最大的 因此我们准备添加一个随机值 它最大可能是 W5 的两倍

00:01:21.000 --> 00:01:26.000
假设我们添加的值把我们带到了这里

00:01:26.000 --> 00:01:29.000
这是我们实际抽取的值

00:01:29.000 --> 00:01:33.000
从第 6 个粒子刚开始的地方测量 这里显示了初始化

00:01:33.000 --> 00:01:36.000
然后 我迭代下面的循环

00:01:36.000 --> 00:01:41.000
如果当前粒子的重要性权重不足以

00:01:41.000 --> 00:01:43.000
到达 β 的位置

00:01:43.000 --> 00:01:51.000
那么 如果 W 索引比 β 小 我从 β 中减去 W 索引值

00:01:51.000 --> 00:01:55.000
然后把索引增加 1

00:01:55.000 --> 00:01:59.000
发生了什么？ 我把索引移到了这里

00:01:59.000 --> 00:02:06.000
我把 β 的这部分移动到这里的这个点 还是和以前一样

00:02:06.000 --> 00:02:10.000
现在 在这个点上 β 比 W 索引值小

00:02:10.000 --> 00:02:12.000
这是下一个场景的条件

00:02:12.000 --> 00:02:14.000
这里索引=7

00:02:14.000 --> 00:02:20.000
这个索引 是我在重采样过程中选中的索引

00:02:20.000 --> 00:02:25.000
因此 我选择了粒子索引 现在我进行迭代 向 β 添加另一个均匀值

00:02:25.000 --> 00:02:27.000
比如 添加这个值

00:02:27.000 --> 00:02:30.000
这是我添加的值 这是 β 本来的值

00:02:30.000 --> 00:02:34.000
现在 同样的迭代会让索引值增加

00:02:34.000 --> 00:02:40.000
同时把 β 值减去这里的所有部分 也就是 W7

00:02:40.000 --> 00:02:44.000
然后跳到这里 选中粒子 1

00:02:44.000 --> 00:02:47.000
有一种情况很可能发生 那就是均匀值很小

00:02:47.000 --> 00:02:52.000
这时候同一个粒子会被选中两次

00:02:52.000 --> 00:02:56.000
我们可以看到 现在每个粒子被选中的概率都和

00:02:56.000 --> 00:02:59.000
它在这个粒子轮上所占的周长成正比

00:02:59.000 --> 00:03:04.000
这就是我实现重采样步骤的方法

00:03:04.000 --> 99:59:59.999
如果你有能力 希望你也在 Python 中实现这个特定的重采样器

