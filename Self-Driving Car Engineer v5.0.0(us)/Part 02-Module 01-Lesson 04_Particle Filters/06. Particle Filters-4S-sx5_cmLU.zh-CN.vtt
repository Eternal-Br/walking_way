WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.000
现在让我们深入看看粒子过滤器 这是今天上课的主题

00:00:04.000 --> 00:00:09.000
看粒子过滤器的这些答案真的很有趣

00:00:09.000 --> 00:00:14.000
首先 对于粒子过滤器的状态空间通常是连续的

00:00:14.000 --> 00:00:17.000
所以看到状态空间一个更加有趣的版本

00:00:17.000 --> 00:00:20.000
但是我们并没有被限制在单峰的分布上

00:00:20.000 --> 00:00:25.000
我们实际上能够表示出任意多峰的分布

00:00:25.000 --> 00:00:29.000
他们是一个近似的解 就像另外两个过滤器一样

00:00:29.000 --> 00:00:34.000
就效率而言 真实的世界仍然在外面

00:00:34.000 --> 00:00:37.000
以某一种体现方式 他们就是指数规模的

00:00:37.000 --> 00:00:42.000
比如在任何超过4维的空间用粒子过滤器表示都是一个错误的选择

00:00:42.000 --> 00:00:45.000
但是在一些其他的领域 大多是在追踪的领域

00:00:45.000 --> 00:00:49.000
他们的规模好了很多很多 我至今还没有看到一个好的解决办法

00:00:49.000 --> 00:00:54.000
对于实际使用粒子过滤器复杂性的问题上

00:00:54.000 --> 00:00:56.000
但是 粒子过滤器关键的优点

00:00:56.000 --> 00:00:58.000
事实上并不是这里这些

00:00:58.000 --> 00:01:01.000
至少在我的人生中 核心的优点就是

00:01:01.000 --> 00:01:04.000
他们很容易编程

00:01:04.000 --> 00:01:06.000
正如你现在希望看到的一样

00:01:06.000 --> 00:01:09.000
写一个粒子过滤器非常非常容易

00:01:09.000 --> 00:01:15.000
事实上你将会写你自己的粒子过滤器对于一个连续值得定位问题

00:01:15.000 --> 00:01:19.000
这个在很多方面都要难于我们之前谈论过的任何问题

00:01:19.000 --> 00:01:24.000
那么 让我们潜心于此 看看粒子过滤器

00:01:24.000 --> 00:01:28.000
这里是一个环境的地面规划

00:01:28.000 --> 00:01:32.000
这里机器人被定位 这里的表现被称作全局定位

00:01:32.000 --> 00:01:37.000
他不会被提示它在哪里 他必须找到

00:01:37.000 --> 00:01:40.000
它在哪里 基于他的传感器测量

00:01:40.000 --> 00:01:44.000
这个提供了他的距离传感就如这个蓝色的线表明的一样

00:01:44.000 --> 00:01:50.000
它们使用声呐传感器 意味着声音能够度量最近的障碍物的距离

00:01:50.000 --> 00:01:55.000
它必须使用一个距离传感器来决定一个好的后验分布对于他在的地方

00:01:55.000 --> 00:01:59.000
机器人并不知道的是他从走廊的中间开始

00:01:59.000 --> 00:02:03.000
事实上 它完全不确定它在那里

00:02:03.000 --> 00:02:06.000
现在这个粒子过滤器表示着它使用粒子

00:02:06.000 --> 00:02:10.000
每一个这些红色的点 这里有几千个

00:02:10.000 --> 00:02:14.000
是一个离散的猜测道路在哪里

00:02:14.000 --> 00:02:19.000
它被结构化成 X 轴和 Y 轴 还有一个运动朝向

00:02:19.000 --> 00:02:24.000
这三个值在一个构成了一个单独的猜测

00:02:24.000 --> 00:02:26.000
但是一个单独的猜测并不是一个过滤器

00:02:26.000 --> 00:02:29.000
它是几千个这样的猜测的集合

00:02:29.000 --> 00:02:35.000
合在一起组成了一个机器人的后验的近似表示

00:02:35.000 --> 00:02:37.000
那么让我们开始这个视频

00:02:37.000 --> 00:02:41.000
在开始 粒子是均匀地分布

00:02:41.000 --> 00:02:44.000
但是粒子过滤器让他们以一个比例存在

00:02:44.000 --> 00:02:50.000
依据于粒子和传感器测量的一致性

00:02:50.000 --> 00:02:54.000
非常快这个机器人会发现它在走廊上 但是有两个云存在

00:02:54.000 --> 00:02:57.000
因为这个走廊的对称性

00:02:57.000 --> 00:03:00.000
随着机器人进入其中一个办公室

00:03:00.000 --> 00:03:06.000
这个对称性被打破了 正确的粒子集合会存在

00:03:06.000 --> 00:03:09.000
让我们再放一次

00:03:09.000 --> 00:03:11.000
粒子过滤器的本质是

00:03:11.000 --> 00:03:15.000
让这些粒子猜测路在向哪里移动

00:03:15.000 --> 00:03:20.000
但是让最适合的粒子存活

00:03:20.000 --> 00:03:23.000
使得这个粒子和度量方式更加一致的

00:03:23.000 --> 00:03:26.000
更有可能存活 结果就是

00:03:26.000 --> 00:03:29.000
高概率的地方将会收集更多的粒子

00:03:29.000 --> 00:03:33.000
因此将会更好的代表机器人的后验信度

00:03:33.000 --> 00:03:36.000
这里粒子一起——这些几千个粒子

00:03:36.000 --> 00:03:38.000
现在被聚类在一个单独的位置

00:03:38.000 --> 00:03:46.000
这些组成了机器人定位他自己的近似信度

