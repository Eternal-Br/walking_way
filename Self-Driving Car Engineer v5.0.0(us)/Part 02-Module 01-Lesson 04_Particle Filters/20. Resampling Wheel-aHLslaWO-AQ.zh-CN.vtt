WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.000
这里是我实现重采样步骤的过程

00:00:03.000 --> 00:00:06.000
具体逻辑和我之前的图表中给出的一样

00:00:06.000 --> 00:00:11.000
我们正在创建一个新的粒子组 叫做 P3 刚开始时这是一个空组

00:00:11.000 --> 00:00:15.000
在这个程序中 我每次重采样时

00:00:15.000 --> 00:00:21.000
都会从添加之前的粒子组中的一个粒子 索引为 index

00:00:21.000 --> 00:00:26.000
这里是主循环 在末尾 我把 P3 再分配给 P

00:00:26.000 --> 00:00:28.000
这就是重采样步骤

00:00:28.000 --> 00:00:31.000
我的第一个索引是所及抽取的

00:00:31.000 --> 00:00:34.000
这是所有索引的统一随机取样器

00:00:34.000 --> 00:00:38.000
这里是运行变量 beta 设置为0.0

00:00:38.000 --> 00:00:43.000
为了提高点速度 我去掉了 W 的最大值i

00:00:43.000 --> 00:00:46.000
你可以不用这么做 它会在这里出现

00:00:46.000 --> 00:00:48.000
在这里有最大值没什么关系

00:00:48.000 --> 00:00:51.000
但接下来 我开始生成 N 个粒子 具体方法是

00:00:51.000 --> 00:00:55.000
向 beta 添加一个两倍的统一随机数字

00:00:55.000 --> 00:01:00.000
最大值在最大权重 w 的范围内

00:01:00.000 --> 00:01:03.000
现在 最大权重 w 的两倍是一个很大的步骤

00:01:03.000 --> 00:01:06.000
但是 添加一个位于 0 和 1 之间的变量

00:01:06.000 --> 00:01:11.000
实现了在 0 和 MW 的二倍之间均匀分布

00:01:11.000 --> 00:01:16.000
whilebeta 变量比当前索引的权重更大

00:01:16.000 --> 00:01:19.000
我从 beta 值中减去这个权重

00:01:19.000 --> 00:01:23.000
然后以 N 为模 把索引增加 1

00:01:23.000 --> 00:01:27.000
N 代表粒子总数 当它变小时 就完成了

00:01:27.000 --> 00:01:32.000
我可以只取这个粒子 执行添加、附加操作 然后重复

00:01:32.000 --> 00:01:35.000
这里的整个过程有点高级

00:01:35.000 --> 00:01:38.000
如果你能做对 我会非常赞叹

00:01:38.000 --> 00:01:40.000
我想你在做的时候能学到点东西

00:01:40.000 --> 00:01:43.000
实际上 一旦你知道了怎么做 编程就非常容易

00:01:43.000 --> 00:01:46.000
每次我们写了一个粒子滤波器之后 你都可以重用

00:01:46.000 --> 00:01:49.000
你用不着再费心思想一遍

00:01:49.000 --> 00:01:52.000
因为这里的这个过程没有任何和域相关的东西

00:01:52.000 --> 00:01:56.000
好的 我们运行看看 我点击运行 空组什么都没发生

00:01:56.000 --> 00:02:00.000
我打印出得到的粒子组

00:02:00.000 --> 00:02:02.000
这里有一个 print p 命令

00:02:02.000 --> 00:02:06.000
点击运行 当然了 我会得到 1000 个粒子 对吗？

00:02:06.000 --> 00:02:10.000
数量真不少 我们看一下

00:02:10.000 --> 00:02:14.000
如果你只看这里的第一个值 它们都一样

00:02:14.000 --> 00:02:18.000
都在 76 和 82 之间

00:02:18.000 --> 00:02:26.000
第二个值 都在 42、44、43、41、39、38 附近

00:02:26.000 --> 00:02:29.000
因此 我们得到的这组粒子

00:02:29.000 --> 00:02:31.000
是同位的

00:02:31.000 --> 00:02:34.000
因此 我们不会像之前那样得到一个完整随机的粒子组

00:02:34.000 --> 00:02:38.000
在重采样步骤里 我们可以看到 它给出了

00:02:38.000 --> 00:02:40.000
x 和 y 位置非常相似的粒子

00:02:40.000 --> 00:02:43.000
但是方向的相似度不高

00:02:43.000 --> 00:02:46.000
跳动范围很大 原因在于

00:02:46.000 --> 00:02:52.000
你想想看 我们迄今为止只有一个位置

00:02:52.000 --> 00:02:57.000
到地标的距离是独立于方向的

00:02:57.000 --> 00:03:02.000
例如 方向在保护测量值中不起任何作用

00:03:02.000 --> 00:03:04.000
因此在选择中也没有任何角色

00:03:04.000 --> 00:03:06.000
我再重复一遍 这是我们的 4 个地标

00:03:06.000 --> 00:03:08.000
我们测量的是到它们的距离

00:03:08.000 --> 00:03:12.000
朝这个方向的机器人有一个距离组

00:03:12.000 --> 00:03:16.000
朝另一个方向的机器人 比如这个

00:03:16.000 --> 00:03:19.000
有一个完全相同的距离组

00:03:19.000 --> 99:59:59.999
因此 在粒子特征中 方向没有任何作用

