WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:04.000
次は別のプログラミングの問題を出します

00:00:04.000 --> 00:00:07.000
粒子ではなく

00:00:07.000 --> 00:00:11.000
解の全体的な品質を出力してください

00:00:11.000 --> 00:00:17.000
ロボットの位置と粒子の集合を引数とする
コードevalをプログラミングしました

00:00:17.000 --> 00:00:20.580
方向ではなくxとyのロボットの位置に対して

00:00:20.580 --> 00:00:24.000
各粒子の平均的な残差を計算します

00:00:24.000 --> 00:00:29.160
粒子のxとロボットのxを比較し

00:00:29.160 --> 00:00:35.000
その差についてユークリッド距離を計算して
すべての値の平均を出します

00:00:35.000 --> 00:00:37.000
つまりすべてを合計するのです

00:00:37.000 --> 00:00:42.000
粒子の数で平均して上限がｍとなります

00:00:42.000 --> 00:00:44.640
面白いものがいくつかできました

00:00:44.640 --> 00:00:47.000
この世界はサイクリックなので

00:00:47.000 --> 00:00:51.000
ロボットは0．0 または99．9の位置に
いるかもしれません

00:00:51.000 --> 00:00:55.000
ほぼ同じ値ですが
この計算によれば異なる値です

00:00:55.000 --> 00:00:58.000
ここに正規化がありますが

00:00:58.000 --> 00:01:01.000
この世界がサイクリックであることが

00:01:01.800 --> 00:01:07.000
境界線で囲った推定される誤差に
悪影響を及ぼさないことを確かめます

00:01:07.000 --> 00:01:11.800
コンピュータモデルの演算にworld＿sizeを加えて

00:01:11.800 --> 00:01:16.000
同じものを引きますが行が長すぎて見えません

00:01:16.000 --> 00:01:18.000
いずれにせよeval関数を用いて

00:01:18.000 --> 00:01:23.000
一連の性能評価をしてみてください

00:01:23.000 --> 00:01:27.000
Runボタンを押したら
次のような結果が出るようにしてください

00:01:27.000 --> 00:01:32.000
4．9、3．6、2．9、2．8、3．1です

00:01:32.000 --> 00:01:34.000
これが残差です

00:01:34.000 --> 00:01:36.000
世界のサイズは100×100なので

00:01:36.000 --> 00:01:40.000
実際には世界の大きさに比べると小さい残差です

00:01:40.000 --> 00:01:42.000
反復ごとに

00:01:42.000 --> 00:01:45.930
このルーチンによって生成される
残差が得られるようにコーディングできますか？

