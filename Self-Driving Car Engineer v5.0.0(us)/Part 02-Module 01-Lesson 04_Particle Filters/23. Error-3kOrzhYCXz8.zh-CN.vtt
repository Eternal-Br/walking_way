WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.000
这是我的参考答案

00:00:02.000 --> 00:00:04.000
还是这个命令 print eval(myrobot,p)

00:00:04.000 --> 00:00:06.000
这并不难

00:00:06.000 --> 00:00:08.000
但非常有意思

00:00:08.000 --> 00:00:10.000
这里是我得到的一系列数字

00:00:10.000 --> 00:00:15.000
实际上 我们得到的数字不一定完全一样

00:00:15.000 --> 00:00:18.000
有时候命令会无效

00:00:18.000 --> 00:00:20.000
我们再运行一次

00:00:20.000 --> 00:00:22.000
又得到了很小的值

00:00:22.000 --> 00:00:25.000
再运行一次 再来一次

00:00:25.000 --> 00:00:28.000
这里很有意思 我们看看这些误差：

00:00:28.000 --> 00:00:30.000
5, 5, 7, 1--

00:00:30.000 --> 00:00:32.000
3, 5, 6, 7, 7, 6.

00:00:32.000 --> 00:00:34.000
这次运行效果不错 误差降到了 6

00:00:34.000 --> 00:00:36.000
如果不执行粒子过滤 采用随机的粒子组

00:00:36.000 --> 00:00:40.000
结果可能会差很多

00:00:40.000 --> 00:00:45.000
实际上 要了解这里 我们把 print eval 命令

00:00:45.000 --> 00:00:51.000
移动到最前面 在这里我们没有部署粒子滤波器

00:00:51.000 --> 00:00:53.000
然后点击运行 你会发现

00:00:53.000 --> 00:00:58.000
只需要一个粒子滤波步骤 就从 38 降到了 4、3、3

00:00:58.000 --> 00:01:01.000
误差大幅降低

00:01:01.000 --> 00:01:05.000
现在 运行多次时 可能会运行失败

00:01:05.000 --> 00:01:09.000
因为附近没有粒子

00:01:09.000 --> 00:01:11.000
奇怪的是 我们没有碰到失败的情况

00:01:11.000 --> 00:01:14.000
我之前在编程和测试时 碰到过一次失败

00:01:14.000 --> 00:01:17.000
误差好像是 15 或 20

00:01:17.000 --> 00:01:19.000
但每次要示范的时候 总是运气不好

00:01:19.000 --> 00:01:21.000
嗯 这个粒子滤波器太好了

00:01:21.000 --> 99:59:59.999
它获得正确答案的速度超级、超级快

