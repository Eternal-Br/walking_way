WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:02.000
答えはこうなります

00:00:02.000 --> 00:00:04.000
次のようなコマンドになりますprint eval(myrobot, p)--

00:00:04.000 --> 00:00:06.000
難しくはありませんでしたが

00:00:06.000 --> 00:00:08.000
楽しむことができたと思います

00:00:08.000 --> 00:00:10.000
ここに 抽出できる数字のシーケンスがあります

00:00:10.000 --> 00:00:15.000
結局のところ 常に同じ数を得るわけではありません

00:00:15.000 --> 00:00:18.000
時々 機能しないこともあります

00:00:18.000 --> 00:00:20.000
2 回目の実行を行います

00:00:20.000 --> 00:00:22.000
小さな値があります

00:00:22.000 --> 00:00:25.000
値を次々実行します

00:00:25.000 --> 00:00:28.000
興味深いものなので これらのエラーを見てみましょう

00:00:28.000 --> 00:00:30.000
5, 5, 7, 1--

00:00:30.000 --> 00:00:32.000
3, 5, 6, 7, 7, 6.

00:00:32.000 --> 00:00:34.000
良い実行です エラーは 6 まで下がります

00:00:34.000 --> 00:00:36.000
粒子フィルターを使用せず

00:00:36.000 --> 00:00:40.000
ランダムに粒子セットを使用した場合と比較します

00:00:40.000 --> 00:00:45.000
実際 これを理解するために 「print eval」コマンドを使って

00:00:45.000 --> 00:00:51.000
 一番初めに移動します ここでは 粒子フィルターは何もしていません

00:00:51.000 --> 00:00:53.000
実行に成功すると 粒子フィルタリングの 1 ステップで

00:00:53.000 --> 00:00:58.000
38 から 4 3 3 になり

00:00:58.000 --> 00:01:01.000
エラーが劇的に減少しています

00:01:01.000 --> 00:01:05.000
何度も実行されていますが 失敗する場合があります

00:01:05.000 --> 00:01:09.000
この場合 粒子は近くにありません

00:01:09.000 --> 00:01:11.000
不思議なことに 今は 現れていません

00:01:11.000 --> 00:01:14.000
テストして プログラミングしていた際に 1 つの粒子を取得しました

00:01:14.000 --> 00:01:17.000
15 回か 20 回は失敗しました

00:01:17.000 --> 00:01:19.000
デモをしたいときに いつでもうまくいくわけではありません

00:01:19.000 --> 00:01:21.000
この粒子フィルターはすばらしいものです

00:01:21.000 --> 99:59:59.999
答えを比較的正確に 迅速に取得できるからです

