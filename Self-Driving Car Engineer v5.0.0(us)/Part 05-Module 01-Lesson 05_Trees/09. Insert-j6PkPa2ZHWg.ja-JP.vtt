WEBVTT
Kind: captions
Language: ja-JP

00:00:00.360 --> 00:00:04.515
順番がなければ比較的簡単に
ツリーに要素を挿入できます

00:00:04.515 --> 00:00:07.970
別のノードの上に
ノードを追加していきます

00:00:07.970 --> 00:00:11.350
これは葉であったり
1 つの子を持つ親ノードかもしれません

00:00:12.380 --> 00:00:15.435
ここで二分木と呼ばれる
2 つの子ノードを持つツリー構造を使用します

00:00:15.435 --> 00:00:18.255
最初に
ルートを設定し

00:00:18.255 --> 00:00:21.410
オープンスポットが見つかるまで
ツリーを下に伸ばし続ける必要があります

00:00:22.480 --> 00:00:25.120
ではオープンスポットを見つけるのに
どれくらい時間がかかるでしょうか

00:00:25.120 --> 00:00:28.400
最悪のケースでは
最長の経路たどり

00:00:28.400 --> 00:00:29.770
最も遠い葉に到達します

00:00:30.910 --> 00:00:33.530
その場合、たどった
ノードの数は

00:00:33.530 --> 00:00:35.460
ツリーの高さと等しくなります

00:00:35.460 --> 00:00:38.110
ですが二分木の高さとは何でしょうか

00:00:38.110 --> 00:00:41.630
ソートアルゴリズムを使った場合のように
いくつかの例と

00:00:41.630 --> 00:00:43.120
理由を見てみましょう

00:00:43.120 --> 00:00:45.500
ここに 2 つの異なるツリーがあります

00:00:45.500 --> 00:00:48.510
これらは完全二分木と呼ばれており
最終レベルのリーフを除き

00:00:48.510 --> 00:00:51.120
すべてのノードに
2 つの子があります

00:00:52.160 --> 00:00:57.169
このツリーは 3 ノードで
2 レベル

00:00:57.170 --> 00:01:01.856
こちらは 7 ノードで 1、2、3 レベルがあります

00:01:01.856 --> 00:01:06.400
ツリーが成長すると
それぞれの新しいレベルは

00:01:06.400 --> 00:01:08.790
2 のべき乗に相当する数のノードを保持します

00:01:08.790 --> 00:01:10.380
これについてちょっと熟考してください。

00:01:12.220 --> 00:01:14.640
各ノードは 2 つの子を持つことができます。

00:01:14.640 --> 00:01:19.390
つまり新しい各レベルには
前レベルの 2 倍の数のノードを追加できます。

00:01:19.390 --> 00:01:22.310
2 のべき乗の話に
戻り

00:01:22.310 --> 00:01:24.790
log (n) について考察しましょう。

00:01:24.790 --> 00:01:26.410
ここに適用しますか。

00:01:26.410 --> 00:01:28.100
それでは見てみましょう。

00:01:28.100 --> 00:01:31.500
バイナリーサーチで見たものと
同じパターンです。

00:01:31.500 --> 00:01:35.640
レベルの数の増加は
2 のべき乗に非常に似ています。

00:01:35.640 --> 00:01:38.450
その理由を理解するために
ビジュアライゼーションを活用します。

00:01:38.450 --> 00:01:42.270
各レベルでほぼ 2 倍の
要素を追加しています。

00:01:42.270 --> 00:01:44.509
新しいレベルを追加する必要がある

00:01:44.510 --> 00:01:48.790
あるいはバイナリーサーチのたびに
配列を分割します。

00:01:48.790 --> 00:01:52.720
これは約 2 倍の要素を追加する
スペースを確保するためです。

00:01:54.420 --> 00:01:57.280
各レベルで 2 のべき乗を
加算しています。

00:01:57.280 --> 00:02:01.250
全体的なノードをカウントすると
それは正確な 2 のべき乗にはなりません。

00:02:02.410 --> 00:02:06.410
3 レベルを持つことは全体として
8 ノードを意味するものではありません。

00:02:06.410 --> 00:02:09.978
ですが 4 番目のレベルは
8 ノードを持つことになります。

