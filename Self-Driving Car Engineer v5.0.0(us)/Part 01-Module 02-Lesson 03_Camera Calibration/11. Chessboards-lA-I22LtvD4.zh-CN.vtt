WEBVTT
Kind: captions
Language: zh-CN

00:00:00.500 --> 00:00:03.220
我准备在这个 Jupyter Notebook 中

00:00:03.220 --> 00:00:04.370
演示一遍镜头校准的流程

00:00:05.480 --> 00:00:09.750
第一步是读取用于标定的多张棋盘图像

00:00:09.750 --> 00:00:14.219
建议使用至少 20 张图像 以实现可靠的校准

00:00:14.220 --> 00:00:15.463
在这个例子里

00:00:15.462 --> 00:00:18.675
该文件夹中有多张校准图像

00:00:18.675 --> 00:00:23.198
它们都是同一个棋盘的图像 只是拍摄角度和距离不一样

00:00:23.199 --> 00:00:26.250
此外 还有一幅检测图像 最后我们需要检测

00:00:26.250 --> 00:00:28.370
相机校准的效果 并去除该检测图像中的畸变

00:00:29.690 --> 00:00:33.189
在每幅棋盘图像中可以检测到 8×6 个角点

00:00:34.380 --> 00:00:36.080
我将详细讲解

00:00:36.079 --> 00:00:38.058
第一张图像的校准步骤

00:00:39.560 --> 00:00:43.498
首先 你能看到我已经导入了 Numpy OpenCV

00:00:43.497 --> 00:00:44.799
和用于绘图的库

00:00:44.799 --> 00:00:49.669
接下来 读取 calibration1.jpg 并显示这张图片

00:00:51.149 --> 00:00:53.179
这就是我们的校准图像

00:00:53.179 --> 00:00:56.259
我会把这张二维图像中的角点（称为image points）的坐标

00:00:56.259 --> 00:01:00.019
与真实 没有畸变的棋盘图上对应点（称为object points）的坐标

00:01:00.020 --> 00:01:04.099
一一对应起来

00:01:04.099 --> 00:01:08.290
接下来 我将定义两个空数组来保存这些点

00:01:08.290 --> 00:01:09.010
包括对象点（object points）和图像点（image points）

00:01:10.170 --> 00:01:12.379
对象点保持不动

00:01:12.379 --> 00:01:15.619
它们就是 8×6 的棋盘上

00:01:15.620 --> 00:01:16.650
已知角点的坐标

00:01:17.959 --> 00:01:23.693
这些点都是三维坐标 从最左上角的 0,0,0 开始

00:01:23.694 --> 00:01:27.558
到最右下角的 7,5,0 结束

00:01:27.558 --> 00:01:29.439
每个点的 z 坐标都为零

00:01:29.439 --> 00:01:32.849
因为棋盘是放置在一个扁平的图像平面上的

00:01:32.849 --> 00:01:36.539
x 和 y 坐标是这些角点的所有坐标

00:01:36.540 --> 00:01:38.570
下面 我将准备这些对象点

00:01:38.569 --> 00:01:41.979
首先在数组中创建 6×8 个点

00:01:41.980 --> 00:01:46.155
每个点都有三列数据 即每个点的 x、y 和 z 坐标

00:01:46.155 --> 00:01:50.724
我将试用 Numpy 的 zero 函数将这些坐标点都初始化为零

00:01:52.194 --> 00:01:56.004
z 坐标将保持为零 无需变动

00:01:56.004 --> 00:01:57.564
不过对于前两列数据 即 x、y 坐标

00:01:57.564 --> 00:02:01.655
我将使用 Numpy 的 mgrid 函数生成我想要的坐标值

00:02:02.715 --> 00:02:06.265
mgrid 的返回值是给定网格大小的坐标值

00:02:06.265 --> 00:02:10.879
我将这些坐标值重新排列为两列的形式 一列为坐标 x 另一列为 y 坐标

00:02:10.879 --> 00:02:13.669
接下来 为了新建图像点

00:02:13.669 --> 00:02:17.209
需要查看失真的校准图像并检测棋盘的角点

00:02:18.479 --> 00:02:22.599
OpenCV 可让我们轻松地检测到棋盘角点

00:02:22.599 --> 00:02:25.609
它提供了一个名为 findChessboardCorners 的函数

00:02:25.610 --> 00:02:27.029
该函数可返回在灰度图像中检测到的角点

00:02:28.110 --> 00:02:30.270
因此，我先把这个图像转为灰度图像

00:02:30.270 --> 00:02:33.740
然后将其作为 findChessboardCorners 函数的参数传入

00:02:33.740 --> 00:02:37.409
同时传入地还有图像中每行每列

00:02:37.409 --> 00:02:38.030
角点的个数

00:02:38.030 --> 00:02:41.680
在本例中 角点个数为 8×6，最后一个参数用于传入一些操作标记

00:02:41.680 --> 00:02:43.990
在这个例子不需要传入任何标记

00:02:43.990 --> 00:02:45.770
每当函数检测到角点

00:02:45.770 --> 00:02:48.600
就把这些点添加到存放图像点的数组中

00:02:48.599 --> 00:02:51.049
我还会把已经准备好的对象点（变量名为 objp）

00:02:51.050 --> 00:02:53.730
相应地添加到对象点的数组中

00:02:53.729 --> 00:02:55.789
对所有的校准图像而言 这些对象点都是相同的

00:02:55.789 --> 00:03:00.269
因为它们代表的是同一个真实的棋盘

00:03:00.270 --> 00:03:02.500
接下来 我在图像上标记出检测到的角点

00:03:02.500 --> 00:03:04.740
具体做法是 调用 drawChessboardCorners 函数

00:03:04.740 --> 00:03:08.790
该函数接受目标图像、角点个数和角点坐标作为参数

00:03:08.789 --> 00:03:10.456
我把这些角点展示出来

00:03:10.456 --> 00:03:13.338
让大家在交互窗口中看到检测结果

00:03:13.338 --> 00:03:14.610
下面来运行这段代码

00:03:14.610 --> 00:03:17.009
这就是所检测到的角点的样子

00:03:17.009 --> 00:03:23.489
放大之后 可以看到这些角点的检测似乎非常准确

00:03:23.490 --> 00:03:27.140
接下来 我们对所有校准图像重复上述步骤

00:03:27.139 --> 00:03:31.399
我可以导入 glob  API 从而读入所有的校准图像

00:03:31.400 --> 00:03:34.420
该 API 可帮助导入文件名比较一致的图像

00:03:34.419 --> 00:03:36.819
例如 校准图像1、校准图像2、校准图像3 等等

00:03:37.900 --> 00:03:41.480
然后我将遍历每个图像文件 检测出角点

00:03:41.479 --> 00:03:45.039
并将这些角点分别添加到对象点和图像点对应的数组中

00:03:45.039 --> 00:03:47.659
然后 我们将使用这些对象点和

00:03:47.659 --> 00:03:50.069
图像点来校准摄像头

00:03:50.069 --> 00:03:53.729
下面 我来讲解进行相机标定和图像正畸

00:03:53.729 --> 00:03:56.289
所涉及的 OpenCV 函数

00:03:56.289 --> 00:04:00.949
如需标定镜头  可以使用 OpenCV 提供的 calibrateCamera 函数

00:04:00.949 --> 00:04:04.569
该函数的入参包括对象点坐标 图像点坐标

00:04:04.569 --> 00:04:06.269
以及图像的尺寸

00:04:06.270 --> 00:04:08.650
利用这些输入参数 该函数可计算并

00:04:08.650 --> 00:04:13.030
返回失真系数矩阵以及相机矩阵

00:04:13.030 --> 00:04:17.050
它们会帮助我们将三维的对象点转换为二维的图像点

00:04:17.050 --> 00:04:20.879
该函数还会返回相机在世界坐标系中的位置

00:04:20.879 --> 00:04:22.800
包括旋转向量和平移向量

00:04:23.860 --> 00:04:26.379
下一个函数是 undistort

00:04:26.379 --> 00:04:30.259
该函数的入参是一幅畸变的图像 相机矩阵和

00:04:30.259 --> 00:04:32.110
失真系数矩阵

00:04:32.110 --> 00:04:36.090
它的返回值是矫正后的图像 通常称之为目标图像

00:04:37.430 --> 00:04:40.400
在接下来的小测验中 你将使用你所学到的知识

00:04:40.399 --> 00:04:42.939
对相机进行标定并去除图像中的畸变

00:04:42.939 --> 00:04:43.379
祝你好运！

