WEBVTT
Kind: captions
Language: ja-JP

00:00:00.500 --> 00:00:03.220
最初のカメラキャリブレーションのステップを

00:00:03.220 --> 00:00:04.370
このJupyterノートブックで行います

00:00:05.480 --> 00:00:09.750
最初のステップではチェス盤のキャリブレーション画像を読み込みます

00:00:09.750 --> 00:00:14.219
信頼性の高いキャリブレーションにするには少なくとも20枚の画像を使ってください

00:00:14.220 --> 00:00:15.463
この例では

00:00:15.462 --> 00:00:18.675
このキャリブレーション画像フォルダー内に多数の画像があります

00:00:18.675 --> 00:00:23.198
すべて 異なる角度と距離から撮影したチェス盤の画像です

00:00:23.199 --> 00:00:26.250
テスト画像もあります  最終的には

00:00:26.250 --> 00:00:28.370
カメラキャリブレーションをテストして歪みを補正します

00:00:29.690 --> 00:00:33.189
各チェス盤には8かける6の検出すべきコーナーがあります

00:00:34.380 --> 00:00:36.080
最初のキャリブレーション画像の

00:00:36.079 --> 00:00:38.058
キャリブレーションステップを詳しく見ていきます

00:00:39.560 --> 00:00:43.498
まず すでにNumpy OpenCVを実行し

00:00:43.497 --> 00:00:44.799
インポートをプロットしてあります

00:00:44.799 --> 00:00:49.669
次に最初の画像 "calibration1.jpg" を読み込んで表示してみます。

00:00:51.149 --> 00:00:53.179
これがそのキャリブレーション画像です

00:00:53.179 --> 00:00:56.259
この2D画像のコーナーの座標

00:00:56.259 --> 00:01:00.019
これをイメージポイントと呼びますが  これを現実の 歪みを補正した

00:01:00.020 --> 00:01:04.099
チェス盤のコーナーの3D座標 これをオブジェクトポイントと呼びますが これにマッピングします

00:01:04.099 --> 00:01:08.290
これらのオブジェクトポイントとイメージポイントを保持する2つの空の配列を

00:01:08.290 --> 00:01:09.010
セットアップします

00:01:10.170 --> 00:01:12.379
オブジェクトポイントはすべて同じです

00:01:12.379 --> 00:01:15.619
8かける6の盤のチェス盤のコーナーの既知の座標

00:01:15.620 --> 00:01:16.650
にすぎません

00:01:17.959 --> 00:01:23.693
これらのポイントは3D座標x y Zであり左上のコーナー

00:01:23.694 --> 00:01:27.558
0 0 0 から右下の7 5 0までです

00:01:27.558 --> 00:01:29.439
z座標はどのポイントもゼロです

00:01:29.439 --> 00:01:32.849
盤はフラットな画像平面上にあるからです

00:01:32.849 --> 00:01:36.539
またxとyはすべてコーナーの座標です

00:01:36.540 --> 00:01:38.570
これらのオブジェクトポイントの

00:01:38.569 --> 00:01:41.979
準備として まず 配列に6かける8のポイントを作成します

00:01:41.980 --> 00:01:46.155
それぞれ各コーナーのx y z座標のための3カラムがあります

00:01:46.155 --> 00:01:50.724
Numpyのゼロ関数を使用して すべてゼロに初期化します

00:01:52.194 --> 00:01:56.004
z座標はゼロのままなので そのままにしておきますが

00:01:56.004 --> 00:01:57.564
最初の2つのカラムxとyについては

00:01:57.564 --> 00:02:01.655
Numpyのmgrid関数を使用して必要な座標を生成します

00:02:02.715 --> 00:02:06.265
mgridは与えられたグリッドサイズの座標値を返し

00:02:06.265 --> 00:02:10.879
これらの座標を2つのカラムに戻します  1つはx 1つはyです

00:02:10.879 --> 00:02:13.669
次にイメージポイントを作成するために

00:02:13.669 --> 00:02:17.209
歪んだキャリブレーション画像を見て 盤のコーナーを検出します

00:02:18.479 --> 00:02:22.599
OpenCVにはfindChessboardCornersという名前の関数があり

00:02:22.599 --> 00:02:25.609
見つかったコーナーをグレースケール画像で返すので

00:02:25.610 --> 00:02:27.029
チェス盤のコーナーを簡単に検出できます

00:02:28.110 --> 00:02:30.270
この画像をグレースケールに変換して

00:02:30.270 --> 00:02:33.740
findChessboardCorners関数に渡します

00:02:33.740 --> 00:02:37.409
これはグレースケール画像とチェス盤のコーナーの寸法を

00:02:37.409 --> 00:02:38.030
取ります

00:02:38.030 --> 00:02:41.680
この例では 8かける6であり 最後のパラメーターはフラグです

00:02:41.680 --> 00:02:43.990
この例では ありません

00:02:43.990 --> 00:02:45.770
この関数がコーナーを検出したら

00:02:45.770 --> 00:02:48.600
それらのポイントをイメージポイント配列に付加します

00:02:48.599 --> 00:02:51.049
準備したオブジェクトポイント

00:02:51.050 --> 00:02:53.730
objpもオブジェクトポイント配列に付加します

00:02:53.729 --> 00:02:55.789
これらのオブジェクトポイントはすべての

00:02:55.789 --> 00:03:00.269
キャリブレーション画像で同じです  現実のチェス盤を表すからです

00:03:00.270 --> 00:03:02.500
次に 検出されたコーナーを描画するために

00:03:02.500 --> 00:03:04.740
drawChessboardCornersを呼び出します

00:03:04.740 --> 00:03:08.790
これは画像 コーナー寸法 およびコーナーポイントを取ります

00:03:08.789 --> 00:03:10.456
これらのコーナーを表示すると

00:03:10.456 --> 00:03:13.338
検出されたものをインタラクティブウィンドウで確認できます

00:03:13.338 --> 00:03:14.610
では このコードを実行しましょう

00:03:14.610 --> 00:03:17.009
検出されたコーナーはこのようになります

00:03:17.009 --> 00:03:23.489
拡大すると コーナーはほぼ正確に検出されているように見えます

00:03:23.490 --> 00:03:27.140
次のステップでは これをすべてのキャリブレーション画像に対して行います

00:03:27.139 --> 00:03:31.399
すべてのキャリブレーション画像を読み込むにはglob APIをインポートします

00:03:31.400 --> 00:03:34.420
これは一貫したファイル名で画像を読み込むのに役立ちます

00:03:34.419 --> 00:03:36.819
キャリブレーション1 2 3などです

00:03:37.900 --> 00:03:41.480
次に各画像ファイルについてコーナーの検出と

00:03:41.479 --> 00:03:45.039
オブジェクトポイントおよびイメージポイント配列へのポイントの付加を繰り返します

00:03:45.039 --> 00:03:47.659
その後 オブジェクトポイントとイメージ ポイントを使用して

00:03:47.659 --> 00:03:50.069
このカメラをキャリブレートできます

00:03:50.069 --> 00:03:53.729
カメラのキャリブレートと画像の歪み補正に必要なOpenCV関数について

00:03:53.729 --> 00:03:56.289
説明します

00:03:56.289 --> 00:04:00.949
カメラをキャリブレートするために OpenCVにはcalibrateCamera関数が用意されています

00:04:00.949 --> 00:04:04.569
これはオブジェクトポイント イメージ ポイント および

00:04:04.569 --> 00:04:06.269
画像の形状を取ります

00:04:06.270 --> 00:04:08.650
これらの入力を使用してひずみ係数を計算し

00:04:08.650 --> 00:04:13.030
3Dオブジェクトポイントを2Dイメージポイントに変換するために必要な

00:04:13.030 --> 00:04:17.050
カメラ行列とともに返します

00:04:17.050 --> 00:04:20.879
また ワールド内のカメラの位置を

00:04:20.879 --> 00:04:22.800
回転および変換ベクターの値として返します

00:04:23.860 --> 00:04:26.379
次に必要な関数は undistortです

00:04:26.379 --> 00:04:30.259
これは歪んだ画像 カメラ行列 および

00:04:30.259 --> 00:04:32.110
ひずみ係数を取ります

00:04:32.110 --> 00:04:36.090
そして歪みのない、デスティネーション画像と呼ばれるものを返します

00:04:37.430 --> 00:04:40.400
次のクイズでは 学習したものを応用してカメラをキャリブレートし

00:04:40.399 --> 00:04:42.939
画像の歪みを修正する必要があります

00:04:42.939 --> 00:04:43.379
頑張ってください

