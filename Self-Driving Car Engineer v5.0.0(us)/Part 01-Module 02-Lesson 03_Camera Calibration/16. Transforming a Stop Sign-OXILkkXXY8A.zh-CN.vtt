WEBVTT
Kind: captions
Language: zh-CN

00:00:00.050 --> 00:00:03.699
这是一个从某个角度观察到的停车标志图

00:00:03.700 --> 00:00:07.240
接下来 我将向大家展示如何创建和应用透视变换

00:00:07.240 --> 00:00:10.199
使这张图看起来就像是从正前方观察到的一样

00:00:10.199 --> 00:00:14.449
透视变换很重要 我们编写这个软件的最终目的

00:00:14.449 --> 00:00:17.730
是对公路图像进行透视变换

00:00:17.730 --> 00:00:19.629
从而帮助你得到车道线曲率

00:00:19.629 --> 00:00:23.619
这里用交通标志作为示例 这是因为

00:00:23.620 --> 00:00:27.330
它能最直观地反映透视变换是否正确

00:00:27.329 --> 00:00:30.696
特别是对于带有文字或清晰参考点的图像

00:00:30.696 --> 00:00:35.420
为进行透视变换 我们首先需要选择四个点

00:00:35.420 --> 00:00:38.039
这些点定义了 这幅图像中某个平面上的一个矩形

00:00:38.039 --> 00:00:41.200
四个点就足以确定从一种视角到另一种视角

00:00:41.200 --> 00:00:43.170
的线性变换了

00:00:43.170 --> 00:00:44.210
在这个例子中

00:00:44.210 --> 00:00:48.469
我们停车标志表面的一个平面上选取四个点

00:00:48.469 --> 00:00:52.240
此外 我们还需要选择我们期望这四个点在变换后出现的位置

00:00:52.240 --> 00:00:55.530
变换之后的图像称为扭转图像 (warped image)

00:00:55.530 --> 00:00:59.340
然后 我们可以使用 OpenCV 提供的函数 计算变换矩阵

00:00:59.340 --> 00:01:01.790
这种变换将原始图像中的点

00:01:01.789 --> 00:01:03.960
映射到不同视角下的扭转图像中

00:01:05.090 --> 00:01:08.450
在 Jupyter Notebook 中 我展示了一张停车标志图

00:01:08.450 --> 00:01:11.200
它显示在交互式窗口中

00:01:11.200 --> 00:01:14.500
可以看到 这张图像是在某个倾斜角度拍摄的

00:01:14.500 --> 00:01:17.150
我想对其应用透视变换 使其看起来

00:01:17.150 --> 00:01:19.000
就像是从标志的正前方观察到的一样

00:01:19.000 --> 00:01:23.340
首先 在源图像中

00:01:23.340 --> 00:01:26.969
以及尚未存在的（扭转的）目标图像中分别手动创建四个点

00:01:26.969 --> 00:01:29.929
这些点可定义透视变换

00:01:29.930 --> 00:01:32.690
我首先选择源图像中的点

00:01:32.689 --> 00:01:34.480
我通过每个点的

00:01:34.480 --> 00:01:37.160
X 和 Y 坐标值选择这些点

00:01:37.159 --> 00:01:39.289
在交互式窗口中 我可以把鼠标悬停在每个点上

00:01:39.290 --> 00:01:42.359
查看其 X 和 Y 坐标值

00:01:42.359 --> 00:01:44.579
让我们放大这个停车标志图 以便更好地观察

00:01:46.750 --> 00:01:50.280
我把第一个点定义为这个停车标志图上的右上角

00:01:50.280 --> 00:01:53.040
并在第一个点的正下方定义第二个点

00:01:53.040 --> 00:01:56.780
接着选择左边这个点 最后选择左上角这个点

00:01:58.280 --> 00:02:01.980
这样就得到了我所选中的四个点的 X 和 Y 坐标值

00:02:01.980 --> 00:02:05.310
这四个点能够定义停车标志上的一个矩形平面

00:02:05.310 --> 00:02:08.969
我甚至可以在图像上显示这些点 以确认它们是否在正确的位置

00:02:08.969 --> 00:02:12.770
具体做法是使用 plt.plot绘图 输入 X 和 Y 坐标值以及这个点号字符

00:02:14.340 --> 00:02:17.377
这样 这四个点全部显示出来了 它们看起来很棒

00:02:19.301 --> 00:02:20.709
刚刚讲的是只是透视变换的第一步

00:02:20.710 --> 00:02:23.980
进行透视变换总共需要若干步

00:02:23.979 --> 00:02:27.169
把这些坐标值放在一个名为 warp 的函数中

00:02:27.169 --> 00:02:30.586
该函数接受一副图像作为入参 并返回变换后的图像

00:02:30.586 --> 00:02:33.484
它就是我们编写的warp函数 可以接收一张图像

00:02:33.485 --> 00:02:35.945
这些是我之前选择的四个坐标值

00:02:35.944 --> 00:02:39.935
它们被放进了一个名为 src 的数组中

00:02:39.935 --> 00:02:44.055
接下来 为了定义扭曲图像所需的矩形平面

00:02:44.055 --> 00:02:47.155
我将选择四个不同的点

00:02:47.155 --> 00:02:48.224
作为源图像点的映射

00:02:48.224 --> 00:02:51.504
这次 目测位于目标图像中的矩形

00:02:51.504 --> 00:02:52.740
并选择几个点

00:02:52.740 --> 00:02:54.770
我选择了能定义这个矩形的四个点

00:02:54.770 --> 00:02:58.210
从右上角开始顺时针环绕一圈 直至左上角

00:02:58.210 --> 00:03:02.770
这四个点定义了我们想要的矩形

00:03:02.770 --> 00:03:07.550
将这些点传入我们编写地函数中 并放在一个名为 dst 的目标点数组中

00:03:07.550 --> 00:03:09.080
现在 我们已经有了源图像点和对应目标图像点的坐标

00:03:09.080 --> 00:03:12.810
可以计算透视变换矩阵了

00:03:12.810 --> 00:03:17.310
透视变换通过一个映射矩阵表示 由 getPerspectiveTransform 函数返回

00:03:17.310 --> 00:03:21.259
getPerspectiveTransform 这个函数接收这四个源图像点坐标

00:03:21.259 --> 00:03:23.219
以及对应的目标图像点坐标

00:03:23.219 --> 00:03:27.659
并返回透视变换的映射矩阵 这里称其为 M

00:03:27.659 --> 00:03:31.194
你还可以用反向透视变换恢复这个图像

00:03:31.194 --> 00:03:35.875
只需在这个函数中对调源图像点和目标图像点即可

00:03:35.875 --> 00:03:37.530
这样就进行了反变换

00:03:38.719 --> 00:03:43.376
接下来 只需对原始图像使用变换矩阵 M 就能得到变换后的扭转图像

00:03:43.376 --> 00:03:47.066
这一步调用 warpPerspective 函数来进行

00:03:47.066 --> 00:03:51.606
这个函数的输入包括源图像 透视矩阵 M 以及想得到的扭转图像的尺寸

00:03:51.606 --> 00:03:56.144
在这里 我把扭转图像的大小设为与原始图像相同

00:03:56.144 --> 00:04:00.408
此外 扭曲视角还需考虑 如何内插和填充在扭转图像过程中丢失的点

00:04:00.407 --> 00:04:04.449
这里使用了线性插值

00:04:04.449 --> 00:04:08.179
该步骤结束后 会返回一个基于矩阵 M 以及对给定图像进行

00:04:08.180 --> 00:04:09.890
透视变换后的图像

00:04:09.889 --> 00:04:12.129
最后，我将这个变换后的图像作为函数的返回值返回

00:04:13.159 --> 00:04:17.439
现在来看看当我对一幅图像使用这个 warp 函数时会发生什么

00:04:17.439 --> 00:04:19.269
这里是把原始图像和透视变换后的图像

00:04:19.269 --> 00:04:21.588
并排显示的代码

00:04:21.588 --> 00:04:23.810
它们就是原始图像和扭转后的图像

00:04:23.810 --> 00:04:24.519
看上去不错

00:04:24.519 --> 00:04:28.469
就像我站在这个停车标志正前方看它一样

00:04:28.470 --> 00:04:31.340
接下去 你的任务是对一幅新的图像进行透视变换

